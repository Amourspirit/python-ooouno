# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.embed
# Libre Office Version: 7.2
import os
import typing
if typing.TYPE_CHECKING:
    from ..beans.named_value import NamedValue as NamedValue_a37a0af3
    from .x_embedded_object import XEmbeddedObject as XEmbeddedObject_ddee0cbe
from ooo_uno.oenv import UNO_ENVIRONMENT
if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
    from ooo_uno.helper import uno_helper


class InsertedObjectInfo(object):
    """
    Struct Class

    is intended to provide result of creation of an embedded object by dialog.

    See Also:
        `API InsertedObjectInfo <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1embed_1_1InsertedObjectInfo.html>`_


    Note:
        | At runtime InsertedObjectInfo will be an actual uno struct however can seamlessly be treated as a regualr class.
        | At design time a class is presumed. This allows for better typings.
        | InsertedObjectInfo is a callable and can be treatead as a class and create instances.
    """

    def __init__(self, Object: 'typing.Optional[XEmbeddedObject_ddee0cbe]' = None, Options: 'typing.Optional[typing.List[NamedValue_a37a0af3]]' = None):
        self._object = Object
        self._options = Options

    @property
    def Object(self) -> 'XEmbeddedObject_ddee0cbe':
        """
        The new created embedded object.
        """
        return self._object
    
    @Object.setter
    def Object(self, value: 'XEmbeddedObject_ddee0cbe') -> None:
        self._object = value

    @property
    def Options(self) -> 'typing.List[NamedValue_a37a0af3]':
        """
        Container related options selected by user.
        
        A dialog related to embedded object creation usually allows user to make some choices that can be container related. This information can be provided by this member.
        """
        return self._options
    
    @Options.setter
    def Options(self, value: 'typing.List[NamedValue_a37a0af3]') -> None:
        self._options = value

def _dynamic_struct() -> None:
    # Dynamically create uno struct using uno
    global InsertedObjectInfo
    ignore = os.environ.get('ooouno_ignore_runtime', 'False')
    if ignore == 'True':
        return
    if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
        order = ('Object', 'Options')
        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('com.sun.star.embed.InsertedObjectInfo')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        InsertedObjectInfo = _struct_init

if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
    _dynamic_struct()

__all__ = ['InsertedObjectInfo']
