# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Enum Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.ucb
# Libre Office Version: 7.2
import os
from typing import TYPE_CHECKING
from enum import Enum
from ooo_uno.oenv import UNO_ENVIRONMENT
if (not TYPE_CHECKING) and UNO_ENVIRONMENT:
    from ooo_uno.helper.enum_helper import uno_enum_class_new
    from com.sun.star.ucb.OutgoingMessageState import (COMPLETELY_LOCALLY_SENT, CONFIRMED, EXTERNAL_ERROR, NONRECOVERABLE_LOCAL_ERROR, PARTIALLY_LOCALLY_SENT, RECOVERABLE_LOCAL_ERROR, WAITING_CONFIRMATION, WRITTEN)


class OutgoingMessageState(Enum):
    """
    

    See Also:
        `API OutgoingMessageState <https://api.libreoffice.org/docs/idl/ref/namespacecom_1_1sun_1_1star_1_1ucb.html#a8dec3ee1933cc93724b3764b124b8cc1>`_
    """
    COMPLETELY_LOCALLY_SENT = 'COMPLETELY_LOCALLY_SENT'
    """
    Message has been sent upstream to all recipients.
    """
    CONFIRMED = 'CONFIRMED'
    """
    Recipient confirmed reading.
    """
    EXTERNAL_ERROR = 'EXTERNAL_ERROR'
    """
    Global fatal error (e.g.
    
    last member in SMTP chain could not deliver the message).
    """
    NONRECOVERABLE_LOCAL_ERROR = 'NONRECOVERABLE_LOCAL_ERROR'
    """
    Local fatal error (e.g.
    
    first SMTP server upstream did not accept the message).
    """
    PARTIALLY_LOCALLY_SENT = 'PARTIALLY_LOCALLY_SENT'
    """
    Message has been sent upstream to some recipients.
    """
    RECOVERABLE_LOCAL_ERROR = 'RECOVERABLE_LOCAL_ERROR'
    """
    Local, non-fatal error (e.g.
    
    network temporarily not available).
    """
    WAITING_CONFIRMATION = 'WAITING_CONFIRMATION'
    """
    Message was sent; we are waiting for confirmation.
    """
    WRITTEN = 'WRITTEN'
    """
    Message has just been placed into the out tray.
    """

def _dynamic_enum():
    # Dynamically create class that actually contains UNO enum instances

    global OutgoingMessageState
    ignore = os.environ.get('ooouno_ignore_runtime', 'False')
    if ignore == 'True':
        return
    # if statment is to stop VS Code from reporting errors
    if (not TYPE_CHECKING) and UNO_ENVIRONMENT:

        _dict = {
            "COMPLETELY_LOCALLY_SENT": COMPLETELY_LOCALLY_SENT,
            "CONFIRMED": CONFIRMED,
            "EXTERNAL_ERROR": EXTERNAL_ERROR,
            "NONRECOVERABLE_LOCAL_ERROR": NONRECOVERABLE_LOCAL_ERROR,
            "PARTIALLY_LOCALLY_SENT": PARTIALLY_LOCALLY_SENT,
            "RECOVERABLE_LOCAL_ERROR": RECOVERABLE_LOCAL_ERROR,
            "WAITING_CONFIRMATION": WAITING_CONFIRMATION,
            "WRITTEN": WRITTEN,
        }
        OutgoingMessageState = type('OutgoingMessageState', (object,), {
            '__doc__': 'class created dynamically. Class loosly mimics Enum',
            "__new__": uno_enum_class_new
        })
        for k, v in _dict.items():
            setattr(OutgoingMessageState, k, v)

if UNO_ENVIRONMENT:
    _dynamic_enum()

__all__ = ['OutgoingMessageState']

