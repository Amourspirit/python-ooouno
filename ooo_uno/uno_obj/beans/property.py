# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.beans
# Libre Office Version: 7.2
import typing
from ooo_uno.oenv import UNO_ENVIRONMENT, UNO_RUNTIME
_DYNAMIC = False
if (not typing.TYPE_CHECKING) and UNO_RUNTIME and UNO_ENVIRONMENT:
    _DYNAMIC = True
    from ooo_uno.helper import uno_helper

if typing.TYPE_CHECKING or _DYNAMIC is False:


    class Property(object):
        """
        Struct Class

        This structure describes a property.
        
        There are three types of properties:

        See Also:
            `API Property <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1beans_1_1Property.html>`_


        Note:
            | At runtime Property will be an actual uno struct however can seamlessly be treated as a regualr class.
            | At design time a class is presumed. This allows for better typings.
            | Property is a callable and can be treatead as a class and create instances.
        """

        def __init__(self, Attributes: typing.Optional[int] = None, Handle: typing.Optional[int] = None, Name: typing.Optional[str] = None, Type: typing.Optional[object] = None):
            self._attributes = Attributes
            self._handle = Handle
            self._name = Name
            self._type = Type

        @property
        def Attributes(self) -> int:
            """
            This field may contain zero or more constants of the PropertyAttribute constants group.
            """
            return self._attributes
        
        @Attributes.setter
        def Attributes(self, value: int) -> None:
            self._attributes = value

        @property
        def Handle(self) -> int:
            """
            contains an implementation-specific handle for the property.
            
            It may be -1 if the implementation has no handle. You can use this handle to get values from the XFastPropertySet.
            """
            return self._handle
        
        @Handle.setter
        def Handle(self, value: int) -> None:
            self._handle = value

        @property
        def Name(self) -> str:
            """
            specifies the name of the property.
            
            The name is unique within an XPropertySet. Upper and lower case are distinguished.
            """
            return self._name
        
        @Name.setter
        def Name(self, value: str) -> None:
            self._name = value

        @property
        def Type(self) -> object:
            """
            contains an object that identifies the declared type for the property.
            
            If the property has multiple types or the type is not known, but not an any, then void must be returned.
            """
            return self._type
        
        @Type.setter
        def Type(self, value: object) -> None:
            self._type = value

if not typing.TYPE_CHECKING and _DYNAMIC:
    def _dynamic_struct() -> None:
        # Dynamically create uno struct using uno
        global Property
        order = ('Attributes', 'Handle', 'Name', 'Type')

        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('com.sun.star.beans.Property')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        Property = _struct_init

    _dynamic_struct()

__all__ = ['Property']
