# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.drawing
# Libre Office Version: 7.2
from typing import TYPE_CHECKING
from ooo.oenv import UNO_ENVIRONMENT, UNO_RUNTIME, UNO_NONE
if (not TYPE_CHECKING) and UNO_RUNTIME and UNO_ENVIRONMENT:
    import uno
 
    def _get_class():
        orig_init = None
        def init(self, SequenceX = UNO_NONE, SequenceY = UNO_NONE, SequenceZ = UNO_NONE):
            if getattr(SequenceX, "__class__", None) == self.__class__:
                orig_init(self, SequenceX)
                return
            else:
                orig_init(self)
            if not SequenceX is UNO_NONE:
                if getattr(self, 'SequenceX') != SequenceX:
                    setattr(self, 'SequenceX', SequenceX)
            if not SequenceY is UNO_NONE:
                if getattr(self, 'SequenceY') != SequenceY:
                    setattr(self, 'SequenceY', SequenceY)
            if not SequenceZ is UNO_NONE:
                if getattr(self, 'SequenceZ') != SequenceZ:
                    setattr(self, 'SequenceZ', SequenceZ)

        type_name = 'com.sun.star.drawing.PolyPolygonShape3D'
        struct = uno.getClass(type_name)
        struct.__ooo_ns__ = 'com.sun.star.drawing'
        struct.__ooo_full_ns__= type_name
        struct.__ooo_type_name__ = 'struct'
        orig_init = struct.__init__
        struct.__init__ = init
        return struct

    PolyPolygonShape3D = _get_class()


else:
    from ...lo.drawing.poly_polygon_shape3_d import PolyPolygonShape3D as PolyPolygonShape3D

__all__ = ['PolyPolygonShape3D']

