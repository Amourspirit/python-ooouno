# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.drawing
# Libre Office Version: 7.2
import typing
if typing.TYPE_CHECKING:
    from .hatch_style import HatchStyle as HatchStyle_bcfe0bed
    from ..util.color import Color as Color_68e908c5
from ooo_uno.oenv import UNO_ENVIRONMENT, UNO_RUNTIME
_DYNAMIC = False
if (not typing.TYPE_CHECKING) and UNO_RUNTIME and UNO_ENVIRONMENT:
    _DYNAMIC = True
    from ooo_uno.helper import uno_helper

if typing.TYPE_CHECKING or _DYNAMIC is False:


    class Hatch(object):
        """
        Struct Class

        This struct defines the appearance of a hatch.
        
        A hatch is a texture made of straight lines.

        See Also:
            `API Hatch <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1drawing_1_1Hatch.html>`_


        Note:
            | At runtime Hatch will be an actual uno struct however can seamlessly be treated as a regualr class.
            | At design time a class is presumed. This allows for better typings.
            | Hatch is a callable and can be treatead as a class and create instances.
        """

        def __init__(self, Angle: typing.Optional[int] = None, Color: 'typing.Optional[Color_68e908c5]' = None, Distance: typing.Optional[int] = None, Style: 'typing.Optional[HatchStyle_bcfe0bed]' = None):
            self._angle = Angle
            self._color = Color
            self._distance = Distance
            self._style = Style

        @property
        def Angle(self) -> int:
            """
            You can rotate the lines of the hatch with this angle.
            
            Specified in tenths of a degree.
            """
            return self._angle
        
        @Angle.setter
        def Angle(self, value: int) -> None:
            self._angle = value

        @property
        def Color(self) -> 'Color_68e908c5':
            """
            This is the color of the hatch lines.
            """
            return self._color
        
        @Color.setter
        def Color(self, value: 'Color_68e908c5') -> None:
            self._color = value

        @property
        def Distance(self) -> int:
            """
            This is the distance between the lines in the hatch.
            """
            return self._distance
        
        @Distance.setter
        def Distance(self, value: int) -> None:
            self._distance = value

        @property
        def Style(self) -> 'HatchStyle_bcfe0bed':
            """
            The HatchStyle defines the kind of lines used to draw this hatch.
            """
            return self._style
        
        @Style.setter
        def Style(self, value: 'HatchStyle_bcfe0bed') -> None:
            self._style = value

if not typing.TYPE_CHECKING and _DYNAMIC:
    def _dynamic_struct() -> None:
        # Dynamically create uno struct using uno
        global Hatch
        order = ('Angle', 'Color', 'Distance', 'Style')

        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('com.sun.star.drawing.Hatch')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        Hatch = _struct_init

    _dynamic_struct()

__all__ = ['Hatch']
