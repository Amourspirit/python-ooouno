# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.inspection
# Libre Office Version: 7.2
import typing
if typing.TYPE_CHECKING:
    from ..graphic.x_graphic import XGraphic as XGraphic_a4da0afc
    from .x_property_control import XPropertyControl as XPropertyControl_3f260fe2
from ooo_uno.oenv import UNO_ENVIRONMENT, UNO_RUNTIME
_DYNAMIC = False
if (not typing.TYPE_CHECKING) and UNO_RUNTIME and UNO_ENVIRONMENT:
    _DYNAMIC = True
    from ooo_uno.helper import uno_helper

if typing.TYPE_CHECKING or _DYNAMIC is False:


    class LineDescriptor(object):
        """
        Struct Class

        describes the appearance of a line representing a single property in an ObjectInspector.
        
        Such a line consists of
        
        **since**
        
            OOo 2.0.3

        See Also:
            `API LineDescriptor <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1inspection_1_1LineDescriptor.html>`_


        Note:
            | At runtime LineDescriptor will be an actual uno struct however can seamlessly be treated as a regualr class.
            | At design time a class is presumed. This allows for better typings.
            | LineDescriptor is a callable and can be treatead as a class and create instances.
        """

        def __init__(self, Category: typing.Optional[str] = None, Control: 'typing.Optional[XPropertyControl_3f260fe2]' = None, DisplayName: typing.Optional[str] = None, HasPrimaryButton: typing.Optional[bool] = None, HasSecondaryButton: typing.Optional[bool] = None, HelpURL: typing.Optional[str] = None, IndentLevel: typing.Optional[int] = None, PrimaryButtonId: typing.Optional[str] = None, PrimaryButtonImage: 'typing.Optional[XGraphic_a4da0afc]' = None, PrimaryButtonImageURL: typing.Optional[str] = None, SecondaryButtonId: typing.Optional[str] = None, SecondaryButtonImage: 'typing.Optional[XGraphic_a4da0afc]' = None, SecondaryButtonImageURL: typing.Optional[str] = None):
            self._category = Category
            self._control = Control
            self._display_name = DisplayName
            self._has_primary_button = HasPrimaryButton
            self._has_secondary_button = HasSecondaryButton
            self._help_url = HelpURL
            self._indent_level = IndentLevel
            self._primary_button_id = PrimaryButtonId
            self._primary_button_image = PrimaryButtonImage
            self._primary_button_image_url = PrimaryButtonImageURL
            self._secondary_button_id = SecondaryButtonId
            self._secondary_button_image = SecondaryButtonImage
            self._secondary_button_image_url = SecondaryButtonImageURL

        @property
        def Category(self) -> str:
            """
            describes the category into which the property should be sorted by the ObjectInspector.
            
            An ObjectInspector can visually group properties which semantically belong together (for instance using tab pages). The decision which properties actually belong together is made using this Category attribute.
            
            For your implementation of XPropertyHandler, it's recommended that you document the programmatic names used for property categories. This way, your handler might be re-used in different contexts, where only the XObjectInspectorModel needs to provide consistent UI names for the categories.
            """
            return self._category
        
        @Category.setter
        def Category(self, value: str) -> None:
            self._category = value

        @property
        def Control(self) -> 'XPropertyControl_3f260fe2':
            """
            denotes the control which should be used to represent the property at the UI.
            """
            return self._control
        
        @Control.setter
        def Control(self, value: 'XPropertyControl_3f260fe2') -> None:
            self._control = value

        @property
        def DisplayName(self) -> str:
            """
            denotes the human-readable display name used to present a property to the user
            """
            return self._display_name
        
        @DisplayName.setter
        def DisplayName(self, value: str) -> None:
            self._display_name = value

        @property
        def HasPrimaryButton(self) -> bool:
            """
            determines whether a button exists which can be used for a more complex, interactive property value input.
            
            If no image for the primary button is specified, but a primary button is present, the three dots will be displayed on the button.
            """
            return self._has_primary_button
        
        @HasPrimaryButton.setter
        def HasPrimaryButton(self, value: bool) -> None:
            self._has_primary_button = value

        @property
        def HasSecondaryButton(self) -> bool:
            """
            determines whether a secondary button exists which can be used for a more complex, interactive property value input.
            
            A secondary button subordinated to the primary button. If no primary button exists (HasPrimaryButton), this member is ignored.
            """
            return self._has_secondary_button
        
        @HasSecondaryButton.setter
        def HasSecondaryButton(self, value: bool) -> None:
            self._has_secondary_button = value

        @property
        def HelpURL(self) -> str:
            """
            specifies the URL to the help topic to be associated with the property
            """
            return self._help_url
        
        @HelpURL.setter
        def HelpURL(self, value: str) -> None:
            self._help_url = value

        @property
        def IndentLevel(self) -> int:
            """
            describes the indent level for the property
            
            If a given property semantically depends on another one, the indent level can be used to visually represent this fact. For this, the dependent property's indent level would be one larger than the indent level of the other property.
            
            Normally, XPropertyHandlers will set this to 0 when describing the UI for a normal property.
            """
            return self._indent_level
        
        @IndentLevel.setter
        def IndentLevel(self, value: int) -> None:
            self._indent_level = value

        @property
        def PrimaryButtonId(self) -> str:
            """
            describes a unique id to associate with the primary button
            
            In OpenOffice.org, UI elements sometimes require a so-called UniqueID, which can be used to uniquely (within the whole application) identify this UI element. For instance, automating the OpenOffice.org UI via a dedicated separate application (\"TestTool\") requires such IDs.
            
            If a primary button exists for a property's UI representation (HasPrimaryButton), it gets the ID specified herein.
            """
            return self._primary_button_id
        
        @PrimaryButtonId.setter
        def PrimaryButtonId(self, value: str) -> None:
            self._primary_button_id = value

        @property
        def PrimaryButtonImage(self) -> 'XGraphic_a4da0afc':
            """
            describes a graphics to display at the primary button, if any.
            
            The property will be ignored if HasPrimaryButton is FALSE, or if PrimaryButtonImageURL is a non-empty string.
            """
            return self._primary_button_image
        
        @PrimaryButtonImage.setter
        def PrimaryButtonImage(self, value: 'XGraphic_a4da0afc') -> None:
            self._primary_button_image = value

        @property
        def PrimaryButtonImageURL(self) -> str:
            """
            describes the URL of an image to display on the primary button, if any.
            
            This URL will be used to obtain an actual com.sun.star.graphic.XGraphic object from a com.sun.star.graphic.GraphicProvider.
            
            The property will be ignored if HasPrimaryButton is FALSE.
            
            If you need to specify a graphic which does not have a URL, but is available as com.sun.star.graphic.XGraphic only, then you must leave PrimaryButtonImageURL empty, and use the PrimaryButtonImage property.
            """
            return self._primary_button_image_url
        
        @PrimaryButtonImageURL.setter
        def PrimaryButtonImageURL(self, value: str) -> None:
            self._primary_button_image_url = value

        @property
        def SecondaryButtonId(self) -> str:
            """
            describes a unique id to associate with the primary button
            
            If a secondary button exists for a property's UI representation (HasSecondaryButton), it gets the ID specified herein.
            """
            return self._secondary_button_id
        
        @SecondaryButtonId.setter
        def SecondaryButtonId(self, value: str) -> None:
            self._secondary_button_id = value

        @property
        def SecondaryButtonImage(self) -> 'XGraphic_a4da0afc':
            """
            describes a graphics to display at the secondary button, if any.
            
            The property will be ignored if HasSecondaryButton is FALSE, or if SecondaryButtonImageURL is a non-empty string.
            """
            return self._secondary_button_image
        
        @SecondaryButtonImage.setter
        def SecondaryButtonImage(self, value: 'XGraphic_a4da0afc') -> None:
            self._secondary_button_image = value

        @property
        def SecondaryButtonImageURL(self) -> str:
            """
            describes the URL of an image to display on the secondary button, if any.
            
            This URL will be used to obtain an actual com.sun.star.graphic.XGraphic object from a com.sun.star.graphic.GraphicProvider.
            
            The property will be ignored if HasSecondaryButton is FALSE.
            
            If you need to specify a graphic which does not have a URL, but is available as com.sun.star.graphic.XGraphic only, then you must leave SecondaryButtonImageURL empty, and use the SecondaryButtonImage property.
            """
            return self._secondary_button_image_url
        
        @SecondaryButtonImageURL.setter
        def SecondaryButtonImageURL(self, value: str) -> None:
            self._secondary_button_image_url = value

if not typing.TYPE_CHECKING and _DYNAMIC:
    def _dynamic_struct() -> None:
        # Dynamically create uno struct using uno
        global LineDescriptor
        order = ('Category', 'Control', 'DisplayName', 'HasPrimaryButton', 'HasSecondaryButton', 'HelpURL', 'IndentLevel', 'PrimaryButtonId', 'PrimaryButtonImage', 'PrimaryButtonImageURL', 'SecondaryButtonId', 'SecondaryButtonImage', 'SecondaryButtonImageURL')

        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('com.sun.star.inspection.LineDescriptor')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        LineDescriptor = _struct_init

    _dynamic_struct()

__all__ = ['LineDescriptor']
