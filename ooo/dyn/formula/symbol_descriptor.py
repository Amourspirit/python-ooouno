# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.formula
# Libre Office Version: 7.2
from typing import TYPE_CHECKING
from ooo.oenv import UNO_ENVIRONMENT, UNO_RUNTIME, UNO_NONE
if (not TYPE_CHECKING) and UNO_RUNTIME and UNO_ENVIRONMENT:
    import uno
 
    def _get_class():
        orig_init = None
        def init(self, sName = UNO_NONE, sExportName = UNO_NONE, sSymbolSet = UNO_NONE, nCharacter = UNO_NONE, sFontName = UNO_NONE, nCharSet = UNO_NONE, nFamily = UNO_NONE, nPitch = UNO_NONE, nWeight = UNO_NONE, nItalic = UNO_NONE):
            if getattr(sName, "__class__", None) == self.__class__:
                orig_init(self, sName)
                return
            else:
                orig_init(self)
            if not sName is UNO_NONE:
                if getattr(self, 'sName') != sName:
                    setattr(self, 'sName', sName)
            if not sExportName is UNO_NONE:
                if getattr(self, 'sExportName') != sExportName:
                    setattr(self, 'sExportName', sExportName)
            if not sSymbolSet is UNO_NONE:
                if getattr(self, 'sSymbolSet') != sSymbolSet:
                    setattr(self, 'sSymbolSet', sSymbolSet)
            if not nCharacter is UNO_NONE:
                if getattr(self, 'nCharacter') != nCharacter:
                    setattr(self, 'nCharacter', nCharacter)
            if not sFontName is UNO_NONE:
                if getattr(self, 'sFontName') != sFontName:
                    setattr(self, 'sFontName', sFontName)
            if not nCharSet is UNO_NONE:
                if getattr(self, 'nCharSet') != nCharSet:
                    setattr(self, 'nCharSet', nCharSet)
            if not nFamily is UNO_NONE:
                if getattr(self, 'nFamily') != nFamily:
                    setattr(self, 'nFamily', nFamily)
            if not nPitch is UNO_NONE:
                if getattr(self, 'nPitch') != nPitch:
                    setattr(self, 'nPitch', nPitch)
            if not nWeight is UNO_NONE:
                if getattr(self, 'nWeight') != nWeight:
                    setattr(self, 'nWeight', nWeight)
            if not nItalic is UNO_NONE:
                if getattr(self, 'nItalic') != nItalic:
                    setattr(self, 'nItalic', nItalic)

        type_name = 'com.sun.star.formula.SymbolDescriptor'
        struct = uno.getClass(type_name)
        struct.__ooo_ns__ = 'com.sun.star.formula'
        struct.__ooo_full_ns__= type_name
        struct.__ooo_type_name__ = 'struct'
        orig_init = struct.__init__
        struct.__init__ = init
        return struct

    SymbolDescriptor = _get_class()


else:
    from ...lo.formula.symbol_descriptor import SymbolDescriptor as SymbolDescriptor

__all__ = ['SymbolDescriptor']

