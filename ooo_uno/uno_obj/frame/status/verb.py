# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.frame.status
# Libre Office Version: 7.2
import typing
from ooo_uno.oenv import UNO_ENVIRONMENT, UNO_RUNTIME
_DYNAMIC = False
if (not typing.TYPE_CHECKING) and UNO_RUNTIME and UNO_ENVIRONMENT:
    _DYNAMIC = True
    from ooo_uno.helper import uno_helper

if typing.TYPE_CHECKING or _DYNAMIC is False:


    class Verb(object):
        """
        Struct Class

        describes a command that can be send to an OLE object
        
        For example, this can be used to select a font.
        
        **since**
        
            OOo 2.0

        See Also:
            `API Verb <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1frame_1_1status_1_1Verb.html>`_


        Note:
            | At runtime Verb will be an actual uno struct however can seamlessly be treated as a regualr class.
            | At design time a class is presumed. This allows for better typings.
            | Verb is a callable and can be treatead as a class and create instances.
        """

        def __init__(self, VerbId: typing.Optional[int] = None, VerbIsConst: typing.Optional[bool] = None, VerbIsOnMenu: typing.Optional[bool] = None, VerbName: typing.Optional[str] = None):
            self._verb_id = VerbId
            self._verb_is_const = VerbIsConst
            self._verb_is_on_menu = VerbIsOnMenu
            self._verb_name = VerbName

        @property
        def VerbId(self) -> int:
            """
            specifies the Id of the command.
            """
            return self._verb_id
        
        @VerbId.setter
        def VerbId(self, value: int) -> None:
            self._verb_id = value

        @property
        def VerbIsConst(self) -> bool:
            """
            specifies if the command is available for a constant object.
            """
            return self._verb_is_const
        
        @VerbIsConst.setter
        def VerbIsConst(self, value: bool) -> None:
            self._verb_is_const = value

        @property
        def VerbIsOnMenu(self) -> bool:
            """
            specifies if the command should be visible in a menu.
            """
            return self._verb_is_on_menu
        
        @VerbIsOnMenu.setter
        def VerbIsOnMenu(self, value: bool) -> None:
            self._verb_is_on_menu = value

        @property
        def VerbName(self) -> str:
            """
            specifies the name of the command.
            
            The name is localized.
            """
            return self._verb_name
        
        @VerbName.setter
        def VerbName(self, value: str) -> None:
            self._verb_name = value

if not typing.TYPE_CHECKING and _DYNAMIC:
    def _dynamic_struct() -> None:
        # Dynamically create uno struct using uno
        global Verb
        order = ('VerbId', 'VerbIsConst', 'VerbIsOnMenu', 'VerbName')

        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('com.sun.star.frame.status.Verb')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        Verb = _struct_init

    _dynamic_struct()

__all__ = ['Verb']
