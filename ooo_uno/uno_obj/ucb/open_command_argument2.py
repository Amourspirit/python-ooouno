# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.ucb
# Libre Office Version: 7.2
import os
from .open_command_argument import OpenCommandArgument as OpenCommandArgument_fb0a0dd6
import typing
if typing.TYPE_CHECKING:
    from .numbered_sorting_info import NumberedSortingInfo as NumberedSortingInfo_fd0e0de6
from ooo_uno.oenv import UNO_ENVIRONMENT
if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
    from ooo_uno.helper import uno_helper


class OpenCommandArgument2(OpenCommandArgument_fb0a0dd6):
    """
    Struct Class

    The argument for commands like \"open\", \"update\", and \"synchronize\".
    
    This struct extends the original OpenCommandArgument, which must not be changed for compatibility reasons.

    See Also:
        `API OpenCommandArgument2 <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1ucb_1_1OpenCommandArgument2.html>`_


    Note:
        | At runtime OpenCommandArgument2 will be an actual uno struct however can seamlessly be treated as a regualr class.
        | At design time a class is presumed. This allows for better typings.
        | OpenCommandArgument2 is a callable and can be treatead as a class and create instances.
    """

    def __init__(self, SortingInfo: 'typing.Optional[typing.List[NumberedSortingInfo_fd0e0de6]]' = None):
        self._sorting_info = SortingInfo

    @property
    def SortingInfo(self) -> 'typing.List[NumberedSortingInfo_fd0e0de6]':
        """
        The sort criteria for the rows of the returned ContentResultSet.
        
        The result set implementation may ignore this parameter, if it cannot sort the data by the given criteria in an efficient way (i.e. directly using the underlying data source -> SQL-database -> ORDER BY).
        """
        return self._sorting_info
    
    @SortingInfo.setter
    def SortingInfo(self, value: 'typing.List[NumberedSortingInfo_fd0e0de6]') -> None:
        self._sorting_info = value

def _dynamic_struct() -> None:
    # Dynamically create uno struct using uno
    global OpenCommandArgument2
    ignore = os.environ.get('ooouno_ignore_runtime', 'False')
    if ignore == 'True':
        return
    if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
        order = ('SortingInfo',)
        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('com.sun.star.ucb.OpenCommandArgument2')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        OpenCommandArgument2 = _struct_init

if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
    _dynamic_struct()

__all__ = ['OpenCommandArgument2']
