# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.i18n
# Libre Office Version: 7.2
import typing
from ooo_uno.oenv import UNO_ENVIRONMENT, UNO_RUNTIME
_DYNAMIC = False
if (not typing.TYPE_CHECKING) and UNO_RUNTIME and UNO_ENVIRONMENT:
    _DYNAMIC = True
    from ooo_uno.helper import uno_helper

if typing.TYPE_CHECKING or _DYNAMIC is False:


    class LocaleDataItem(object):
        """
        Struct Class

        Locale specific data, for example, separators, quotation marks.

        See Also:
            `API LocaleDataItem <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1i18n_1_1LocaleDataItem.html>`_


        Note:
            | At runtime LocaleDataItem will be an actual uno struct however can seamlessly be treated as a regualr class.
            | At design time a class is presumed. This allows for better typings.
            | LocaleDataItem is a callable and can be treatead as a class and create instances.
        """

        def __init__(self, LongDateDayOfWeekSeparator: typing.Optional[str] = None, LongDateDaySeparator: typing.Optional[str] = None, LongDateMonthSeparator: typing.Optional[str] = None, LongDateYearSeparator: typing.Optional[str] = None, dateSeparator: typing.Optional[str] = None, decimalSeparator: typing.Optional[str] = None, doubleQuotationEnd: typing.Optional[str] = None, doubleQuotationStart: typing.Optional[str] = None, listSeparator: typing.Optional[str] = None, measurementSystem: typing.Optional[str] = None, quotationEnd: typing.Optional[str] = None, quotationStart: typing.Optional[str] = None, thousandSeparator: typing.Optional[str] = None, time100SecSeparator: typing.Optional[str] = None, timeAM: typing.Optional[str] = None, timePM: typing.Optional[str] = None, timeSeparator: typing.Optional[str] = None, unoID: typing.Optional[str] = None):
            self._long_date_day_of_week_separator = LongDateDayOfWeekSeparator
            self._long_date_day_separator = LongDateDaySeparator
            self._long_date_month_separator = LongDateMonthSeparator
            self._long_date_year_separator = LongDateYearSeparator
            self._date_separator = dateSeparator
            self._decimal_separator = decimalSeparator
            self._double_quotation_end = doubleQuotationEnd
            self._double_quotation_start = doubleQuotationStart
            self._list_separator = listSeparator
            self._measurement_system = measurementSystem
            self._quotation_end = quotationEnd
            self._quotation_start = quotationStart
            self._thousand_separator = thousandSeparator
            self._time100_sec_separator = time100SecSeparator
            self._time_am = timeAM
            self._time_pm = timePM
            self._time_separator = timeSeparator
            self._uno_id = unoID

        @property
        def LongDateDayOfWeekSeparator(self) -> str:
            """
            long date day of week separator, for example, \", \"
            """
            return self._long_date_day_of_week_separator
        
        @LongDateDayOfWeekSeparator.setter
        def LongDateDayOfWeekSeparator(self, value: str) -> None:
            self._long_date_day_of_week_separator = value

        @property
        def LongDateDaySeparator(self) -> str:
            """
            long date day separator, for example, \", \"
            """
            return self._long_date_day_separator
        
        @LongDateDaySeparator.setter
        def LongDateDaySeparator(self, value: str) -> None:
            self._long_date_day_separator = value

        @property
        def LongDateMonthSeparator(self) -> str:
            """
            long date month separator, for example, \" \"
            """
            return self._long_date_month_separator
        
        @LongDateMonthSeparator.setter
        def LongDateMonthSeparator(self, value: str) -> None:
            self._long_date_month_separator = value

        @property
        def LongDateYearSeparator(self) -> str:
            """
            long date year separator, for example, \" \"
            """
            return self._long_date_year_separator
        
        @LongDateYearSeparator.setter
        def LongDateYearSeparator(self, value: str) -> None:
            self._long_date_year_separator = value

        @property
        def dateSeparator(self) -> str:
            """
            date separator, for example, \"/\" or \".\" or \"-\"
            """
            return self._date_separator
        
        @dateSeparator.setter
        def dateSeparator(self, value: str) -> None:
            self._date_separator = value

        @property
        def decimalSeparator(self) -> str:
            """
            decimal separator, for example, \".\" or \",\"
            """
            return self._decimal_separator
        
        @decimalSeparator.setter
        def decimalSeparator(self, value: str) -> None:
            self._decimal_separator = value

        @property
        def doubleQuotationEnd(self) -> str:
            """
            double quotation mark end
            """
            return self._double_quotation_end
        
        @doubleQuotationEnd.setter
        def doubleQuotationEnd(self, value: str) -> None:
            self._double_quotation_end = value

        @property
        def doubleQuotationStart(self) -> str:
            """
            double quotation mark start
            """
            return self._double_quotation_start
        
        @doubleQuotationStart.setter
        def doubleQuotationStart(self, value: str) -> None:
            self._double_quotation_start = value

        @property
        def listSeparator(self) -> str:
            """
            list separator, for example, \";\"
            """
            return self._list_separator
        
        @listSeparator.setter
        def listSeparator(self, value: str) -> None:
            self._list_separator = value

        @property
        def measurementSystem(self) -> str:
            """
            measurement system, \"metric\" or \"us\"
            """
            return self._measurement_system
        
        @measurementSystem.setter
        def measurementSystem(self, value: str) -> None:
            self._measurement_system = value

        @property
        def quotationEnd(self) -> str:
            """
            single quotation mark end
            """
            return self._quotation_end
        
        @quotationEnd.setter
        def quotationEnd(self, value: str) -> None:
            self._quotation_end = value

        @property
        def quotationStart(self) -> str:
            """
            single quotation mark start
            """
            return self._quotation_start
        
        @quotationStart.setter
        def quotationStart(self, value: str) -> None:
            self._quotation_start = value

        @property
        def thousandSeparator(self) -> str:
            """
            group and thousand separator, for example, \",\" or \".\"
            """
            return self._thousand_separator
        
        @thousandSeparator.setter
        def thousandSeparator(self, value: str) -> None:
            self._thousand_separator = value

        @property
        def time100SecSeparator(self) -> str:
            """
            time 100th seconds separator, for example, \",\"
            """
            return self._time100_sec_separator
        
        @time100SecSeparator.setter
        def time100SecSeparator(self, value: str) -> None:
            self._time100_sec_separator = value

        @property
        def timeAM(self) -> str:
            """
            time AM symbol, for example, \"AM\" or \"am\"
            """
            return self._time_am
        
        @timeAM.setter
        def timeAM(self, value: str) -> None:
            self._time_am = value

        @property
        def timePM(self) -> str:
            """
            time PM symbol, for example, \"PM\" or \"pm\"
            """
            return self._time_pm
        
        @timePM.setter
        def timePM(self, value: str) -> None:
            self._time_pm = value

        @property
        def timeSeparator(self) -> str:
            """
            time separator, for example, \":\"
            """
            return self._time_separator
        
        @timeSeparator.setter
        def timeSeparator(self, value: str) -> None:
            self._time_separator = value

        @property
        def unoID(self) -> str:
            """
            internal ID string, not unique, not meaningful to the outer world
            """
            return self._uno_id
        
        @unoID.setter
        def unoID(self, value: str) -> None:
            self._uno_id = value

if not typing.TYPE_CHECKING and _DYNAMIC:
    def _dynamic_struct() -> None:
        # Dynamically create uno struct using uno
        global LocaleDataItem
        order = ('LongDateDayOfWeekSeparator', 'LongDateDaySeparator', 'LongDateMonthSeparator', 'LongDateYearSeparator', 'dateSeparator', 'decimalSeparator', 'doubleQuotationEnd', 'doubleQuotationStart', 'listSeparator', 'measurementSystem', 'quotationEnd', 'quotationStart', 'thousandSeparator', 'time100SecSeparator', 'timeAM', 'timePM', 'timeSeparator', 'unoID')

        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('com.sun.star.i18n.LocaleDataItem')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        LocaleDataItem = _struct_init

    _dynamic_struct()

__all__ = ['LocaleDataItem']
