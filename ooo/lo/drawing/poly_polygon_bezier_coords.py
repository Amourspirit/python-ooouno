# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.drawing
# Libre Office Version: 7.2
import typing
if typing.TYPE_CHECKING:
    from .flag_sequence_sequence import FlagSequenceSequence as FlagSequenceSequence_49130fe0
    from .point_sequence_sequence import PointSequenceSequence as PointSequenceSequence_5c591070


class PolyPolygonBezierCoords(object):
    """
    Struct Class

    specifies the coordinates for a poly polygon Bezier.

    See Also:
        `API PolyPolygonBezierCoords <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1drawing_1_1PolyPolygonBezierCoords.html>`_
    """
    __ooo_ns__: str = 'com.sun.star.drawing'
    __ooo_full_ns__: str = 'com.sun.star.drawing.PolyPolygonBezierCoords'
    __ooo_type_name__: str = 'struct'
    typeName: str = 'com.sun.star.drawing.PolyPolygonBezierCoords'
    """Literal Constant ``com.sun.star.drawing.PolyPolygonBezierCoords``"""

    def __init__(self, *args, **kwargs):
        """
        Constructor

        Other Arguments:
            First positinal arg can be another ``PolyPolygonBezierCoords`` instance,
                if it is the only argument passed to contructor;
                Otherwise, postitional arguments are treated as ``PolyPolygonBezierCoords``
                values. Following the order of ``Keyword Arguments``.

        Keyword Arguments:
            Coordinates (PointSequenceSequence, optional): Coordinates value
            Flags (FlagSequenceSequence, optional): Flags value
        """
        self._coordinates = None
        self._flags = None

        key_order = ('Coordinates', 'Flags')
        arg_len = len(args)
        if arg_len == 1:
            if isinstance(args[0], PolyPolygonBezierCoords):
                oth = args[0]
                for key in key_order:
                    setattr(self, key, getattr(oth, key))
                return

        if  arg_len > len(key_order):
            raise ValueError("PolyPolygonBezierCoords.__init__() To many parameters")
        for i, arg in enumerate(args):
            setattr(self, key_order[i], arg)
        for k, v in kwargs.items():
            if k in key_order:
                setattr(self, k, v)


    @property
    def Coordinates(self) -> 'PointSequenceSequence_5c591070':
        return self._coordinates
    
    @Coordinates.setter
    def Coordinates(self, value: 'PointSequenceSequence_5c591070') -> None:
        self._coordinates = value

    @property
    def Flags(self) -> 'FlagSequenceSequence_49130fe0':
        return self._flags
    
    @Flags.setter
    def Flags(self, value: 'FlagSequenceSequence_49130fe0') -> None:
        self._flags = value


__all__ = ['PolyPolygonBezierCoords']
