# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.formula
# Libre Office Version: 7.2
import os
import typing
from ooo_uno.oenv import UNO_ENVIRONMENT
if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
    from ooo_uno.helper import uno_helper


class SymbolDescriptor(object):
    """
    Struct Class

    
    .. deprecated::
    
        Class is deprecated.

    See Also:
        `API SymbolDescriptor <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1formula_1_1SymbolDescriptor.html>`_


    Note:
        | At runtime SymbolDescriptor will be an actual uno struct however can seamlessly be treated as a regualr class.
        | At design time a class is presumed. This allows for better typings.
        | SymbolDescriptor is a callable and can be treatead as a class and create instances.
    """

    def __init__(self, nCharSet: typing.Optional[int] = None, nCharacter: typing.Optional[int] = None, nFamily: typing.Optional[int] = None, nItalic: typing.Optional[int] = None, nPitch: typing.Optional[int] = None, nWeight: typing.Optional[int] = None, sExportName: typing.Optional[str] = None, sFontName: typing.Optional[str] = None, sName: typing.Optional[str] = None, sSymbolSet: typing.Optional[str] = None):
        self._n_char_set = nCharSet
        self._n_character = nCharacter
        self._n_family = nFamily
        self._n_italic = nItalic
        self._n_pitch = nPitch
        self._n_weight = nWeight
        self._s_export_name = sExportName
        self._s_font_name = sFontName
        self._s_name = sName
        self._s_symbol_set = sSymbolSet

    @property
    def nCharSet(self) -> int:
        """
        Specifies the character set which is supported by the font.
        """
        return self._n_char_set
    
    @nCharSet.setter
    def nCharSet(self, value: int) -> None:
        self._n_char_set = value

    @property
    def nCharacter(self) -> int:
        """
        Specifies the Unicode character of the symbol.
        """
        return self._n_character
    
    @nCharacter.setter
    def nCharacter(self, value: int) -> None:
        self._n_character = value

    @property
    def nFamily(self) -> int:
        """
        Specifies the general style of the font.
        """
        return self._n_family
    
    @nFamily.setter
    def nFamily(self, value: int) -> None:
        self._n_family = value

    @property
    def nItalic(self) -> int:
        """
        Specifies if the font is italic.
        
        The values com.sun.star.awt.FontSlant.REVERSE_OBLIQUE and com.sun.star.awt.FontSlant.REVERSE_ITALIC may not be used.
        """
        return self._n_italic
    
    @nItalic.setter
    def nItalic(self, value: int) -> None:
        self._n_italic = value

    @property
    def nPitch(self) -> int:
        """
        Specifies the pitch of the font.
        """
        return self._n_pitch
    
    @nPitch.setter
    def nPitch(self, value: int) -> None:
        self._n_pitch = value

    @property
    def nWeight(self) -> int:
        """
        Specifies the thickness of the line.
        
        The allowed integer values correspond as follows: 0 : com.sun.star.awt.FontWeight.DONTKNOW 1 : com.sun.star.awt.FontWeight.THIN 2 : com.sun.star.awt.FontWeight.ULTRALIGHT 3 : com.sun.star.awt.FontWeight.LIGHT 4 : com.sun.star.awt.FontWeight.SEMILIGHT 5 : com.sun.star.awt.FontWeight.NORMAL 7 : com.sun.star.awt.FontWeight.SEMIBOLD 8 : com.sun.star.awt.FontWeight.BOLD 9 : com.sun.star.awt.FontWeight.ULTRABOLD 10 : com.sun.star.awt.FontWeight.BLACK
        """
        return self._n_weight
    
    @nWeight.setter
    def nWeight(self, value: int) -> None:
        self._n_weight = value

    @property
    def sExportName(self) -> str:
        """
        The export name of the symbol.
        """
        return self._s_export_name
    
    @sExportName.setter
    def sExportName(self, value: str) -> None:
        self._s_export_name = value

    @property
    def sFontName(self) -> str:
        """
        Specifies the exact name of the font (\"Arial\", \"Courier\", etc.).
        """
        return self._s_font_name
    
    @sFontName.setter
    def sFontName(self, value: str) -> None:
        self._s_font_name = value

    @property
    def sName(self) -> str:
        """
        The name of the symbol.
        """
        return self._s_name
    
    @sName.setter
    def sName(self, value: str) -> None:
        self._s_name = value

    @property
    def sSymbolSet(self) -> str:
        """
        Specifies the name of the symbol set to which this symbol belongs.
        """
        return self._s_symbol_set
    
    @sSymbolSet.setter
    def sSymbolSet(self, value: str) -> None:
        self._s_symbol_set = value

def _dynamic_struct() -> None:
    # Dynamically create uno struct using uno
    global SymbolDescriptor
    ignore = os.environ.get('ooouno_ignore_runtime', 'False')
    if ignore == 'True':
        return
    if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
        order = ('nCharSet', 'nCharacter', 'nFamily', 'nItalic', 'nPitch', 'nWeight', 'sExportName', 'sFontName', 'sName', 'sSymbolSet')
        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('com.sun.star.formula.SymbolDescriptor')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        SymbolDescriptor = _struct_init

if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
    _dynamic_struct()

__all__ = ['SymbolDescriptor']
