# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.datatransfer.dnd
# Libre Office Version: 7.2
import os
from ...lang.event_object import EventObject as EventObject_a3d70b03
import typing
if typing.TYPE_CHECKING:
    from .x_drag_source import XDragSource as XDragSource_49900fb2
from ooo_uno.oenv import UNO_ENVIRONMENT
if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
    from ooo_uno.helper import uno_helper


class DragGestureEvent(EventObject_a3d70b03):
    """
    Struct Class

    A DragGestureEvent is passed to the method XDragGestureListener.dragGestureRecognized() when a particular XDragGestureRecognizer detects that a platform dependent drag initiating gesture has occurred on the component that it is tracking.

    See Also:
        `API DragGestureEvent <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1datatransfer_1_1dnd_1_1DragGestureEvent.html>`_


    Note:
        | At runtime DragGestureEvent will be an actual uno struct however can seamlessly be treated as a regualr class.
        | At design time a class is presumed. This allows for better typings.
        | DragGestureEvent is a callable and can be treatead as a class and create instances.
    """

    def __init__(self, DragAction: typing.Optional[int] = None, DragOriginX: typing.Optional[int] = None, DragOriginY: typing.Optional[int] = None, DragSource: 'typing.Optional[XDragSource_49900fb2]' = None, Event: typing.Optional[object] = None):
        self._drag_action = DragAction
        self._drag_origin_x = DragOriginX
        self._drag_origin_y = DragOriginY
        self._drag_source = DragSource
        self._event = Event

    @property
    def DragAction(self) -> int:
        """
        The action selected by the user.
        
        Different constants may be combined using a logical OR.
        
        It's further possible to combine the ACTION_DEFAULT with one of the other actions defined in com.sun.star.datatransfer.dnd.DNDConstants. This means the user did not press any key during the Drag and Drop operation and the action that was combined with ACTION_DEFAULT is the system default action.
        """
        return self._drag_action
    
    @DragAction.setter
    def DragAction(self, value: int) -> None:
        self._drag_action = value

    @property
    def DragOriginX(self) -> int:
        """
        The x coordinate where the drag originated in component coordinates.
        """
        return self._drag_origin_x
    
    @DragOriginX.setter
    def DragOriginX(self, value: int) -> None:
        self._drag_origin_x = value

    @property
    def DragOriginY(self) -> int:
        """
        The y coordinate where the drag originated in component coordinates.
        """
        return self._drag_origin_y
    
    @DragOriginY.setter
    def DragOriginY(self, value: int) -> None:
        self._drag_origin_y = value

    @property
    def DragSource(self) -> 'XDragSource_49900fb2':
        """
        The DragSource associated with this drag action.
        """
        return self._drag_source
    
    @DragSource.setter
    def DragSource(self, value: 'XDragSource_49900fb2') -> None:
        self._drag_source = value

    @property
    def Event(self) -> object:
        """
        The last event comprising the gesture.
        
        The initial trigger event will presumably be a com.sun.star.awt.MouseEvent event. If it is not, the implementation should either react accordingly or presume that the left mouse button was clicked.
        """
        return self._event
    
    @Event.setter
    def Event(self, value: object) -> None:
        self._event = value

def _dynamic_struct() -> None:
    # Dynamically create uno struct using uno
    global DragGestureEvent
    ignore = os.environ.get('ooouno_ignore_runtime', 'False')
    if ignore == 'True':
        return
    if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
        order = ('DragAction', 'DragOriginX', 'DragOriginY', 'DragSource', 'Event')
        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('com.sun.star.datatransfer.dnd.DragGestureEvent')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        DragGestureEvent = _struct_init

if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
    _dynamic_struct()

__all__ = ['DragGestureEvent']
