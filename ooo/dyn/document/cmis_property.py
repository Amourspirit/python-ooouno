# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.document
# Libre Office Version: 7.2
from typing import TYPE_CHECKING
from ooo.oenv import UNO_ENVIRONMENT, UNO_RUNTIME, UNO_NONE
_DYNAMIC = False
if (not TYPE_CHECKING) and UNO_RUNTIME and UNO_ENVIRONMENT:
    _DYNAMIC = True

if not TYPE_CHECKING and _DYNAMIC:
    def _dynamic_struct():
        import uno
        from com.sun.star.document import CmisProperty as UCmisProperty
        # Dynamically create uno com.sun.star.document.CmisProperty using uno
        global CmisProperty

        def _set_attr(struct):
            struct.__dict__['__ooo_ns__'] = 'com.sun.star.document'
            struct.__dict__['__ooo_full_ns__'] = 'com.sun.star.document.CmisProperty'
            struct.__dict__['__ooo_type_name__'] = 'struct'

        def _struct_init(Id = UNO_NONE, Name = UNO_NONE, Type = UNO_NONE, Updatable = UNO_NONE, Required = UNO_NONE, MultiValued = UNO_NONE, OpenChoice = UNO_NONE, Choices = UNO_NONE, Value = UNO_NONE):
            ns = 'com.sun.star.document.CmisProperty'
            if isinstance(Id, UCmisProperty):
                inst = uno.createUnoStruct(ns, Id)
                _set_attr(inst)
                return inst
            struct = uno.createUnoStruct(ns)

            if not Id is UNO_NONE:
                if getattr(struct, 'Id') != Id:
                    setattr(struct, 'Id', Id)
            if not Name is UNO_NONE:
                if getattr(struct, 'Name') != Name:
                    setattr(struct, 'Name', Name)
            if not Type is UNO_NONE:
                if getattr(struct, 'Type') != Type:
                    setattr(struct, 'Type', Type)
            if not Updatable is UNO_NONE:
                if getattr(struct, 'Updatable') != Updatable:
                    setattr(struct, 'Updatable', Updatable)
            if not Required is UNO_NONE:
                if getattr(struct, 'Required') != Required:
                    setattr(struct, 'Required', Required)
            if not MultiValued is UNO_NONE:
                if getattr(struct, 'MultiValued') != MultiValued:
                    setattr(struct, 'MultiValued', MultiValued)
            if not OpenChoice is UNO_NONE:
                if getattr(struct, 'OpenChoice') != OpenChoice:
                    setattr(struct, 'OpenChoice', OpenChoice)
            if not Choices is UNO_NONE:
                if getattr(struct, 'Choices') != Choices:
                    setattr(struct, 'Choices', Choices)
            if not Value is UNO_NONE:
                if getattr(struct, 'Value') != Value:
                    setattr(struct, 'Value', Value)
            _set_attr(struct)
            return struct
        CmisProperty = _struct_init

    _dynamic_struct()
else:
    from ...lo.document.cmis_property import CmisProperty as CmisProperty

__all__ = ['CmisProperty']

