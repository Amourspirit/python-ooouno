# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.rendering
# Libre Office Version: 7.2
import typing
if typing.TYPE_CHECKING:
    from ..geometry.real_size2_d import RealSize2D as RealSize2D_ca1a0c09
from ooo_uno.oenv import UNO_ENVIRONMENT, UNO_RUNTIME
_DYNAMIC = False
if (not typing.TYPE_CHECKING) and UNO_RUNTIME and UNO_ENVIRONMENT:
    _DYNAMIC = True
    from ooo_uno.helper import uno_helper

if typing.TYPE_CHECKING or _DYNAMIC is False:


    class AnimationAttributes(object):
        """
        Struct Class

        This structure contains attributes needed to run an animation.
        
        **since**
        
            OOo 2.0

        See Also:
            `API AnimationAttributes <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1rendering_1_1AnimationAttributes.html>`_


        Note:
            | At runtime AnimationAttributes will be an actual uno struct however can seamlessly be treated as a regualr class.
            | At design time a class is presumed. This allows for better typings.
            | AnimationAttributes is a callable and can be treatead as a class and create instances.
        """

        def __init__(self, Duration: typing.Optional[float] = None, RepeatMode: typing.Optional[int] = None, UntransformedSize: 'typing.Optional[RealSize2D_ca1a0c09]' = None):
            self._duration = Duration
            self._repeat_mode = RepeatMode
            self._untransformed_size = UntransformedSize

        @property
        def Duration(self) -> float:
            """
            Preferred duration of the animation sequence in seconds.
            """
            return self._duration
        
        @Duration.setter
        def Duration(self, value: float) -> None:
            self._duration = value

        @property
        def RepeatMode(self) -> int:
            """
            Repeat mode of the animation sequence.
            
            This value determines how the [0,1] parameter space of the animation should be swept through. Permissible values are given in AnimationRepeat.
            """
            return self._repeat_mode
        
        @RepeatMode.setter
        def RepeatMode(self, value: int) -> None:
            self._repeat_mode = value

        @property
        def UntransformedSize(self) -> 'RealSize2D_ca1a0c09':
            """
            Size of the untransformed animation sequence.
            
            This value specifies the size of the animation when rendered with the identity view transform. This permits e.g. XSprite implementations to cache rendered animation content in finite-sized bitmaps.
            """
            return self._untransformed_size
        
        @UntransformedSize.setter
        def UntransformedSize(self, value: 'RealSize2D_ca1a0c09') -> None:
            self._untransformed_size = value

if not typing.TYPE_CHECKING and _DYNAMIC:
    def _dynamic_struct() -> None:
        # Dynamically create uno struct using uno
        global AnimationAttributes
        order = ('Duration', 'RepeatMode', 'UntransformedSize')

        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('com.sun.star.rendering.AnimationAttributes')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        AnimationAttributes = _struct_init

    _dynamic_struct()

__all__ = ['AnimationAttributes']
