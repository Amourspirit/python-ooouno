# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.ucb
# Libre Office Version: 7.2
import os
import typing
from ooo_uno.oenv import UNO_ENVIRONMENT
if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
    from ooo_uno.helper import uno_helper


class RuleTerm(object):
    """
    Struct Class

    describes a term.
    
    A term is used to select objects to which a rule should apply.

    See Also:
        `API RuleTerm <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1ucb_1_1RuleTerm.html>`_


    Note:
        | At runtime RuleTerm will be an actual uno struct however can seamlessly be treated as a regualr class.
        | At design time a class is presumed. This allows for better typings.
        | RuleTerm is a callable and can be treatead as a class and create instances.
    """

    def __init__(self, CaseSensitive: typing.Optional[bool] = None, Operand: typing.Optional[object] = None, Operator: typing.Optional[int] = None, Property: typing.Optional[str] = None, RegularExpression: typing.Optional[bool] = None):
        self._case_sensitive = CaseSensitive
        self._operand = Operand
        self._operator = Operator
        self._property = Property
        self._regular_expression = RegularExpression

    @property
    def CaseSensitive(self) -> bool:
        """
        this flag indicates whether a string \"operand\" shall be compared case sensitive.
        """
        return self._case_sensitive
    
    @CaseSensitive.setter
    def CaseSensitive(self, value: bool) -> None:
        self._case_sensitive = value

    @property
    def Operand(self) -> object:
        """
        the value of the property used to compare with the document property.
        """
        return self._operand
    
    @Operand.setter
    def Operand(self, value: object) -> None:
        self._operand = value

    @property
    def Operator(self) -> int:
        """
        the operator used to compare the property of the document with the given value (e.g.
        
        \"contains\" or \"greater equal\").
        
        The value can be one of the RuleOperator constants.
        """
        return self._operator
    
    @Operator.setter
    def Operator(self, value: int) -> None:
        self._operator = value

    @property
    def Property(self) -> str:
        """
        the name of the property used to match the term.
        """
        return self._property
    
    @Property.setter
    def Property(self, value: str) -> None:
        self._property = value

    @property
    def RegularExpression(self) -> bool:
        """
        this flag indicates whether a string \"operand\" shall be treated as a regular expression.
        """
        return self._regular_expression
    
    @RegularExpression.setter
    def RegularExpression(self, value: bool) -> None:
        self._regular_expression = value

def _dynamic_struct() -> None:
    # Dynamically create uno struct using uno
    global RuleTerm
    ignore = os.environ.get('ooouno_ignore_runtime', 'False')
    if ignore == 'True':
        return
    if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
        order = ('CaseSensitive', 'Operand', 'Operator', 'Property', 'RegularExpression')
        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('com.sun.star.ucb.RuleTerm')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        RuleTerm = _struct_init

if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
    _dynamic_struct()

__all__ = ['RuleTerm']
