# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Interface Class
# this is a auto generated file generated by Cheetah
# Libre Office Version: 7.3
# Namespace: com.sun.star.frame
from abc import abstractmethod
from .x_dispatch_provider import XDispatchProvider as XDispatchProvider_fc690de6

class XDispatchProviderInterceptor(XDispatchProvider_fc690de6):
    """
    makes it possible to intercept request of XDispatch.
    
    Can be registered as an interceptor by using interface XDispatchProviderInterception.

    See Also:
        `API XDispatchProviderInterceptor <https://api.libreoffice.org/docs/idl/ref/interfacecom_1_1sun_1_1star_1_1frame_1_1XDispatchProviderInterceptor.html>`_
    """
    __ooo_ns__: str = 'com.sun.star.frame'
    __ooo_full_ns__: str = 'com.sun.star.frame.XDispatchProviderInterceptor'
    __ooo_type_name__: str = 'interface'
    __pyunointerface__: str = 'com.sun.star.frame.XDispatchProviderInterceptor'

    @abstractmethod
    def getMasterDispatchProvider(self) -> 'XDispatchProvider_fc690de6':
        """
        access to the master XDispatchProvider of this interceptor
        """
        ...
    @abstractmethod
    def getSlaveDispatchProvider(self) -> 'XDispatchProvider_fc690de6':
        """
        access to the slave XDispatchProvider of this interceptor
        """
        ...
    @abstractmethod
    def setMasterDispatchProvider(self, NewSupplier: 'XDispatchProvider_fc690de6') -> None:
        """
        sets the master XDispatchProvider, which may forward calls to its XDispatchProvider.queryDispatch() to this dispatch provider.
        """
        ...
    @abstractmethod
    def setSlaveDispatchProvider(self, NewDispatchProvider: 'XDispatchProvider_fc690de6') -> None:
        """
        sets the slave XDispatchProvider to which calls to XDispatchProvider.queryDispatch() can be forwarded under control of this dispatch provider.
        """
        ...

__all__ = ['XDispatchProviderInterceptor']

