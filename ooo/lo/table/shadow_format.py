# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.table
# Libre Office Version: 7.2
import typing
if typing.TYPE_CHECKING:
    from .shadow_location import ShadowLocation as ShadowLocation_d4530caf
    from ..util.color import Color as Color_68e908c5


class ShadowFormat(object):
    """
    Struct Class

    describes the settings of a cell shadow.

    See Also:
        `API ShadowFormat <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1table_1_1ShadowFormat.html>`_
    """
    __ooo_ns__: str = 'com.sun.star.table'
    __ooo_full_ns__: str = 'com.sun.star.table.ShadowFormat'
    __ooo_type_name__: str = 'struct'
    typeName: str = 'com.sun.star.table.ShadowFormat'
    """Literal Constant ``com.sun.star.table.ShadowFormat``"""


    def __init__(self, *args, **kwargs):
        """
        Constructor

        Other Arguments:
            First positinal arg can be another ``ShadowFormat`` instance,
                if it is the only argument passed to contructor;
                Otherwise, postitional arguments are treated as ``ShadowFormat``
                values. Following the order of ``Keyword Arguments``.

        Keyword Arguments:
            Location (ShadowLocation, optional): Location value
            ShadowWidth (int, optional): ShadowWidth value
            IsTransparent (bool, optional): IsTransparent value
            Color (Color, optional): Color value
        """
        self._location = None
        self._shadow_width = None
        self._is_transparent = None
        self._color = None

        key_order = ('Location', 'ShadowWidth', 'IsTransparent', 'Color')
        arg_len = len(args)
        if arg_len == 1:
            if isinstance(args[0], ShadowFormat):
                oth = args[0]
                for key in key_order:
                    setattr(self, key, getattr(oth, key))
                return

        if  arg_len > len(key_order):
            raise ValueError("ShadowFormat.__init__() To many parameters")
        for i, arg in enumerate(args):
            setattr(self, key_order[i], arg)
        for k, v in kwargs.items():
            if k in key_order:
                setattr(self, k, v)

    @property
    def Location(self) -> 'ShadowLocation_d4530caf':
        """
        contains the location of the shadow.
        """
        return self._location
    
    @Location.setter
    def Location(self, value: 'ShadowLocation_d4530caf') -> None:
        self._location = value

    @property
    def ShadowWidth(self) -> int:
        """
        contains the size of the shadow.
        """
        return self._shadow_width
    
    @ShadowWidth.setter
    def ShadowWidth(self, value: int) -> None:
        self._shadow_width = value

    @property
    def IsTransparent(self) -> bool:
        """
        is TRUE, if shadow is transparent.
        """
        return self._is_transparent
    
    @IsTransparent.setter
    def IsTransparent(self, value: bool) -> None:
        self._is_transparent = value

    @property
    def Color(self) -> 'Color_68e908c5':
        """
        contains the color value of the shadow.
        """
        return self._color
    
    @Color.setter
    def Color(self, value: 'Color_68e908c5') -> None:
        self._color = value


__all__ = ['ShadowFormat']
