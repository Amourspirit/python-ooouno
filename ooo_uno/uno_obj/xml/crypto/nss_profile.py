# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.xml.crypto
# Libre Office Version: 7.2
import os
import typing
if typing.TYPE_CHECKING:
    from ...mozilla.mozilla_product_type import MozillaProductType as MozillaProductType_2e210f5b
from ooo_uno.oenv import UNO_ENVIRONMENT
if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
    from ooo_uno.helper import uno_helper


class NSSProfile(object):
    """
    Struct Class

    
    **since**
    
        LibreOffice 7.1

    See Also:
        `API NSSProfile <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1xml_1_1crypto_1_1NSSProfile.html>`_


    Note:
        | At runtime NSSProfile will be an actual uno struct however can seamlessly be treated as a regualr class.
        | At design time a class is presumed. This allows for better typings.
        | NSSProfile is a callable and can be treatead as a class and create instances.
    """

    def __init__(self, Name: typing.Optional[str] = None, Path: typing.Optional[str] = None, Type: 'typing.Optional[MozillaProductType_2e210f5b]' = None):
        self._name = Name
        self._path = Path
        self._type = Type

    @property
    def Name(self) -> str:
        """
        the name of the NSS profile
        
        Normally the name will reflect the name of the Mozilla profile. But the profile list also contains the following special entries: MANUAL and MOZILLA_CERTIFICATE_FOLDER. These will have a product type of MozillaProductType.Default and might have an empty path, if that value is not available.
        """
        return self._name
    
    @Name.setter
    def Name(self, value: str) -> None:
        self._name = value

    @property
    def Path(self) -> str:
        """
        the path to the NSS databases
        """
        return self._path
    
    @Path.setter
    def Path(self, value: str) -> None:
        self._path = value

    @property
    def Type(self) -> 'MozillaProductType_2e210f5b':
        """
        the type of the NSS profile
        """
        return self._type
    
    @Type.setter
    def Type(self, value: 'MozillaProductType_2e210f5b') -> None:
        self._type = value

def _dynamic_struct() -> None:
    # Dynamically create uno struct using uno
    global NSSProfile
    ignore = os.environ.get('ooouno_ignore_runtime', 'False')
    if ignore == 'True':
        return
    if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
        order = ('Name', 'Path', 'Type')
        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('com.sun.star.xml.crypto.NSSProfile')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        NSSProfile = _struct_init

if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
    _dynamic_struct()

__all__ = ['NSSProfile']
