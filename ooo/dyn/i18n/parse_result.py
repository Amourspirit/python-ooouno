# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.i18n
# Libre Office Version: 7.2
from typing import TYPE_CHECKING
from ooo.oenv import UNO_ENVIRONMENT, UNO_RUNTIME, UNO_NONE
_DYNAMIC = False
if (not TYPE_CHECKING) and UNO_RUNTIME and UNO_ENVIRONMENT:
    _DYNAMIC = True

if not TYPE_CHECKING and _DYNAMIC:
    def _dynamic_struct():
        import uno
        from com.sun.star.i18n import ParseResult as UParseResult
        # Dynamically create uno com.sun.star.i18n.ParseResult using uno
        global ParseResult

        def _set_fn_attr(struct):
            type_name = 'com.sun.star.i18n.ParseResult'
            struct.__dict__['typeName'] = type_name
            struct.__dict__['__pyunointerface__'] = type_name
            struct.__dict__['__pyunostruct__'] = type_name

        def _set_attr(struct):
            struct.__dict__['__ooo_ns__'] = 'com.sun.star.i18n'
            struct.__dict__['__ooo_full_ns__'] = 'com.sun.star.i18n.ParseResult'
            struct.__dict__['__ooo_type_name__'] = 'struct'

        def _struct_init(LeadingWhiteSpace = UNO_NONE, EndPos = UNO_NONE, CharLen = UNO_NONE, Value = UNO_NONE, TokenType = UNO_NONE, StartFlags = UNO_NONE, ContFlags = UNO_NONE, DequotedNameOrString = UNO_NONE):
            ns = 'com.sun.star.i18n.ParseResult'
            if isinstance(LeadingWhiteSpace, UParseResult):
                inst = uno.createUnoStruct(ns, LeadingWhiteSpace)
                _set_attr(inst)
                return inst
            struct = uno.createUnoStruct(ns)

            if not LeadingWhiteSpace is UNO_NONE:
                if getattr(struct, 'LeadingWhiteSpace') != LeadingWhiteSpace:
                    setattr(struct, 'LeadingWhiteSpace', LeadingWhiteSpace)
            if not EndPos is UNO_NONE:
                if getattr(struct, 'EndPos') != EndPos:
                    setattr(struct, 'EndPos', EndPos)
            if not CharLen is UNO_NONE:
                if getattr(struct, 'CharLen') != CharLen:
                    setattr(struct, 'CharLen', CharLen)
            if not Value is UNO_NONE:
                if getattr(struct, 'Value') != Value:
                    setattr(struct, 'Value', Value)
            if not TokenType is UNO_NONE:
                if getattr(struct, 'TokenType') != TokenType:
                    setattr(struct, 'TokenType', TokenType)
            if not StartFlags is UNO_NONE:
                if getattr(struct, 'StartFlags') != StartFlags:
                    setattr(struct, 'StartFlags', StartFlags)
            if not ContFlags is UNO_NONE:
                if getattr(struct, 'ContFlags') != ContFlags:
                    setattr(struct, 'ContFlags', ContFlags)
            if not DequotedNameOrString is UNO_NONE:
                if getattr(struct, 'DequotedNameOrString') != DequotedNameOrString:
                    setattr(struct, 'DequotedNameOrString', DequotedNameOrString)
            _set_attr(struct)
            return struct
        _set_attr(_struct_init)
        _set_fn_attr(_struct_init)
        ParseResult = _struct_init

    _dynamic_struct()
else:
    from ...lo.i18n.parse_result import ParseResult as ParseResult

__all__ = ['ParseResult']

