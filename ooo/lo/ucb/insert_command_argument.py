# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.ucb
# Libre Office Version: 7.2
import typing
if typing.TYPE_CHECKING:
    from ..io.x_input_stream import XInputStream as XInputStream_98d40ab4


class InsertCommandArgument(object):
    """
    Struct Class

    The argument for the command \"insert\".

    See Also:
        `API InsertCommandArgument <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1ucb_1_1InsertCommandArgument.html>`_
    """
    __ooo_ns__: str = 'com.sun.star.ucb'
    __ooo_full_ns__: str = 'com.sun.star.ucb.InsertCommandArgument'
    __ooo_type_name__: str = 'struct'
    typeName: str = 'com.sun.star.ucb.InsertCommandArgument'
    """Literal Constant ``com.sun.star.ucb.InsertCommandArgument``"""


    def __init__(self, *args, **kwargs):
        """
        Constructor

        Other Arguments:
            First positinal arg can be another ``InsertCommandArgument`` instance,
                if it is the only argument passed to contructor;
                Otherwise, postitional arguments are treated as ``InsertCommandArgument``
                values. Following the order of ``Keyword Arguments``.

        Keyword Arguments:
            Data (XInputStream, optional): Data value
            ReplaceExisting (bool, optional): ReplaceExisting value
        """
        self._data = None
        self._replace_existing = None

        key_order = ('Data', 'ReplaceExisting')
        arg_len = len(args)
        if arg_len == 1:
            if isinstance(args[0], InsertCommandArgument):
                oth = args[0]
                for key in key_order:
                    setattr(self, key, getattr(oth, key))
                return

        if  arg_len > len(key_order):
            raise ValueError("InsertCommandArgument.__init__() To many parameters")
        for i, arg in enumerate(args):
            setattr(self, key_order[i], arg)
        for k, v in kwargs.items():
            if k in key_order:
                setattr(self, k, v)

    @property
    def Data(self) -> 'XInputStream_98d40ab4':
        """
        A stream containing document data.
        
        This member can be left blank, if no (new) document data shall be written by the implementation of the \"insert\" command.
        """
        return self._data
    
    @Data.setter
    def Data(self, value: 'XInputStream_98d40ab4') -> None:
        self._data = value

    @property
    def ReplaceExisting(self) -> bool:
        """
        A flag indicating whether a possibly existing content (and its data) shall be overwritten.
        
        Implementations that are not able to detect whether there are previous data may ignore this parameter and will always write the new data.
        """
        return self._replace_existing
    
    @ReplaceExisting.setter
    def ReplaceExisting(self, value: bool) -> None:
        self._replace_existing = value


__all__ = ['InsertCommandArgument']
