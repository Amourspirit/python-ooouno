# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.text
# Libre Office Version: 7.2
import os
from ..lang.event_object import EventObject as EventObject_a3d70b03
import typing
if typing.TYPE_CHECKING:
    from ..frame.x_model import XModel as XModel_7a6e095c
from ooo_uno.oenv import UNO_ENVIRONMENT
if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
    from ooo_uno.helper import uno_helper


class MailMergeEvent(EventObject_a3d70b03):
    """
    Struct Class

    represents a mail merge event.
    
    This type of event is being sent by the mail merge service right before the merging of the next document to be processed. This allows for example to modify the document specifically before it gets merged.
    
    **since**
    
        OOo 1.1.2

    See Also:
        `API MailMergeEvent <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1text_1_1MailMergeEvent.html>`_


    Note:
        | At runtime MailMergeEvent will be an actual uno struct however can seamlessly be treated as a regualr class.
        | At design time a class is presumed. This allows for better typings.
        | MailMergeEvent is a callable and can be treatead as a class and create instances.
    """

    def __init__(self, Model: 'typing.Optional[XModel_7a6e095c]' = None):
        self._model = Model

    @property
    def Model(self) -> 'XModel_7a6e095c':
        """
        The model of the document to be processed next.
        """
        return self._model
    
    @Model.setter
    def Model(self, value: 'XModel_7a6e095c') -> None:
        self._model = value

def _dynamic_struct() -> None:
    # Dynamically create uno struct using uno
    global MailMergeEvent
    ignore = os.environ.get('ooouno_ignore_runtime', 'False')
    if ignore == 'True':
        return
    if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
        order = ('Model',)
        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('com.sun.star.text.MailMergeEvent')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        MailMergeEvent = _struct_init

if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
    _dynamic_struct()

__all__ = ['MailMergeEvent']
