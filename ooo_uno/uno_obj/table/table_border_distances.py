# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.table
# Libre Office Version: 7.2
import os
import typing
from ooo_uno.oenv import UNO_ENVIRONMENT
if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
    from ooo_uno.helper import uno_helper


class TableBorderDistances(object):
    """
    Struct Class

    contains the distance settings of the border lines of all cells in a cell range.
    
    In a queried structure, the flags in TableBorderDistances.Is...DistanceValid indicate that not all lines of the boxes have the same values.
    
    In a structure which is used for setting, these flags determine if the corresponding distance should be set or if the old value should be kept.

    See Also:
        `API TableBorderDistances <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1table_1_1TableBorderDistances.html>`_


    Note:
        | At runtime TableBorderDistances will be an actual uno struct however can seamlessly be treated as a regualr class.
        | At design time a class is presumed. This allows for better typings.
        | TableBorderDistances is a callable and can be treatead as a class and create instances.
    """

    def __init__(self, BottomDistance: typing.Optional[int] = None, IsBottomDistanceValid: typing.Optional[bool] = None, IsLeftDistanceValid: typing.Optional[bool] = None, IsRightDistanceValid: typing.Optional[bool] = None, IsTopDistanceValid: typing.Optional[bool] = None, LeftDistance: typing.Optional[int] = None, RightDistance: typing.Optional[int] = None, TopDistance: typing.Optional[int] = None):
        self._bottom_distance = BottomDistance
        self._is_bottom_distance_valid = IsBottomDistanceValid
        self._is_left_distance_valid = IsLeftDistanceValid
        self._is_right_distance_valid = IsRightDistanceValid
        self._is_top_distance_valid = IsTopDistanceValid
        self._left_distance = LeftDistance
        self._right_distance = RightDistance
        self._top_distance = TopDistance

    @property
    def BottomDistance(self) -> int:
        """
        contains the distance between the bottom lines and other contents.
        """
        return self._bottom_distance
    
    @BottomDistance.setter
    def BottomDistance(self, value: int) -> None:
        self._bottom_distance = value

    @property
    def IsBottomDistanceValid(self) -> bool:
        """
        specifies whether the value of TableBorder.BottomDistance is used.
        """
        return self._is_bottom_distance_valid
    
    @IsBottomDistanceValid.setter
    def IsBottomDistanceValid(self, value: bool) -> None:
        self._is_bottom_distance_valid = value

    @property
    def IsLeftDistanceValid(self) -> bool:
        """
        specifies whether the value of TableBorder.LeftDistance is used.
        """
        return self._is_left_distance_valid
    
    @IsLeftDistanceValid.setter
    def IsLeftDistanceValid(self, value: bool) -> None:
        self._is_left_distance_valid = value

    @property
    def IsRightDistanceValid(self) -> bool:
        """
        specifies whether the value of TableBorder.RightDistance is used.
        """
        return self._is_right_distance_valid
    
    @IsRightDistanceValid.setter
    def IsRightDistanceValid(self, value: bool) -> None:
        self._is_right_distance_valid = value

    @property
    def IsTopDistanceValid(self) -> bool:
        """
        specifies whether the value of TableBorder.TopDistance is used.
        """
        return self._is_top_distance_valid
    
    @IsTopDistanceValid.setter
    def IsTopDistanceValid(self, value: bool) -> None:
        self._is_top_distance_valid = value

    @property
    def LeftDistance(self) -> int:
        """
        contains the distance between the left lines and other contents.
        """
        return self._left_distance
    
    @LeftDistance.setter
    def LeftDistance(self, value: int) -> None:
        self._left_distance = value

    @property
    def RightDistance(self) -> int:
        """
        contains the distance between the right lines and other contents.
        """
        return self._right_distance
    
    @RightDistance.setter
    def RightDistance(self, value: int) -> None:
        self._right_distance = value

    @property
    def TopDistance(self) -> int:
        """
        contains the distance between the top lines and other contents.
        """
        return self._top_distance
    
    @TopDistance.setter
    def TopDistance(self, value: int) -> None:
        self._top_distance = value

def _dynamic_struct() -> None:
    # Dynamically create uno struct using uno
    global TableBorderDistances
    ignore = os.environ.get('ooouno_ignore_runtime', 'False')
    if ignore == 'True':
        return
    if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
        order = ('BottomDistance', 'IsBottomDistanceValid', 'IsLeftDistanceValid', 'IsRightDistanceValid', 'IsTopDistanceValid', 'LeftDistance', 'RightDistance', 'TopDistance')
        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('com.sun.star.table.TableBorderDistances')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        TableBorderDistances = _struct_init

if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
    _dynamic_struct()

__all__ = ['TableBorderDistances']
