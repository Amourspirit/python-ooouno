# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.geometry
# Libre Office Version: 7.2


class IntegerBezierSegment2D(object):
    """
    Struct Class

    This structure contains the relevant data for a cubic Bezier curve.
    
    The data is stored integer-valued. The last point of the segment is taken from the first point of the following segment, and thus not included herein. That is, when forming a polygon out of cubic Bezier segments, each two consecutive IntegerBezierSegment2Ds define the actual curve, with the very last segment providing only the end point of the last curve, and the remaining members ignored.
    
    **since**
    
        OOo 2.0

    See Also:
        `API IntegerBezierSegment2D <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1geometry_1_1IntegerBezierSegment2D.html>`_
    """
    __ooo_ns__: str = 'com.sun.star.geometry'
    __ooo_full_ns__: str = 'com.sun.star.geometry.IntegerBezierSegment2D'
    __ooo_type_name__: str = 'struct'
    typeName: str = 'com.sun.star.geometry.IntegerBezierSegment2D'
    """Literal Constant ``com.sun.star.geometry.IntegerBezierSegment2D``"""


    def __init__(self, *args, **kwargs):
        """
        Constructor

        Other Arguments:
            First positinal arg can be another ``IntegerBezierSegment2D`` instance,
                if it is the only argument passed to contructor;
                Otherwise, postitional arguments are treated as ``IntegerBezierSegment2D``
                values. Following the order of ``Keyword Arguments``.

        Keyword Arguments:
            Px (int, optional): Px value
            Py (int, optional): Py value
            C1x (int, optional): C1x value
            C1y (int, optional): C1y value
            C2x (int, optional): C2x value
            C2y (int, optional): C2y value
        """
        self._px = None
        self._py = None
        self._c1x = None
        self._c1y = None
        self._c2x = None
        self._c2y = None

        key_order = ('Px', 'Py', 'C1x', 'C1y', 'C2x', 'C2y')
        arg_len = len(args)
        if arg_len == 1:
            if isinstance(args[0], IntegerBezierSegment2D):
                oth = args[0]
                for key in key_order:
                    setattr(self, key, getattr(oth, key))
                return

        if  arg_len > len(key_order):
            raise ValueError("IntegerBezierSegment2D.__init__() To many parameters")
        for i, arg in enumerate(args):
            setattr(self, key_order[i], arg)
        for k, v in kwargs.items():
            if k in key_order:
                setattr(self, k, v)

    @property
    def Px(self) -> int:
        """
        The x coordinate of the start point.
        """
        return self._px
    
    @Px.setter
    def Px(self, value: int) -> None:
        self._px = value

    @property
    def Py(self) -> int:
        """
        The y coordinate of the start point.
        """
        return self._py
    
    @Py.setter
    def Py(self, value: int) -> None:
        self._py = value

    @property
    def C1x(self) -> int:
        """
        The x coordinate of the first control point.
        """
        return self._c1x
    
    @C1x.setter
    def C1x(self, value: int) -> None:
        self._c1x = value

    @property
    def C1y(self) -> int:
        """
        The y coordinate of the first control point.
        """
        return self._c1y
    
    @C1y.setter
    def C1y(self, value: int) -> None:
        self._c1y = value

    @property
    def C2x(self) -> int:
        """
        The x coordinate of the second control point.
        """
        return self._c2x
    
    @C2x.setter
    def C2x(self, value: int) -> None:
        self._c2x = value

    @property
    def C2y(self) -> int:
        """
        The y coordinate of the second control point.
        """
        return self._c2y
    
    @C2y.setter
    def C2y(self, value: int) -> None:
        self._c2y = value


__all__ = ['IntegerBezierSegment2D']
