# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.sdb.application
# Libre Office Version: 7.2
import typing
from ooo_uno.oenv import UNO_ENVIRONMENT, UNO_RUNTIME
_DYNAMIC = False
if (not typing.TYPE_CHECKING) and UNO_RUNTIME and UNO_ENVIRONMENT:
    _DYNAMIC = True
    from ooo_uno.helper import uno_helper

if typing.TYPE_CHECKING or _DYNAMIC is False:


    class NamedDatabaseObject(object):
        """
        Struct Class

        denotes a named database object, or a named folder of database objects
        
        **since**
        
            OOo 3.0

        See Also:
            `API NamedDatabaseObject <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1sdb_1_1application_1_1NamedDatabaseObject.html>`_


        Note:
            | At runtime NamedDatabaseObject will be an actual uno struct however can seamlessly be treated as a regualr class.
            | At design time a class is presumed. This allows for better typings.
            | NamedDatabaseObject is a callable and can be treatead as a class and create instances.
        """

        def __init__(self, Name: typing.Optional[str] = None, Type: typing.Optional[int] = None):
            self._name = Name
            self._type = Type

        @property
        def Name(self) -> str:
            """
            denotes the name of the object
            
            In case of forms, reports, form folders and report folders, this is the hierarchical path to the object, where the path elements are separated by a slash (/).
            
            In case of tables, this is the fully qualified name of the table, as required by the database's table name composition rules.
            
            In case of queries, this is the name of the query.
            
            In case of virtual folders denoted by DatabaseObjectContainer.CATALOG and DatabaseObjectContainer.SCHEMA, it is
            
            In case of the virtual folders denoted by DatabaseObjectContainer.TABLES, DatabaseObjectContainer.QUERIES, DatabaseObjectContainer.DATA_SOURCE, DatabaseObjectContainer.FORMS or DatabaseObjectContainer.REPORTS, this denotes the name of the data source (as denoted by com.sun.star.sdb.DataSource.Name)
            """
            return self._name
        
        @Name.setter
        def Name(self, value: str) -> None:
            self._name = value

        @property
        def Type(self) -> int:
            """
            denotes the type of the object.
            
            This member is one of the DatabaseObject or DatabaseObjectContainer constants.
            """
            return self._type
        
        @Type.setter
        def Type(self, value: int) -> None:
            self._type = value

if not typing.TYPE_CHECKING and _DYNAMIC:
    def _dynamic_struct() -> None:
        # Dynamically create uno struct using uno
        global NamedDatabaseObject
        order = ('Name', 'Type')

        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('com.sun.star.sdb.application.NamedDatabaseObject')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        NamedDatabaseObject = _struct_init

    _dynamic_struct()

__all__ = ['NamedDatabaseObject']
