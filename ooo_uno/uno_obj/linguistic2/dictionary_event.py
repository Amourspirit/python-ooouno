# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.linguistic2
# Libre Office Version: 7.2
from ..lang.event_object import EventObject as EventObject_a3d70b03
import typing
if typing.TYPE_CHECKING:
    from .x_dictionary_entry import XDictionaryEntry as XDictionaryEntry_49ef0ff5
from ooo_uno.oenv import UNO_ENVIRONMENT, UNO_RUNTIME
_DYNAMIC = False
if (not typing.TYPE_CHECKING) and UNO_RUNTIME and UNO_ENVIRONMENT:
    _DYNAMIC = True
    from ooo_uno.helper import uno_helper

if typing.TYPE_CHECKING or _DYNAMIC is False:


    class DictionaryEvent(EventObject_a3d70b03):
        """
        Struct Class

        represents a dictionary event.
        
        This type of event is used by a dictionary to inform its listeners about changes in its properties or its entry list. It consists of an event type and may supply an affected dictionary entry.

        See Also:
            `API DictionaryEvent <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1linguistic2_1_1DictionaryEvent.html>`_


        Note:
            | At runtime DictionaryEvent will be an actual uno struct however can seamlessly be treated as a regualr class.
            | At design time a class is presumed. This allows for better typings.
            | DictionaryEvent is a callable and can be treatead as a class and create instances.
        """

        def __init__(self, nEvent: typing.Optional[int] = None, xDictionaryEntry: 'typing.Optional[XDictionaryEntry_49ef0ff5]' = None):
            self._n_event = nEvent
            self._x_dictionary_entry = xDictionaryEntry

        @property
        def nEvent(self) -> int:
            """
            is the type of event.
            
            This must be the value of a single flag. No combinations are allowed.
            """
            return self._n_event
        
        @nEvent.setter
        def nEvent(self, value: int) -> None:
            self._n_event = value

        @property
        def xDictionaryEntry(self) -> 'XDictionaryEntry_49ef0ff5':
            """
            is the affected dictionary entry (if any).
            
            It must be set if an entry was added or deleted, otherwise it should be empty.
            """
            return self._x_dictionary_entry
        
        @xDictionaryEntry.setter
        def xDictionaryEntry(self, value: 'XDictionaryEntry_49ef0ff5') -> None:
            self._x_dictionary_entry = value

if not typing.TYPE_CHECKING and _DYNAMIC:
    def _dynamic_struct() -> None:
        # Dynamically create uno struct using uno
        global DictionaryEvent
        order = ('nEvent', 'xDictionaryEntry')

        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('com.sun.star.linguistic2.DictionaryEvent')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        DictionaryEvent = _struct_init

    _dynamic_struct()

__all__ = ['DictionaryEvent']
