# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.text
# Libre Office Version: 7.2
from ..lang.event_object import EventObject as EventObject_a3d70b03
import typing
if typing.TYPE_CHECKING:
    from ..frame.x_model import XModel as XModel_7a6e095c


class MailMergeEvent(EventObject_a3d70b03):
    """
    Struct Class

    represents a mail merge event.
    
    This type of event is being sent by the mail merge service right before the merging of the next document to be processed. This allows for example to modify the document specifically before it gets merged.
    
    **since**
    
        OOo 1.1.2

    See Also:
        `API MailMergeEvent <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1text_1_1MailMergeEvent.html>`_
    """
    __ooo_ns__: str = 'com.sun.star.text'
    __ooo_full_ns__: str = 'com.sun.star.text.MailMergeEvent'
    __ooo_type_name__: str = 'struct'
    typeName: str = 'com.sun.star.text.MailMergeEvent'
    """Literal Constant ``com.sun.star.text.MailMergeEvent``"""

    def __init__(self, *args, **kwargs):
        """
        Constructor

        Other Arguments:
            First positinal arg can be another ``MailMergeEvent`` instance,
                if it is the only argument passed to contructor;
                Otherwise, postitional arguments are treated as ``MailMergeEvent``
                values. Following the order of ``Keyword Arguments``.

        Keyword Arguments:
            Model (XModel, optional): Model value
        """
        self._model = None

        key_order = ('Model',)
        arg_len = len(args)
        if arg_len == 1:
            if isinstance(args[0], MailMergeEvent):
                oth = args[0]
                for key in key_order:
                    setattr(self, key, getattr(oth, key))
                return

        if  arg_len > len(key_order):
            raise ValueError("MailMergeEvent.__init__() To many parameters")
        for i, arg in enumerate(args):
            setattr(self, key_order[i], arg)
        for k, v in kwargs.items():
            if k in key_order:
                setattr(self, k, v)


    @property
    def Model(self) -> 'XModel_7a6e095c':
        """
        The model of the document to be processed next.
        """
        return self._model
    
    @Model.setter
    def Model(self, value: 'XModel_7a6e095c') -> None:
        self._model = value


__all__ = ['MailMergeEvent']
