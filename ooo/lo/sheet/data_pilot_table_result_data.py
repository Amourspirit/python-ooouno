# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.sheet
# Libre Office Version: 7.2
import typing
from .data_pilot_field_filter import DataPilotFieldFilter as DataPilotFieldFilter_271e0eed
if typing.TYPE_CHECKING:
    from .data_result import DataResult as DataResult_a47d0b1a


class DataPilotTableResultData(object):
    """
    Struct Class

    information about a cell positioned within the result area of a DataPilot table.
    
    DataPilotTableResultData contains information about a particular cell positioned within the result area of a DataPilot table.
    
    **since**
    
        OOo 3.0

    See Also:
        `API DataPilotTableResultData <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1sheet_1_1DataPilotTableResultData.html>`_
    """
    __ooo_ns__: str = 'com.sun.star.sheet'
    __ooo_full_ns__: str = 'com.sun.star.sheet.DataPilotTableResultData'
    __ooo_type_name__: str = 'struct'
    typeName: str = 'com.sun.star.sheet.DataPilotTableResultData'
    """Literal Constant ``com.sun.star.sheet.DataPilotTableResultData``"""

    FieldFilters: typing.TypeAlias = typing.Tuple[DataPilotFieldFilter_271e0eed, ...]
    """
    This is a set of filter criteria that can be used to re-create those data rows that contribute to the value shown in the cell.
    """

    def __init__(self, *args, **kwargs):
        """
        Constructor

        Other Arguments:
            First positinal arg can be another ``DataPilotTableResultData`` instance,
                if it is the only argument passed to contructor;
                Otherwise, postitional arguments are treated as ``DataPilotTableResultData``
                values. Following the order of ``Keyword Arguments``.

        Keyword Arguments:
            DataFieldIndex (int, optional): DataFieldIndex value
            Result (DataResult, optional): Result value
        """
        self._data_field_index = None
        self._result = None

        key_order = ('DataFieldIndex', 'Result')
        arg_len = len(args)
        if arg_len == 1:
            if isinstance(args[0], DataPilotTableResultData):
                oth = args[0]
                for key in key_order:
                    setattr(self, key, getattr(oth, key))
                return

        if  arg_len > len(key_order):
            raise ValueError("DataPilotTableResultData.__init__() To many parameters")
        for i, arg in enumerate(args):
            setattr(self, key_order[i], arg)
        for k, v in kwargs.items():
            if k in key_order:
                setattr(self, k, v)

    @property
    def DataFieldIndex(self) -> int:
        """
        This is a 0-based index that specifies which data field the data displayed in the cell is for; the value of 0 means the cell is for the first data field, 1 for the second, and so on.
        """
        return self._data_field_index
    
    @DataFieldIndex.setter
    def DataFieldIndex(self, value: int) -> None:
        self._data_field_index = value

    @property
    def Result(self) -> 'DataResult_a47d0b1a':
        """
        more information about the result contained in the DataResult type.
        """
        return self._result
    
    @Result.setter
    def Result(self, value: 'DataResult_a47d0b1a') -> None:
        self._result = value


__all__ = ['DataPilotTableResultData']
