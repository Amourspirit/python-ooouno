# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.text
# Libre Office Version: 7.2
import typing
if typing.TYPE_CHECKING:
    from ..container.x_string_key_map import XStringKeyMap as XStringKeyMap_ffc60de1


class TextMarkupDescriptor(object):
    """
    Struct Class

    A descriptor for a single text markup.
    
    **since**
    
        OOo 3.0.1

    See Also:
        `API TextMarkupDescriptor <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1text_1_1TextMarkupDescriptor.html>`_
    """
    __ooo_ns__: str = 'com.sun.star.text'
    __ooo_full_ns__: str = 'com.sun.star.text.TextMarkupDescriptor'
    __ooo_type_name__: str = 'struct'
    typeName: str = 'com.sun.star.text.TextMarkupDescriptor'
    """Literal Constant ``com.sun.star.text.TextMarkupDescriptor``"""

    def __init__(self, *args, **kwargs):
        """
        Constructor

        Other Arguments:
            First positinal arg can be another ``TextMarkupDescriptor`` instance,
                if it is the only argument passed to contructor;
                Otherwise, postitional arguments are treated as ``TextMarkupDescriptor``
                values. Following the order of ``Keyword Arguments``.

        Keyword Arguments:
            nType (int, optional): nType value
            aIdentifier (str, optional): aIdentifier value
            nOffset (int, optional): nOffset value
            nLength (int, optional): nLength value
            xMarkupInfoContainer (XStringKeyMap, optional): xMarkupInfoContainer value
        """
        self._n_type = None
        self._a_identifier = None
        self._n_offset = None
        self._n_length = None
        self._x_markup_info_container = None

        key_order = ('nType', 'aIdentifier', 'nOffset', 'nLength', 'xMarkupInfoContainer')
        arg_len = len(args)
        if arg_len == 1:
            if isinstance(args[0], TextMarkupDescriptor):
                oth = args[0]
                for key in key_order:
                    setattr(self, key, getattr(oth, key))
                return

        if  arg_len > len(key_order):
            raise ValueError("TextMarkupDescriptor.__init__() To many parameters")
        for i, arg in enumerate(args):
            setattr(self, key_order[i], arg)
        for k, v in kwargs.items():
            if k in key_order:
                setattr(self, k, v)


    @property
    def nType(self) -> int:
        """
        Type of text markup see TextMarkupType.
        """
        return self._n_type
    
    @nType.setter
    def nType(self, value: int) -> None:
        self._n_type = value

    @property
    def aIdentifier(self) -> str:
        """
        A string used to identify the caller.
        """
        return self._a_identifier
    
    @aIdentifier.setter
    def aIdentifier(self, value: str) -> None:
        self._a_identifier = value

    @property
    def nOffset(self) -> int:
        """
        Start of the markup range.
        """
        return self._n_offset
    
    @nOffset.setter
    def nOffset(self, value: int) -> None:
        self._n_offset = value

    @property
    def nLength(self) -> int:
        """
        Length of the markup range.
        """
        return self._n_length
    
    @nLength.setter
    def nLength(self, value: int) -> None:
        self._n_length = value

    @property
    def xMarkupInfoContainer(self) -> 'XStringKeyMap_ffc60de1':
        """
        contains additional information about the markup
        
        Supported properties:
        
        |
        
        **since**
        
            6.3: BOLDWAVE, BOLD | See: com::sun::star::awt::FontUnderline
        """
        return self._x_markup_info_container
    
    @xMarkupInfoContainer.setter
    def xMarkupInfoContainer(self, value: 'XStringKeyMap_ffc60de1') -> None:
        self._x_markup_info_container = value


__all__ = ['TextMarkupDescriptor']
