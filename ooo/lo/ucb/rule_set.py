# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.ucb
# Libre Office Version: 7.2
import typing
from .rule import Rule as Rule_571307da


class RuleSet(object):
    """
    Struct Class

    describes a set of Rules.
    
    A RuleSet is applied to a folder. It consists of a sequence of rules. Each rule consists of a sequence of RuleTerms describing the objects to which the rule should by applied and the RuleAction which should be performed on the matching objects.

    See Also:
        `API RuleSet <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1ucb_1_1RuleSet.html>`_
    """
    __ooo_ns__: str = 'com.sun.star.ucb'
    __ooo_full_ns__: str = 'com.sun.star.ucb.RuleSet'
    __ooo_type_name__: str = 'struct'
    typeName: str = 'com.sun.star.ucb.RuleSet'
    """Literal Constant ``com.sun.star.ucb.RuleSet``"""

    Rules: typing.TypeAlias = typing.Tuple[Rule_571307da, ...]
    """
    contains a number of rules.
    """

    def __init__(self, *args, **kwargs):
        """
        Constructor

        Other Arguments:
            First positinal arg can be another ``RuleSet`` instance,
                if it is the only argument passed to contructor;
                Otherwise, postitional arguments are treated as ``RuleSet``
                values. Following the order of ``Keyword Arguments``.

        Keyword Arguments:
            HandleFolder (bool, optional): HandleFolder value
        """
        self._handle_folder = None

        key_order = ('HandleFolder',)
        arg_len = len(args)
        if arg_len == 1:
            if isinstance(args[0], RuleSet):
                oth = args[0]
                for key in key_order:
                    setattr(self, key, getattr(oth, key))
                return

        if  arg_len > len(key_order):
            raise ValueError("RuleSet.__init__() To many parameters")
        for i, arg in enumerate(args):
            setattr(self, key_order[i], arg)
        for k, v in kwargs.items():
            if k in key_order:
                setattr(self, k, v)

    @property
    def HandleFolder(self) -> bool:
        """
        is a flag indicating whether the rules apply to folders, too.
        """
        return self._handle_folder
    
    @HandleFolder.setter
    def HandleFolder(self, value: bool) -> None:
        self._handle_folder = value


__all__ = ['RuleSet']
