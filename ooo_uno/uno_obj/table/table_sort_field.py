# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.table
# Libre Office Version: 7.2
import typing
if typing.TYPE_CHECKING:
    from ..lang.locale import Locale as Locale_70d308fa
    from .table_sort_field_type import TableSortFieldType as TableSortFieldType_9a50e26
from ooo_uno.oenv import UNO_ENVIRONMENT, UNO_RUNTIME
_DYNAMIC = False
if (not typing.TYPE_CHECKING) and UNO_RUNTIME and UNO_ENVIRONMENT:
    _DYNAMIC = True
    from ooo_uno.helper import uno_helper

if typing.TYPE_CHECKING or _DYNAMIC is False:


    class TableSortField(object):
        """
        Struct Class

        describes how to sort a single field (row/column) in a tables sort descriptor.
        
        **since**
        
            OOo 1.1.2

        See Also:
            `API TableSortField <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1table_1_1TableSortField.html>`_


        Note:
            | At runtime TableSortField will be an actual uno struct however can seamlessly be treated as a regualr class.
            | At design time a class is presumed. This allows for better typings.
            | TableSortField is a callable and can be treatead as a class and create instances.
        """

        def __init__(self, CollatorAlgorithm: typing.Optional[str] = None, CollatorLocale: 'typing.Optional[Locale_70d308fa]' = None, Field: typing.Optional[int] = None, FieldType: 'typing.Optional[TableSortFieldType_9a50e26]' = None, IsAscending: typing.Optional[bool] = None, IsCaseSensitive: typing.Optional[bool] = None):
            self._collator_algorithm = CollatorAlgorithm
            self._collator_locale = CollatorLocale
            self._field = Field
            self._field_type = FieldType
            self._is_ascending = IsAscending
            self._is_case_sensitive = IsCaseSensitive

        @property
        def CollatorAlgorithm(self) -> str:
            """
            the algorithm used by the collator when comparing/sorting text.
            
            This property will not be used when the \"FieldType\" is com.sun.star.table.TableSortFieldType.NUMERIC
            """
            return self._collator_algorithm
        
        @CollatorAlgorithm.setter
        def CollatorAlgorithm(self, value: str) -> None:
            self._collator_algorithm = value

        @property
        def CollatorLocale(self) -> 'Locale_70d308fa':
            """
            the locale used by the collator when comparing/sorting text.
            
            This property will not be used when the \"FieldType\" is com.sun.star.table.TableSortFieldType.NUMERIC
            """
            return self._collator_locale
        
        @CollatorLocale.setter
        def CollatorLocale(self, value: 'Locale_70d308fa') -> None:
            self._collator_locale = value

        @property
        def Field(self) -> int:
            """
            index of the row or column in the table to be sorted; 0-based.
            """
            return self._field
        
        @Field.setter
        def Field(self, value: int) -> None:
            self._field = value

        @property
        def FieldType(self) -> 'TableSortFieldType_9a50e26':
            """
            type of contents in the field.
            
            If the value is com.sun.star.table.TableSortFieldType.AUTOMATIC the algorithm used for sorting is application specific. Especially it may or may not use the values given by \"CollatorLocale\" and \"CollatorAlgorithm\".
            """
            return self._field_type
        
        @FieldType.setter
        def FieldType(self, value: 'TableSortFieldType_9a50e26') -> None:
            self._field_type = value

        @property
        def IsAscending(self) -> bool:
            """
            TRUE if data are sorted in ascending order, FALSE if in descending order.
            """
            return self._is_ascending
        
        @IsAscending.setter
        def IsAscending(self, value: bool) -> None:
            self._is_ascending = value

        @property
        def IsCaseSensitive(self) -> bool:
            """
            specifies if the case of letters is important when comparing entries.
            """
            return self._is_case_sensitive
        
        @IsCaseSensitive.setter
        def IsCaseSensitive(self, value: bool) -> None:
            self._is_case_sensitive = value

if not typing.TYPE_CHECKING and _DYNAMIC:
    def _dynamic_struct() -> None:
        # Dynamically create uno struct using uno
        global TableSortField
        order = ('CollatorAlgorithm', 'CollatorLocale', 'Field', 'FieldType', 'IsAscending', 'IsCaseSensitive')

        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('com.sun.star.table.TableSortField')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        TableSortField = _struct_init

    _dynamic_struct()

__all__ = ['TableSortField']
