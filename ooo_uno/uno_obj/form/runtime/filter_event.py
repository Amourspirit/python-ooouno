# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.form.runtime
# Libre Office Version: 7.2
from ...lang.event_object import EventObject as EventObject_a3d70b03
import typing
from ooo_uno.oenv import UNO_ENVIRONMENT, UNO_RUNTIME
_DYNAMIC = False
if (not typing.TYPE_CHECKING) and UNO_RUNTIME and UNO_ENVIRONMENT:
    _DYNAMIC = True
    from ooo_uno.helper import uno_helper

if typing.TYPE_CHECKING or _DYNAMIC is False:


    class FilterEvent(EventObject_a3d70b03):
        """
        Struct Class

        is an event fired by a filter controller, when the filter managed by the controller changes.
        
        **since**
        
            OOo 3.3

        See Also:
            `API FilterEvent <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1form_1_1runtime_1_1FilterEvent.html>`_


        Note:
            | At runtime FilterEvent will be an actual uno struct however can seamlessly be treated as a regualr class.
            | At design time a class is presumed. This allows for better typings.
            | FilterEvent is a callable and can be treatead as a class and create instances.
        """

        def __init__(self, DisjunctiveTerm: typing.Optional[int] = None, FilterComponent: typing.Optional[int] = None, PredicateExpression: typing.Optional[str] = None):
            self._disjunctive_term = DisjunctiveTerm
            self._filter_component = FilterComponent
            self._predicate_expression = PredicateExpression

        @property
        def DisjunctiveTerm(self) -> int:
            """
            denotes the index of the disjunctive term to which the event applies, if any.
            """
            return self._disjunctive_term
        
        @DisjunctiveTerm.setter
        def DisjunctiveTerm(self, value: int) -> None:
            self._disjunctive_term = value

        @property
        def FilterComponent(self) -> int:
            """
            denotes the index of the filter component to which the event applies, if any.
            """
            return self._filter_component
        
        @FilterComponent.setter
        def FilterComponent(self, value: int) -> None:
            self._filter_component = value

        @property
        def PredicateExpression(self) -> str:
            """
            denotes the predicate expression associated with the event.
            """
            return self._predicate_expression
        
        @PredicateExpression.setter
        def PredicateExpression(self, value: str) -> None:
            self._predicate_expression = value

if not typing.TYPE_CHECKING and _DYNAMIC:
    def _dynamic_struct() -> None:
        # Dynamically create uno struct using uno
        global FilterEvent
        order = ('DisjunctiveTerm', 'FilterComponent', 'PredicateExpression')

        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('com.sun.star.form.runtime.FilterEvent')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        FilterEvent = _struct_init

    _dynamic_struct()

__all__ = ['FilterEvent']
