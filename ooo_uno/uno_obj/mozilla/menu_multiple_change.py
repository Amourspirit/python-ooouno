# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.mozilla
# Libre Office Version: 7.2
import typing
from ooo_uno.oenv import UNO_ENVIRONMENT, UNO_RUNTIME
_DYNAMIC = False
if (not typing.TYPE_CHECKING) and UNO_RUNTIME and UNO_ENVIRONMENT:
    _DYNAMIC = True
    from ooo_uno.helper import uno_helper

if typing.TYPE_CHECKING or _DYNAMIC is False:


    class MenuMultipleChange(object):
        """
        Struct Class

        Explains properties of a menu item.

        See Also:
            `API MenuMultipleChange <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1mozilla_1_1MenuMultipleChange.html>`_


        Note:
            | At runtime MenuMultipleChange will be an actual uno struct however can seamlessly be treated as a regualr class.
            | At design time a class is presumed. This allows for better typings.
            | MenuMultipleChange is a callable and can be treatead as a class and create instances.
        """

        def __init__(self, GroupID: typing.Optional[int] = None, ID: typing.Optional[int] = None, Image: 'typing.Optional[typing.List[int]]' = None, IsActive: typing.Optional[bool] = None, IsCheckable: typing.Optional[bool] = None, IsChecked: typing.Optional[bool] = None, IsVisible: typing.Optional[bool] = None, ItemText: typing.Optional[str] = None, PreItemID: typing.Optional[int] = None):
            self._group_id = GroupID
            self._id = ID
            self._image = Image
            self._is_active = IsActive
            self._is_checkable = IsCheckable
            self._is_checked = IsChecked
            self._is_visible = IsVisible
            self._item_text = ItemText
            self._pre_item_id = PreItemID

        @property
        def GroupID(self) -> int:
            """
            unique ID of the group this menu item belongs to
            """
            return self._group_id
        
        @GroupID.setter
        def GroupID(self, value: int) -> None:
            self._group_id = value

        @property
        def ID(self) -> int:
            """
            unique ID of this menu item
            """
            return self._id
        
        @ID.setter
        def ID(self, value: int) -> None:
            self._id = value

        @property
        def Image(self) -> 'typing.List[int]':
            """
            sequence of bytes representing a possible image
            """
            return self._image
        
        @Image.setter
        def Image(self, value: 'typing.List[int]') -> None:
            self._image = value

        @property
        def IsActive(self) -> bool:
            """
            true if active, so clickable
            """
            return self._is_active
        
        @IsActive.setter
        def IsActive(self, value: bool) -> None:
            self._is_active = value

        @property
        def IsCheckable(self) -> bool:
            """
            true if checkable, so there can be a checkmark
            """
            return self._is_checkable
        
        @IsCheckable.setter
        def IsCheckable(self, value: bool) -> None:
            self._is_checkable = value

        @property
        def IsChecked(self) -> bool:
            """
            true if there is a checkmark
            """
            return self._is_checked
        
        @IsChecked.setter
        def IsChecked(self, value: bool) -> None:
            self._is_checked = value

        @property
        def IsVisible(self) -> bool:
            """
            true if visible
            """
            return self._is_visible
        
        @IsVisible.setter
        def IsVisible(self, value: bool) -> None:
            self._is_visible = value

        @property
        def ItemText(self) -> str:
            """
            text of the menu item
            """
            return self._item_text
        
        @ItemText.setter
        def ItemText(self, value: str) -> None:
            self._item_text = value

        @property
        def PreItemID(self) -> int:
            """
            unique ID of the item directly above this menu item, used for fuzzy placement
            """
            return self._pre_item_id
        
        @PreItemID.setter
        def PreItemID(self, value: int) -> None:
            self._pre_item_id = value

if not typing.TYPE_CHECKING and _DYNAMIC:
    def _dynamic_struct() -> None:
        # Dynamically create uno struct using uno
        global MenuMultipleChange
        order = ('GroupID', 'ID', 'Image', 'IsActive', 'IsCheckable', 'IsChecked', 'IsVisible', 'ItemText', 'PreItemID')

        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('com.sun.star.mozilla.MenuMultipleChange')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        MenuMultipleChange = _struct_init

    _dynamic_struct()

__all__ = ['MenuMultipleChange']
