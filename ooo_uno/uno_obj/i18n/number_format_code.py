# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.i18n
# Libre Office Version: 7.2
import typing
from ooo_uno.oenv import UNO_ENVIRONMENT, UNO_RUNTIME
_DYNAMIC = False
if (not typing.TYPE_CHECKING) and UNO_RUNTIME and UNO_ENVIRONMENT:
    _DYNAMIC = True
    from ooo_uno.helper import uno_helper

if typing.TYPE_CHECKING or _DYNAMIC is False:


    class NumberFormatCode(object):
        """
        Struct Class

        Number format code information returned by various XNumberFormatCode methods.

        See Also:
            `API NumberFormatCode <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1i18n_1_1NumberFormatCode.html>`_


        Note:
            | At runtime NumberFormatCode will be an actual uno struct however can seamlessly be treated as a regualr class.
            | At design time a class is presumed. This allows for better typings.
            | NumberFormatCode is a callable and can be treatead as a class and create instances.
        """

        def __init__(self, Code: typing.Optional[str] = None, Default: typing.Optional[bool] = None, DefaultName: typing.Optional[str] = None, Index: typing.Optional[int] = None, NameID: typing.Optional[str] = None, Type: typing.Optional[int] = None, Usage: typing.Optional[int] = None):
            self._code = Code
            self._default = Default
            self._default_name = DefaultName
            self._index = Index
            self._name_id = NameID
            self._type = Type
            self._usage = Usage

        @property
        def Code(self) -> str:
            """
            Format code, for example, \"YYYY-MM-DD\".
            """
            return self._code
        
        @Code.setter
        def Code(self, value: str) -> None:
            self._code = value

        @property
        def Default(self) -> bool:
            """
            If this format is the default format of the Usage group.
            """
            return self._default
        
        @Default.setter
        def Default(self, value: bool) -> None:
            self._default = value

        @property
        def DefaultName(self) -> str:
            """
            Descriptive name of the format for this locale.
            """
            return self._default_name
        
        @DefaultName.setter
        def DefaultName(self, value: str) -> None:
            self._default_name = value

        @property
        def Index(self) -> int:
            """
            Index of the code as defined in NumberFormatIndex.
            """
            return self._index
        
        @Index.setter
        def Index(self, value: int) -> None:
            self._index = value

        @property
        def NameID(self) -> str:
            """
            Message identifier to be used if the name of the format is localized.
            """
            return self._name_id
        
        @NameID.setter
        def NameID(self, value: str) -> None:
            self._name_id = value

        @property
        def Type(self) -> int:
            """
            One of KNumberFormatType values.
            """
            return self._type
        
        @Type.setter
        def Type(self, value: int) -> None:
            self._type = value

        @property
        def Usage(self) -> int:
            """
            One of KNumberFormatUsage values.
            """
            return self._usage
        
        @Usage.setter
        def Usage(self, value: int) -> None:
            self._usage = value

if not typing.TYPE_CHECKING and _DYNAMIC:
    def _dynamic_struct() -> None:
        # Dynamically create uno struct using uno
        global NumberFormatCode
        order = ('Code', 'Default', 'DefaultName', 'Index', 'NameID', 'Type', 'Usage')

        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('com.sun.star.i18n.NumberFormatCode')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        NumberFormatCode = _struct_init

    _dynamic_struct()

__all__ = ['NumberFormatCode']
