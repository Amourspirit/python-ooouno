# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.sheet
# Libre Office Version: 7.2
import os
import typing
from ooo_uno.oenv import UNO_ENVIRONMENT
if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
    from ooo_uno.helper import uno_helper


class DataPilotTableHeaderData(object):
    """
    Struct Class

    information about a cell within the column or row header area of a DataPilot table.
    
    This struct contains information about a particular cell located within the column or row header area of a DataPilot table. This is the type that is contained in DataPilotTablePositionData.PositionData when the value of DataPilotTablePositionData.PositionType is either DataPilotTablePositionType.ROW_HEADER or DataPilotTablePositionType.COLUMN_HEADER.
    
    **since**
    
        OOo 3.0

    See Also:
        `API DataPilotTableHeaderData <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1sheet_1_1DataPilotTableHeaderData.html>`_


    Note:
        | At runtime DataPilotTableHeaderData will be an actual uno struct however can seamlessly be treated as a regualr class.
        | At design time a class is presumed. This allows for better typings.
        | DataPilotTableHeaderData is a callable and can be treatead as a class and create instances.
    """

    def __init__(self, Dimension: typing.Optional[int] = None, Flags: typing.Optional[int] = None, Hierarchy: typing.Optional[int] = None, Level: typing.Optional[int] = None, MemberName: typing.Optional[str] = None):
        self._dimension = Dimension
        self._flags = Flags
        self._hierarchy = Hierarchy
        self._level = Level
        self._member_name = MemberName

    @property
    def Dimension(self) -> int:
        """
        number of dimensions
        """
        return self._dimension
    
    @Dimension.setter
    def Dimension(self, value: int) -> None:
        self._dimension = value

    @property
    def Flags(self) -> int:
        """
        flag
        """
        return self._flags
    
    @Flags.setter
    def Flags(self, value: int) -> None:
        self._flags = value

    @property
    def Hierarchy(self) -> int:
        """
        hierarchy
        """
        return self._hierarchy
    
    @Hierarchy.setter
    def Hierarchy(self, value: int) -> None:
        self._hierarchy = value

    @property
    def Level(self) -> int:
        """
        level
        """
        return self._level
    
    @Level.setter
    def Level(self, value: int) -> None:
        self._level = value

    @property
    def MemberName(self) -> str:
        """
        member name
        """
        return self._member_name
    
    @MemberName.setter
    def MemberName(self, value: str) -> None:
        self._member_name = value

def _dynamic_struct() -> None:
    # Dynamically create uno struct using uno
    global DataPilotTableHeaderData
    ignore = os.environ.get('ooouno_ignore_runtime', 'False')
    if ignore == 'True':
        return
    if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
        order = ('Dimension', 'Flags', 'Hierarchy', 'Level', 'MemberName')
        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('com.sun.star.sheet.DataPilotTableHeaderData')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        DataPilotTableHeaderData = _struct_init

if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
    _dynamic_struct()

__all__ = ['DataPilotTableHeaderData']
