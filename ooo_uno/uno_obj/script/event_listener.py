# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.script
# Libre Office Version: 7.2
import os
import typing
if typing.TYPE_CHECKING:
    from .x_all_listener import XAllListener as XAllListener_c91b0c54
from ooo_uno.oenv import UNO_ENVIRONMENT
if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
    from ooo_uno.helper import uno_helper


class EventListener(object):
    """
    Struct Class


    See Also:
        `API EventListener <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1script_1_1EventListener.html>`_


    Note:
        | At runtime EventListener will be an actual uno struct however can seamlessly be treated as a regualr class.
        | At design time a class is presumed. This allows for better typings.
        | EventListener is a callable and can be treatead as a class and create instances.
    """

    def __init__(self, AddListenerParam: typing.Optional[str] = None, AllListener: 'typing.Optional[XAllListener_c91b0c54]' = None, EventMethod: typing.Optional[str] = None, Helper: typing.Optional[object] = None, ListenerType: typing.Optional[str] = None):
        self._add_listener_param = AddListenerParam
        self._all_listener = AllListener
        self._event_method = EventMethod
        self._helper = Helper
        self._listener_type = ListenerType

    @property
    def AddListenerParam(self) -> str:
        return self._add_listener_param
    
    @AddListenerParam.setter
    def AddListenerParam(self, value: str) -> None:
        self._add_listener_param = value

    @property
    def AllListener(self) -> 'XAllListener_c91b0c54':
        return self._all_listener
    
    @AllListener.setter
    def AllListener(self, value: 'XAllListener_c91b0c54') -> None:
        self._all_listener = value

    @property
    def EventMethod(self) -> str:
        return self._event_method
    
    @EventMethod.setter
    def EventMethod(self, value: str) -> None:
        self._event_method = value

    @property
    def Helper(self) -> object:
        return self._helper
    
    @Helper.setter
    def Helper(self, value: object) -> None:
        self._helper = value

    @property
    def ListenerType(self) -> str:
        return self._listener_type
    
    @ListenerType.setter
    def ListenerType(self, value: str) -> None:
        self._listener_type = value

def _dynamic_struct() -> None:
    # Dynamically create uno struct using uno
    global EventListener
    ignore = os.environ.get('ooouno_ignore_runtime', 'False')
    if ignore == 'True':
        return
    if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
        order = ('AddListenerParam', 'AllListener', 'EventMethod', 'Helper', 'ListenerType')
        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('com.sun.star.script.EventListener')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        EventListener = _struct_init

if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
    _dynamic_struct()

__all__ = ['EventListener']
