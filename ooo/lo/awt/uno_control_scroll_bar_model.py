# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Service Class
# this is a auto generated file generated by Cheetah
# Libre Office Version: 7.3
# Namespace: com.sun.star.awt
import typing
from abc import abstractproperty
from .uno_control_model import UnoControlModel as UnoControlModel_c8ce0c58
if typing.TYPE_CHECKING:
    from ..util.color import Color as Color_68e908c5

class UnoControlScrollBarModel(UnoControlModel_c8ce0c58):
    """
    Service Class

    specifies the standard model of a UnoControlScrollBar.
    
    **since**
    
        OOo 2.0

    See Also:
        `API UnoControlScrollBarModel <https://api.libreoffice.org/docs/idl/ref/servicecom_1_1sun_1_1star_1_1awt_1_1UnoControlScrollBarModel.html>`_
    """
    __ooo_ns__: str = 'com.sun.star.awt'
    __ooo_full_ns__: str = 'com.sun.star.awt.UnoControlScrollBarModel'
    __ooo_type_name__: str = 'service'

    @abstractproperty
    def BackgroundColor(self) -> 'Color_68e908c5':
        """
        specifies the RGB color to be used for the control.
        
        **since**
        
            OOo 2.0
        """
        ...

    @abstractproperty
    def BlockIncrement(self) -> int:
        """
        specifies the increment for a block move.
        """
        ...

    @abstractproperty
    def Border(self) -> int:
        """
        specifies the border style of the control.
        """
        ...

    @abstractproperty
    def BorderColor(self) -> int:
        """
        specifies the color of the border, if present
        
        Not every border style (see Border) may support coloring. For instance, usually a border with 3D effect will ignore the BorderColor setting.
        
        **since**
        
            OOo 2.0
        """
        ...

    @abstractproperty
    def Enabled(self) -> bool:
        """
        determines whether the control is enabled or disabled.
        """
        ...

    @abstractproperty
    def HelpText(self) -> str:
        """
        specifies the help text of the control.
        """
        ...

    @abstractproperty
    def HelpURL(self) -> str:
        """
        specifies the help URL of the control.
        """
        ...

    @abstractproperty
    def LineIncrement(self) -> int:
        """
        specifies the increment for a single line move.
        """
        ...

    @abstractproperty
    def LiveScroll(self) -> bool:
        """
        specifies the scrolling behavior of the control.
        
        TRUE means, that when the user moves the slider in the scroll bar, the content of the window is updated immediately. FALSE means, that the window is only updated after the user has released the mouse button.
        
        **since**
        
            OOo 2.0
        """
        ...

    @abstractproperty
    def Orientation(self) -> int:
        """
        specifies the ScrollBarOrientation of the control.
        """
        ...

    @abstractproperty
    def Printable(self) -> bool:
        """
        specifies that the control will be printed with the document.
        """
        ...

    @abstractproperty
    def RepeatDelay(self) -> int:
        """
        specifies the mouse repeat delay, in milliseconds.
        
        When the user presses a mouse in a control area where this triggers an action (such as scrolling the scrollbar), then usual control implementations allow to repeatedly trigger this action, without the need to release the mouse button and to press it again. The delay between two such triggers is specified with this property.
        
        **since**
        
            OOo 2.0
        """
        ...

    @abstractproperty
    def ScrollValue(self) -> int:
        """
        specifies the scroll value of the control.
        """
        ...

    @abstractproperty
    def ScrollValueMax(self) -> int:
        """
        specifies the maximum scroll value of the control.
        """
        ...

    @abstractproperty
    def ScrollValueMin(self) -> int:
        """
        specifies the minimum scroll value of the control.
        
        If this optional property is not present, clients of the component should assume a minimal scroll value of 0.
        """
        ...

    @abstractproperty
    def SymbolColor(self) -> 'Color_68e908c5':
        """
        specifies the RGB color to be used when painting symbols which are part of the control's appearance, such as the arrow buttons.
        
        **since**
        
            OOo 2.0
        """
        ...

    @abstractproperty
    def Tabstop(self) -> bool:
        """
        specifies that the control can be reached with the TAB key.
        
        **since**
        
            OOo 2.0
        """
        ...

    @abstractproperty
    def VisibleSize(self) -> int:
        """
        specifies the visible size of the scroll bar.
        """
        ...



__all__ = ['UnoControlScrollBarModel']

