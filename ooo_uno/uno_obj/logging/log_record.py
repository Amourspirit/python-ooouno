# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.logging
# Libre Office Version: 7.2
import typing
if typing.TYPE_CHECKING:
    from ..util.date_time import DateTime as DateTime_84de09d3
from ooo_uno.oenv import UNO_ENVIRONMENT, UNO_RUNTIME
_DYNAMIC = False
if (not typing.TYPE_CHECKING) and UNO_RUNTIME and UNO_ENVIRONMENT:
    _DYNAMIC = True
    from ooo_uno.helper import uno_helper

if typing.TYPE_CHECKING or _DYNAMIC is False:


    class LogRecord(object):
        """
        Struct Class

        assembles the complete information about a to-be-logged event
        
        **since**
        
            OOo 2.3

        See Also:
            `API LogRecord <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1logging_1_1LogRecord.html>`_


        Note:
            | At runtime LogRecord will be an actual uno struct however can seamlessly be treated as a regualr class.
            | At design time a class is presumed. This allows for better typings.
            | LogRecord is a callable and can be treatead as a class and create instances.
        """

        def __init__(self, Level: typing.Optional[int] = None, LogTime: 'typing.Optional[DateTime_84de09d3]' = None, LoggerName: typing.Optional[str] = None, Message: typing.Optional[str] = None, SequenceNumber: typing.Optional[int] = None, SourceClassName: typing.Optional[str] = None, SourceMethodName: typing.Optional[str] = None, ThreadID: typing.Optional[str] = None):
            self._level = Level
            self._log_time = LogTime
            self._logger_name = LoggerName
            self._message = Message
            self._sequence_number = SequenceNumber
            self._source_class_name = SourceClassName
            self._source_method_name = SourceMethodName
            self._thread_id = ThreadID

        @property
        def Level(self) -> int:
            """
            specifies the level of the log event
            """
            return self._level
        
        @Level.setter
        def Level(self, value: int) -> None:
            self._level = value

        @property
        def LogTime(self) -> 'DateTime_84de09d3':
            """
            specifies the time at which the event was logged
            """
            return self._log_time
        
        @LogTime.setter
        def LogTime(self, value: 'DateTime_84de09d3') -> None:
            self._log_time = value

        @property
        def LoggerName(self) -> str:
            """
            specifies the name of the logger at which the record is logged
            """
            return self._logger_name
        
        @LoggerName.setter
        def LoggerName(self, value: str) -> None:
            self._logger_name = value

        @property
        def Message(self) -> str:
            """
            specifies the to-be-logged message
            """
            return self._message
        
        @Message.setter
        def Message(self, value: str) -> None:
            self._message = value

        @property
        def SequenceNumber(self) -> int:
            """
            specifies the number of the log event.
            
            Subsequent events get assigned increasing sequence numbers by the XLogger at which they're logged.
            """
            return self._sequence_number
        
        @SequenceNumber.setter
        def SequenceNumber(self, value: int) -> None:
            self._sequence_number = value

        @property
        def SourceClassName(self) -> str:
            """
            specifies the name of the class, in which the record was logged.
            
            This name might be empty, in case the caller to one of the various log methods of XLogger did not specify it.
            """
            return self._source_class_name
        
        @SourceClassName.setter
        def SourceClassName(self, value: str) -> None:
            self._source_class_name = value

        @property
        def SourceMethodName(self) -> str:
            """
            specifies the name of the method, in which the record was logged.
            
            This name might be empty, in case the caller to one of the various log methods of XLogger did not specify it.
            """
            return self._source_method_name
        
        @SourceMethodName.setter
        def SourceMethodName(self, value: str) -> None:
            self._source_method_name = value

        @property
        def ThreadID(self) -> str:
            """
            specifies the ID of the thread in which the event was logged
            """
            return self._thread_id
        
        @ThreadID.setter
        def ThreadID(self, value: str) -> None:
            self._thread_id = value

if not typing.TYPE_CHECKING and _DYNAMIC:
    def _dynamic_struct() -> None:
        # Dynamically create uno struct using uno
        global LogRecord
        order = ('Level', 'LogTime', 'LoggerName', 'Message', 'SequenceNumber', 'SourceClassName', 'SourceMethodName', 'ThreadID')

        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('com.sun.star.logging.LogRecord')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        LogRecord = _struct_init

    _dynamic_struct()

__all__ = ['LogRecord']
