# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.datatransfer.dnd
# Libre Office Version: 7.2
from .drop_target_event import DropTargetEvent as DropTargetEvent_8d651169
import typing
if typing.TYPE_CHECKING:
    from .x_drop_target_drag_context import XDropTargetDragContext as XDropTargetDragContext_10221422


class DropTargetDragEvent(DropTargetEvent_8d651169):
    """
    Struct Class

    The DropTargetDragEvent is delivered from the drop target to the currently registered drop target listener.
    
    It contains information regarding the current state of the operation to enable the operations initiator to provide the end user with the appropriate drag over feedback.

    See Also:
        `API DropTargetDragEvent <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1datatransfer_1_1dnd_1_1DropTargetDragEvent.html>`_
    """
    __ooo_ns__: str = 'com.sun.star.datatransfer.dnd'
    __ooo_full_ns__: str = 'com.sun.star.datatransfer.dnd.DropTargetDragEvent'
    __ooo_type_name__: str = 'struct'
    typeName: str = 'com.sun.star.datatransfer.dnd.DropTargetDragEvent'
    """Literal Constant ``com.sun.star.datatransfer.dnd.DropTargetDragEvent``"""

    def __init__(self, *args, **kwargs):
        """
        Constructor

        Other Arguments:
            First positinal arg can be another ``DropTargetDragEvent`` instance,
                if it is the only argument passed to contructor;
                Otherwise, postitional arguments are treated as ``DropTargetDragEvent``
                values. Following the order of ``Keyword Arguments``.

        Keyword Arguments:
            Context (XDropTargetDragContext, optional): Context value
            DropAction (int, optional): DropAction value
            LocationX (int, optional): LocationX value
            LocationY (int, optional): LocationY value
            SourceActions (int, optional): SourceActions value
        """
        self._context = None
        self._drop_action = None
        self._location_x = None
        self._location_y = None
        self._source_actions = None

        key_order = ('Context', 'DropAction', 'LocationX', 'LocationY', 'SourceActions')
        arg_len = len(args)
        if arg_len == 1:
            if isinstance(args[0], DropTargetDragEvent):
                oth = args[0]
                for key in key_order:
                    setattr(self, key, getattr(oth, key))
                return

        if  arg_len > len(key_order):
            raise ValueError("DropTargetDragEvent.__init__() To many parameters")
        for i, arg in enumerate(args):
            setattr(self, key_order[i], arg)
        for k, v in kwargs.items():
            if k in key_order:
                setattr(self, k, v)


    @property
    def Context(self) -> 'XDropTargetDragContext_10221422':
        """
        The drop target context of the current drag operation.
        """
        return self._context
    
    @Context.setter
    def Context(self, value: 'XDropTargetDragContext_10221422') -> None:
        self._context = value

    @property
    def DropAction(self) -> int:
        """
        This value represents the currently selected drop action.
        """
        return self._drop_action
    
    @DropAction.setter
    def DropAction(self, value: int) -> None:
        self._drop_action = value

    @property
    def LocationX(self) -> int:
        """
        The cursor's current x location within the window's coordinates.
        """
        return self._location_x
    
    @LocationX.setter
    def LocationX(self, value: int) -> None:
        self._location_x = value

    @property
    def LocationY(self) -> int:
        """
        The cursor's current y location within the window's coordinates.
        """
        return self._location_y
    
    @LocationY.setter
    def LocationY(self, value: int) -> None:
        self._location_y = value

    @property
    def SourceActions(self) -> int:
        """
        This value represents the action or actions supported by the source.
        
        This may be a combination of arbitrary source actions except ACTION_DEFAULT.
        
        To combine different actions use a logical OR.
        """
        return self._source_actions
    
    @SourceActions.setter
    def SourceActions(self, value: int) -> None:
        self._source_actions = value


__all__ = ['DropTargetDragEvent']
