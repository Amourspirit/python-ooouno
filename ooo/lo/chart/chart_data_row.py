# coding: utf-8
#
# Copyright 2023 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.chart
# Libre Office Version: 7.4
from ooo.oenv.env_const import UNO_NONE
import typing
from .chart_data_value import ChartDataValue as ChartDataValue_d3310c83


class ChartDataRow(object):
    """
    Struct Class

    describes a single data row, specified by its name and a sequence of data points.
    
    This struct is currently used nowhere.
    
    .. deprecated::
    
        Class is deprecated.

    See Also:
        `API ChartDataRow <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1chart_1_1ChartDataRow.html>`_
    """
    __ooo_ns__: str = 'com.sun.star.chart'
    __ooo_full_ns__: str = 'com.sun.star.chart.ChartDataRow'
    __ooo_type_name__: str = 'struct'
    typeName: str = 'com.sun.star.chart.ChartDataRow'
    """Literal Constant ``com.sun.star.chart.ChartDataRow``"""

    def __init__(self, Points: typing.Optional[typing.Tuple[typing.Tuple[ChartDataValue_d3310c83, ...], ...]] = (), Name: typing.Optional[str] = '') -> None:
        """
        Constructor

        Arguments:
            Points (typing.Tuple[typing.Tuple[ChartDataValue, ...], ...], optional): Points value.
            Name (str, optional): Name value.
        """
        super().__init__()

        if isinstance(Points, ChartDataRow):
            oth: ChartDataRow = Points
            self.Points = oth.Points
            self.Name = oth.Name
            return

        kargs = {
            "Points": Points,
            "Name": Name,
        }
        self._init(**kargs)

    def _init(self, **kwargs) -> None:
        self._points = kwargs["Points"]
        self._name = kwargs["Name"]


    @property
    def Points(self) -> typing.Tuple[typing.Tuple[ChartDataValue_d3310c83, ...], ...]:
        """
        The points contained in this data row.
        """
        return self._points

    @Points.setter
    def Points(self, value: typing.Tuple[typing.Tuple[ChartDataValue_d3310c83, ...], ...]) -> None:
        self._points = value

    @property
    def Name(self) -> str:
        """
        The name of the data row.
        """
        return self._name

    @Name.setter
    def Name(self, value: str) -> None:
        self._name = value


__all__ = ['ChartDataRow']
