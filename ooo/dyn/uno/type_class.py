# coding: utf-8
#
# Copyright 2023 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Enum Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.uno
# Libre Office Version: 7.4
from __future__ import annotations
import uno
from typing import TYPE_CHECKING


if TYPE_CHECKING:

    class TypeClass(uno.Enum):
        """
        Enum Class


        See Also:
            `API TypeClass <https://api.libreoffice.org/docs/idl/ref/namespacecom_1_1sun_1_1star_1_1uno.html#a00683ed3ec24b47c36ead10a20d6f328>`_
        """
        __ooo_ns__: str = ...
        __ooo_full_ns__: str = ...
        __ooo_type_name__: str = ...

        @property
        def typeName(self) -> str:
            ...

        ANY: TypeClass = ...
        """
        reflecting the any type; anys can carry any UNO value except of any values
        """
        ARRAY: TypeClass = ...
        """
        Deprecated, UNOIDL does not have an array concept.
        """
        BOOLEAN: TypeClass = ...
        """
        reflecting the boolean type; true and false
        """
        BYTE: TypeClass = ...
        """
        reflecting the 8-bit ordinal type
        """
        CHAR: TypeClass = ...
        """
        reflecting the 16-bit unicode character type
        """
        CONSTANT: TypeClass = ...
        """
        reflecting constants
        """
        CONSTANTS: TypeClass = ...
        """
        reflecting constants groups
        """
        DOUBLE: TypeClass = ...
        """
        reflecting the 64-bit floating point type
        """
        ENUM: TypeClass = ...
        """
        reflecting enum types
        """
        EXCEPTION: TypeClass = ...
        """
        reflecting exception types
        """
        FLOAT: TypeClass = ...
        """
        reflecting the 32-bit floating point type
        """
        HYPER: TypeClass = ...
        """
        reflecting the signed 64-bit ordinal type
        """
        INTERFACE: TypeClass = ...
        """
        reflecting interface types
        """
        INTERFACE_ATTRIBUTE: TypeClass = ...
        """
        reflecting interface attributes
        """
        INTERFACE_METHOD: TypeClass = ...
        """
        reflecting interface methods
        """
        LONG: TypeClass = ...
        """
        reflecting the signed 32-bit ordinal type
        """
        MODULE: TypeClass = ...
        """
        reflecting modules
        """
        PROPERTY: TypeClass = ...
        """
        reflecting properties
        """
        SEQUENCE: TypeClass = ...
        """
        reflecting sequence types
        """
        SERVICE: TypeClass = ...
        """
        reflecting services
        """
        SHORT: TypeClass = ...
        """
        reflecting the signed 16-bit ordinal type
        """
        SINGLETON: TypeClass = ...
        """
        reflecting singletons
        """
        STRING: TypeClass = ...
        """
        reflecting the string type; strings of unicode characters
        """
        STRUCT: TypeClass = ...
        """
        reflecting compound types
        """
        TYPE: TypeClass = ...
        """
        reflecting the meta type
        """
        TYPEDEF: TypeClass = ...
        """
        reflecting typedefed types referencing other types
        """
        UNION: TypeClass = ...
        """
        Deprecated, UNOIDL does not have a union concept.
        """
        UNKNOWN: TypeClass = ...
        """
        reflecting the unreflectable type
        """
        UNSIGNED_HYPER: TypeClass = ...
        """
        reflecting the unsigned 64-bit ordinal type
        """
        UNSIGNED_LONG: TypeClass = ...
        """
        reflecting the unsigned 32-bit type
        """
        UNSIGNED_SHORT: TypeClass = ...
        """
        reflecting the unsigned 16-bit ordinal type
        """
        VOID: TypeClass = ...
        """
        reflecting the void type; denotes no type
        """

else:

    from ooo.helper.enum_helper import UnoEnumMeta
    class TypeClass(metaclass=UnoEnumMeta, type_name="com.sun.star.uno.TypeClass", name_space="com.sun.star.uno"):
        """Dynamically created class that represents ``com.sun.star.uno.TypeClass`` Enum. Class loosely mimics Enum"""
        pass

__all__ = ['TypeClass']

