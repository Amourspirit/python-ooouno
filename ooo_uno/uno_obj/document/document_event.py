# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.document
# Libre Office Version: 7.2
from ..lang.event_object import EventObject as EventObject_a3d70b03
import typing
if typing.TYPE_CHECKING:
    from ..frame.x_controller2 import XController2 as XController2_bbcf0bc1
from ooo_uno.oenv import UNO_ENVIRONMENT, UNO_RUNTIME
_DYNAMIC = False
if (not typing.TYPE_CHECKING) and UNO_RUNTIME and UNO_ENVIRONMENT:
    _DYNAMIC = True
    from ooo_uno.helper import uno_helper

if typing.TYPE_CHECKING or _DYNAMIC is False:


    class DocumentEvent(EventObject_a3d70b03):
        """
        Struct Class

        describes an event happening in an OfficeDocument
        
        The com.sun.star.lang.EventObject.Source member of the base type refers to the document which broadcasts the event.
        
        This type is the successor of the EventObject type, which should not be used anymore.
        
        **since**
        
            OOo 3.1

        See Also:
            `API DocumentEvent <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1document_1_1DocumentEvent.html>`_


        Note:
            | At runtime DocumentEvent will be an actual uno struct however can seamlessly be treated as a regualr class.
            | At design time a class is presumed. This allows for better typings.
            | DocumentEvent is a callable and can be treatead as a class and create instances.
        """

        def __init__(self, EventName: typing.Optional[str] = None, Supplement: typing.Optional[object] = None, ViewController: 'typing.Optional[XController2_bbcf0bc1]' = None):
            self._event_name = EventName
            self._supplement = Supplement
            self._view_controller = ViewController

        @property
        def EventName(self) -> str:
            """
            specifies the name of the event.
            
            It's the responsibility of the component supporting the XDocumentEventBroadcaster interface to specify which events it supports.
            """
            return self._event_name
        
        @EventName.setter
        def EventName(self, value: str) -> None:
            self._event_name = value

        @property
        def Supplement(self) -> object:
            """
            contains supplemental information about the event which is being notified
            
            The semantics of this additional information needs to be specified by the broadcaster of the event.
            """
            return self._supplement
        
        @Supplement.setter
        def Supplement(self, value: object) -> None:
            self._supplement = value

        @property
        def ViewController(self) -> 'XController2_bbcf0bc1':
            """
            denotes the view respectively controller which the event applies to.
            
            Might be NULL if the event is not related to a concrete view of the document.
            """
            return self._view_controller
        
        @ViewController.setter
        def ViewController(self, value: 'XController2_bbcf0bc1') -> None:
            self._view_controller = value

if not typing.TYPE_CHECKING and _DYNAMIC:
    def _dynamic_struct() -> None:
        # Dynamically create uno struct using uno
        global DocumentEvent
        order = ('EventName', 'Supplement', 'ViewController')

        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('com.sun.star.document.DocumentEvent')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        DocumentEvent = _struct_init

    _dynamic_struct()

__all__ = ['DocumentEvent']
