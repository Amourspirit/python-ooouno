# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.i18n
# Libre Office Version: 7.2
import os
import typing
from ooo_uno.oenv import UNO_ENVIRONMENT
if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
    from ooo_uno.helper import uno_helper


class ParseResult(object):
    """
    Struct Class

    Parser results returned by XCharacterClassification.parseAnyToken() and XCharacterClassification.parsePredefinedToken().

    See Also:
        `API ParseResult <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1i18n_1_1ParseResult.html>`_


    Note:
        | At runtime ParseResult will be an actual uno struct however can seamlessly be treated as a regualr class.
        | At design time a class is presumed. This allows for better typings.
        | ParseResult is a callable and can be treatead as a class and create instances.
    """

    def __init__(self, CharLen: typing.Optional[int] = None, ContFlags: typing.Optional[int] = None, DequotedNameOrString: typing.Optional[str] = None, EndPos: typing.Optional[int] = None, LeadingWhiteSpace: typing.Optional[int] = None, StartFlags: typing.Optional[int] = None, TokenType: typing.Optional[int] = None, Value: typing.Optional[float] = None):
        self._char_len = CharLen
        self._cont_flags = ContFlags
        self._dequoted_name_or_string = DequotedNameOrString
        self._end_pos = EndPos
        self._leading_white_space = LeadingWhiteSpace
        self._start_flags = StartFlags
        self._token_type = TokenType
        self._value = Value

    @property
    def CharLen(self) -> int:
        """
        Number of code points (not UTF-16 code units) of the parsed token, not including leading whitespace.
        """
        return self._char_len
    
    @CharLen.setter
    def CharLen(self, value: int) -> None:
        self._char_len = value

    @property
    def ContFlags(self) -> int:
        """
        KParseTokens flags of remaining characters of actual token matched.
        """
        return self._cont_flags
    
    @ContFlags.setter
    def ContFlags(self, value: int) -> None:
        self._cont_flags = value

    @property
    def DequotedNameOrString(self) -> str:
        """
        If a quoted name or string is encountered the dequoted result goes here.
        """
        return self._dequoted_name_or_string
    
    @DequotedNameOrString.setter
    def DequotedNameOrString(self, value: str) -> None:
        self._dequoted_name_or_string = value

    @property
    def EndPos(self) -> int:
        """
        UTF-16 code unit index of first unprocessed character.
        """
        return self._end_pos
    
    @EndPos.setter
    def EndPos(self, value: int) -> None:
        self._end_pos = value

    @property
    def LeadingWhiteSpace(self) -> int:
        """
        Count of ignored leading whitespace, in UTF-16 code units, not Unicode code points.
        """
        return self._leading_white_space
    
    @LeadingWhiteSpace.setter
    def LeadingWhiteSpace(self, value: int) -> None:
        self._leading_white_space = value

    @property
    def StartFlags(self) -> int:
        """
        KParseTokens flags of first character of actual token matched.
        
        If TokenType is a KParseType.SINGLE_QUOTE_NAME or a KParseType.DOUBLE_QUOTE_STRING the first character is the first character inside the quotes, not the quote itself.
        """
        return self._start_flags
    
    @StartFlags.setter
    def StartFlags(self, value: int) -> None:
        self._start_flags = value

    @property
    def TokenType(self) -> int:
        """
        KParseType token type like KParseType.IDENTNAME.
        """
        return self._token_type
    
    @TokenType.setter
    def TokenType(self, value: int) -> None:
        self._token_type = value

    @property
    def Value(self) -> float:
        """
        Value of token in case of numeric.
        """
        return self._value
    
    @Value.setter
    def Value(self, value: float) -> None:
        self._value = value

def _dynamic_struct() -> None:
    # Dynamically create uno struct using uno
    global ParseResult
    ignore = os.environ.get('ooouno_ignore_runtime', 'False')
    if ignore == 'True':
        return
    if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
        order = ('CharLen', 'ContFlags', 'DequotedNameOrString', 'EndPos', 'LeadingWhiteSpace', 'StartFlags', 'TokenType', 'Value')
        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('com.sun.star.i18n.ParseResult')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        ParseResult = _struct_init

if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
    _dynamic_struct()

__all__ = ['ParseResult']
