# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Enum Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.drawing
# Libre Office Version: 7.2
import os
from typing import TYPE_CHECKING
from enum import Enum
from ooo_uno.oenv import UNO_ENVIRONMENT
if (not TYPE_CHECKING) and UNO_ENVIRONMENT:
    from ooo_uno.helper.enum_helper import uno_enum_class_new
    from com.sun.star.drawing.ColorMode import (GREYS, MONO, STANDARD, WATERMARK)


class ColorMode(Enum):
    """
    

    See Also:
        `API ColorMode <https://api.libreoffice.org/docs/idl/ref/namespacecom_1_1sun_1_1star_1_1drawing.html#a0e887cb85702e0dccbf34d7dbe40443f>`_
    """
    GREYS = 'GREYS'
    """
    the graphic is rendered in grayscale on the output device,
    """
    MONO = 'MONO'
    """
    the graphic is rendered in black and white only,
    """
    STANDARD = 'STANDARD'
    """
    the graphic is rendered in the default color style of the output device,
    
    use the length measurement.
    
    the connector is drawn with three lines, with the middle line perpendicular to the other two
    """
    WATERMARK = 'WATERMARK'
    """
    the graphic is rendered in a watermark like style,
    """

def _dynamic_enum():
    # Dynamically create class that actually contains UNO enum instances

    global ColorMode
    ignore = os.environ.get('ooouno_ignore_runtime', 'False')
    if ignore == 'True':
        return
    # if statment is to stop VS Code from reporting errors
    if (not TYPE_CHECKING) and UNO_ENVIRONMENT:

        _dict = {
            "GREYS": GREYS,
            "MONO": MONO,
            "STANDARD": STANDARD,
            "WATERMARK": WATERMARK,
        }
        ColorMode = type('ColorMode', (object,), {
            '__doc__': 'class created dynamically. Class loosly mimics Enum',
            "__new__": uno_enum_class_new
        })
        for k, v in _dict.items():
            setattr(ColorMode, k, v)

if UNO_ENVIRONMENT:
    _dynamic_enum()

__all__ = ['ColorMode']

