# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.packages.zip
# Libre Office Version: 7.2
import os
import typing
from ooo_uno.oenv import UNO_ENVIRONMENT
if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
    from ooo_uno.helper import uno_helper


class ZipEntry(object):
    """
    Struct Class

    used to represent a ZIP file entry
    
    This interface is an IDL version of the Java interface java.util.zip.ZipFile with some minor adaptations.

    See Also:
        `API ZipEntry <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1packages_1_1zip_1_1ZipEntry.html>`_


    Note:
        | At runtime ZipEntry will be an actual uno struct however can seamlessly be treated as a regualr class.
        | At design time a class is presumed. This allows for better typings.
        | ZipEntry is a callable and can be treatead as a class and create instances.
    """

    def __init__(self, extra: 'typing.Optional[typing.List[int]]' = None, nCompressedSize: typing.Optional[int] = None, nCrc: typing.Optional[int] = None, nDiskNumber: typing.Optional[int] = None, nFlag: typing.Optional[int] = None, nMethod: typing.Optional[int] = None, nOffset: typing.Optional[int] = None, nSize: typing.Optional[int] = None, nTime: typing.Optional[int] = None, nVersion: typing.Optional[int] = None, sComment: typing.Optional[str] = None, sName: typing.Optional[str] = None):
        self._extra = extra
        self._n_compressed_size = nCompressedSize
        self._n_crc = nCrc
        self._n_disk_number = nDiskNumber
        self._n_flag = nFlag
        self._n_method = nMethod
        self._n_offset = nOffset
        self._n_size = nSize
        self._n_time = nTime
        self._n_version = nVersion
        self._s_comment = sComment
        self._s_name = sName

    @property
    def extra(self) -> 'typing.List[int]':
        """
        optional extra field data for entry
        """
        return self._extra
    
    @extra.setter
    def extra(self, value: 'typing.List[int]') -> None:
        self._extra = value

    @property
    def nCompressedSize(self) -> int:
        """
        uncompressed size of entry data
        """
        return self._n_compressed_size
    
    @nCompressedSize.setter
    def nCompressedSize(self, value: int) -> None:
        self._n_compressed_size = value

    @property
    def nCrc(self) -> int:
        """
        CRC-32 of entry data.
        """
        return self._n_crc
    
    @nCrc.setter
    def nCrc(self, value: int) -> None:
        self._n_crc = value

    @property
    def nDiskNumber(self) -> int:
        """
        The number of the disk this entry is saved on.
        """
        return self._n_disk_number
    
    @nDiskNumber.setter
    def nDiskNumber(self, value: int) -> None:
        self._n_disk_number = value

    @property
    def nFlag(self) -> int:
        """
        bit flags
        """
        return self._n_flag
    
    @nFlag.setter
    def nFlag(self, value: int) -> None:
        self._n_flag = value

    @property
    def nMethod(self) -> int:
        """
        compression method
        """
        return self._n_method
    
    @nMethod.setter
    def nMethod(self, value: int) -> None:
        self._n_method = value

    @property
    def nOffset(self) -> int:
        """
        offset of LOC header
        """
        return self._n_offset
    
    @nOffset.setter
    def nOffset(self, value: int) -> None:
        self._n_offset = value

    @property
    def nSize(self) -> int:
        """
        uncompressed size of entry data
        """
        return self._n_size
    
    @nSize.setter
    def nSize(self, value: int) -> None:
        self._n_size = value

    @property
    def nTime(self) -> int:
        """
        modification time
        """
        return self._n_time
    
    @nTime.setter
    def nTime(self, value: int) -> None:
        self._n_time = value

    @property
    def nVersion(self) -> int:
        """
        version needed to extract
        """
        return self._n_version
    
    @nVersion.setter
    def nVersion(self, value: int) -> None:
        self._n_version = value

    @property
    def sComment(self) -> str:
        """
        optional comment
        """
        return self._s_comment
    
    @sComment.setter
    def sComment(self, value: str) -> None:
        self._s_comment = value

    @property
    def sName(self) -> str:
        """
        the entry name
        """
        return self._s_name
    
    @sName.setter
    def sName(self, value: str) -> None:
        self._s_name = value

def _dynamic_struct() -> None:
    # Dynamically create uno struct using uno
    global ZipEntry
    ignore = os.environ.get('ooouno_ignore_runtime', 'False')
    if ignore == 'True':
        return
    if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
        order = ('extra', 'nCompressedSize', 'nCrc', 'nDiskNumber', 'nFlag', 'nMethod', 'nOffset', 'nSize', 'nTime', 'nVersion', 'sComment', 'sName')
        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('com.sun.star.packages.zip.ZipEntry')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        ZipEntry = _struct_init

if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
    _dynamic_struct()

__all__ = ['ZipEntry']
