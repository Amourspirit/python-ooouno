# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.i18n
# Libre Office Version: 7.2
import typing
from ooo_uno.oenv import UNO_ENVIRONMENT, UNO_RUNTIME
_DYNAMIC = False
if (not typing.TYPE_CHECKING) and UNO_RUNTIME and UNO_ENVIRONMENT:
    _DYNAMIC = True
    from ooo_uno.helper import uno_helper

if typing.TYPE_CHECKING or _DYNAMIC is False:


    class ForbiddenCharacters(object):
        """
        Struct Class

        Locale (mostly CJK) dependent characters that are forbidden at the start or end of a line.
        
        Returned by XLocaleData.getForbiddenCharacters() and used with XForbiddenCharacters methods.

        See Also:
            `API ForbiddenCharacters <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1i18n_1_1ForbiddenCharacters.html>`_


        Note:
            | At runtime ForbiddenCharacters will be an actual uno struct however can seamlessly be treated as a regualr class.
            | At design time a class is presumed. This allows for better typings.
            | ForbiddenCharacters is a callable and can be treatead as a class and create instances.
        """

        def __init__(self, beginLine: typing.Optional[str] = None, endLine: typing.Optional[str] = None):
            self._begin_line = beginLine
            self._end_line = endLine

        @property
        def beginLine(self) -> str:
            """
            Characters forbidden at the start of a line.
            """
            return self._begin_line
        
        @beginLine.setter
        def beginLine(self, value: str) -> None:
            self._begin_line = value

        @property
        def endLine(self) -> str:
            """
            Characters forbidden at the end of a line.
            """
            return self._end_line
        
        @endLine.setter
        def endLine(self, value: str) -> None:
            self._end_line = value

if not typing.TYPE_CHECKING and _DYNAMIC:
    def _dynamic_struct() -> None:
        # Dynamically create uno struct using uno
        global ForbiddenCharacters
        order = ('beginLine', 'endLine')

        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('com.sun.star.i18n.ForbiddenCharacters')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        ForbiddenCharacters = _struct_init

    _dynamic_struct()

__all__ = ['ForbiddenCharacters']
