# coding: utf-8
#
# Copyright 2023 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.text
# Libre Office Version: 7.4
from ooo.oenv.env_const import UNO_NONE
import typing


class TextColumn(object):
    """
    Struct Class

    defines a single text column.

    See Also:
        `API TextColumn <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1text_1_1TextColumn.html>`_
    """
    __ooo_ns__: str = 'com.sun.star.text'
    __ooo_full_ns__: str = 'com.sun.star.text.TextColumn'
    __ooo_type_name__: str = 'struct'
    typeName: str = 'com.sun.star.text.TextColumn'
    """Literal Constant ``com.sun.star.text.TextColumn``"""

    def __init__(self, Width: typing.Optional[int] = 0, LeftMargin: typing.Optional[int] = 0, RightMargin: typing.Optional[int] = 0) -> None:
        """
        Constructor

        Arguments:
            Width (int, optional): Width value.
            LeftMargin (int, optional): LeftMargin value.
            RightMargin (int, optional): RightMargin value.
        """
        super().__init__()

        if isinstance(Width, TextColumn):
            oth: TextColumn = Width
            self.Width = oth.Width
            self.LeftMargin = oth.LeftMargin
            self.RightMargin = oth.RightMargin
            return

        kargs = {
            "Width": Width,
            "LeftMargin": LeftMargin,
            "RightMargin": RightMargin,
        }
        self._init(**kargs)

    def _init(self, **kwargs) -> None:
        self._width = kwargs["Width"]
        self._left_margin = kwargs["LeftMargin"]
        self._right_margin = kwargs["RightMargin"]


    @property
    def Width(self) -> int:
        """
        contains the relative width of the column, including both margins.
        
        Width isn't a metric value, it's a relative value to the sum of the width of all columns.
        """
        return self._width

    @Width.setter
    def Width(self, value: int) -> None:
        self._width = value

    @property
    def LeftMargin(self) -> int:
        """
        contains the left margin of the column.
        
        This is a metric value.
        """
        return self._left_margin

    @LeftMargin.setter
    def LeftMargin(self, value: int) -> None:
        self._left_margin = value

    @property
    def RightMargin(self) -> int:
        """
        contains the right margin of the column.
        
        This is a metric value.
        """
        return self._right_margin

    @RightMargin.setter
    def RightMargin(self, value: int) -> None:
        self._right_margin = value


__all__ = ['TextColumn']
