# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.text
# Libre Office Version: 7.2
import os
import typing
if typing.TYPE_CHECKING:
    from ..container.x_string_key_map import XStringKeyMap as XStringKeyMap_ffc60de1
from ooo_uno.oenv import UNO_ENVIRONMENT
if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
    from ooo_uno.helper import uno_helper


class TextMarkupDescriptor(object):
    """
    Struct Class

    A descriptor for a single text markup.
    
    **since**
    
        OOo 3.0.1

    See Also:
        `API TextMarkupDescriptor <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1text_1_1TextMarkupDescriptor.html>`_


    Note:
        | At runtime TextMarkupDescriptor will be an actual uno struct however can seamlessly be treated as a regualr class.
        | At design time a class is presumed. This allows for better typings.
        | TextMarkupDescriptor is a callable and can be treatead as a class and create instances.
    """

    def __init__(self, aIdentifier: typing.Optional[str] = None, nLength: typing.Optional[int] = None, nOffset: typing.Optional[int] = None, nType: typing.Optional[int] = None, xMarkupInfoContainer: 'typing.Optional[XStringKeyMap_ffc60de1]' = None):
        self._a_identifier = aIdentifier
        self._n_length = nLength
        self._n_offset = nOffset
        self._n_type = nType
        self._x_markup_info_container = xMarkupInfoContainer

    @property
    def aIdentifier(self) -> str:
        """
        A string used to identify the caller.
        """
        return self._a_identifier
    
    @aIdentifier.setter
    def aIdentifier(self, value: str) -> None:
        self._a_identifier = value

    @property
    def nLength(self) -> int:
        """
        Length of the markup range.
        """
        return self._n_length
    
    @nLength.setter
    def nLength(self, value: int) -> None:
        self._n_length = value

    @property
    def nOffset(self) -> int:
        """
        Start of the markup range.
        """
        return self._n_offset
    
    @nOffset.setter
    def nOffset(self, value: int) -> None:
        self._n_offset = value

    @property
    def nType(self) -> int:
        """
        Type of text markup see TextMarkupType.
        """
        return self._n_type
    
    @nType.setter
    def nType(self, value: int) -> None:
        self._n_type = value

    @property
    def xMarkupInfoContainer(self) -> 'XStringKeyMap_ffc60de1':
        """
        contains additional information about the markup
        
        Supported properties:
        
        |
        
        **since**
        
            6.3: BOLDWAVE, BOLD | See: com::sun::star::awt::FontUnderline
        """
        return self._x_markup_info_container
    
    @xMarkupInfoContainer.setter
    def xMarkupInfoContainer(self, value: 'XStringKeyMap_ffc60de1') -> None:
        self._x_markup_info_container = value

def _dynamic_struct() -> None:
    # Dynamically create uno struct using uno
    global TextMarkupDescriptor
    ignore = os.environ.get('ooouno_ignore_runtime', 'False')
    if ignore == 'True':
        return
    if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
        order = ('aIdentifier', 'nLength', 'nOffset', 'nType', 'xMarkupInfoContainer')
        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('com.sun.star.text.TextMarkupDescriptor')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        TextMarkupDescriptor = _struct_init

if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
    _dynamic_struct()

__all__ = ['TextMarkupDescriptor']
