# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.i18n
# Libre Office Version: 7.2
import os
import typing
from ooo_uno.oenv import UNO_ENVIRONMENT
if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
    from ooo_uno.helper import uno_helper


class LanguageCountryInfo(object):
    """
    Struct Class

    The language and country identifiers and descriptive names of the loaded locale data returned by XLocaleData.getLanguageCountryInfo().

    See Also:
        `API LanguageCountryInfo <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1i18n_1_1LanguageCountryInfo.html>`_


    Note:
        | At runtime LanguageCountryInfo will be an actual uno struct however can seamlessly be treated as a regualr class.
        | At design time a class is presumed. This allows for better typings.
        | LanguageCountryInfo is a callable and can be treatead as a class and create instances.
    """

    def __init__(self, Country: typing.Optional[str] = None, CountryDefaultName: typing.Optional[str] = None, Language: typing.Optional[str] = None, LanguageDefaultName: typing.Optional[str] = None, Variant: typing.Optional[str] = None):
        self._country = Country
        self._country_default_name = CountryDefaultName
        self._language = Language
        self._language_default_name = LanguageDefaultName
        self._variant = Variant

    @property
    def Country(self) -> str:
        """
        ISO-3166 country code, for example, \"US\" or \"DE\".
        """
        return self._country
    
    @Country.setter
    def Country(self, value: str) -> None:
        self._country = value

    @property
    def CountryDefaultName(self) -> str:
        """
        Descriptive country name, for example, \"United States\" or \"Germany\".
        """
        return self._country_default_name
    
    @CountryDefaultName.setter
    def CountryDefaultName(self, value: str) -> None:
        self._country_default_name = value

    @property
    def Language(self) -> str:
        """
        ISO-639 language code, for example, \"en\" or \"de\".
        """
        return self._language
    
    @Language.setter
    def Language(self, value: str) -> None:
        self._language = value

    @property
    def LanguageDefaultName(self) -> str:
        """
        Descriptive language name, for example, \"English\" or \"German\".
        """
        return self._language_default_name
    
    @LanguageDefaultName.setter
    def LanguageDefaultName(self, value: str) -> None:
        self._language_default_name = value

    @property
    def Variant(self) -> str:
        """
        A variant name.
        """
        return self._variant
    
    @Variant.setter
    def Variant(self, value: str) -> None:
        self._variant = value

def _dynamic_struct() -> None:
    # Dynamically create uno struct using uno
    global LanguageCountryInfo
    ignore = os.environ.get('ooouno_ignore_runtime', 'False')
    if ignore == 'True':
        return
    if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
        order = ('Country', 'CountryDefaultName', 'Language', 'LanguageDefaultName', 'Variant')
        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('com.sun.star.i18n.LanguageCountryInfo')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        LanguageCountryInfo = _struct_init

if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
    _dynamic_struct()

__all__ = ['LanguageCountryInfo']
