# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.awt
# Libre Office Version: 7.2
from ooo.oenv import UNO_NONE
from ..lang.event_object import EventObject as EventObject_a3d70b03
import typing


class ItemEvent(EventObject_a3d70b03):
    """
    Struct Class

    specifies an event occurred to an item of a menu, a list box etc.

    See Also:
        `API ItemEvent <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1awt_1_1ItemEvent.html>`_
    """
    __ooo_ns__: str = 'com.sun.star.awt'
    __ooo_full_ns__: str = 'com.sun.star.awt.ItemEvent'
    __ooo_type_name__: str = 'struct'
    typeName: str = 'com.sun.star.awt.ItemEvent'
    """Literal Constant ``com.sun.star.awt.ItemEvent``"""

    def __init__(self, Selected: int = 0, Highlighted: int = 0, ItemId: int = 0, **kwargs) -> None:
        """
        Constructor

        Other Arguments:
            ``Selected`` can be another ``ItemEvent`` instance,
                in which case other named args are ignored.
                However ``**kwargs`` are still passed so parent class.

        Arguments:
            Selected (int, optional): Selected value
            Highlighted (int, optional): Highlighted value
            ItemId (int, optional): ItemId value
        """
        super().__init__(**kwargs)
        if isinstance(Selected, ItemEvent):
            oth: ItemEvent = Selected
            self._selected = oth.Selected
            self._highlighted = oth.Highlighted
            self._item_id = oth.ItemId
            return
        else:
            self._selected = Selected
            self._highlighted = Highlighted
            self._item_id = ItemId



    @property
    def Selected(self) -> int:
        """
        specifies which item is newly selected.
        """
        return self._selected
    
    @Selected.setter
    def Selected(self, value: int) -> None:
        self._selected = value

    @property
    def Highlighted(self) -> int:
        """
        specifies which item is newly highlighted.
        """
        return self._highlighted
    
    @Highlighted.setter
    def Highlighted(self, value: int) -> None:
        self._highlighted = value

    @property
    def ItemId(self) -> int:
        """
        specifies the id of the item.
        """
        return self._item_id
    
    @ItemId.setter
    def ItemId(self, value: int) -> None:
        self._item_id = value


__all__ = ['ItemEvent']
