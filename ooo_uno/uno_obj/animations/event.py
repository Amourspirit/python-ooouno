# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.animations
# Libre Office Version: 7.2
import typing
from ooo_uno.oenv import UNO_ENVIRONMENT, UNO_RUNTIME
_DYNAMIC = False
if (not typing.TYPE_CHECKING) and UNO_RUNTIME and UNO_ENVIRONMENT:
    _DYNAMIC = True
    from ooo_uno.helper import uno_helper

if typing.TYPE_CHECKING or _DYNAMIC is False:


    class Event(object):
        """
        Struct Class

        an event has a source that causes an event to be fired and a trigger that defines under which condition an event should be raised and an offset if the event should be raised a defined amount of time after the event is triggered.

        See Also:
            `API Event <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1animations_1_1Event.html>`_


        Note:
            | At runtime Event will be an actual uno struct however can seamlessly be treated as a regualr class.
            | At design time a class is presumed. This allows for better typings.
            | Event is a callable and can be treatead as a class and create instances.
        """

        def __init__(self, Offset: typing.Optional[object] = None, Repeat: typing.Optional[int] = None, Source: typing.Optional[object] = None, Trigger: typing.Optional[int] = None):
            self._offset = Offset
            self._repeat = Repeat
            self._source = Source
            self._trigger = Trigger

        @property
        def Offset(self) -> object:
            """
            an optional offset in seconds or Timing.INDEFINITE.
            
            This is the timespan between the triggering of the event and actually raising the event
            """
            return self._offset
        
        @Offset.setter
        def Offset(self, value: object) -> None:
            self._offset = value

        @property
        def Repeat(self) -> int:
            """
            an option repeat value.
            
            If the Trigger is EventTrigger, this is the number of repeats after which the event is initially raised.
            """
            return self._repeat
        
        @Repeat.setter
        def Repeat(self, value: int) -> None:
            self._repeat = value

        @property
        def Source(self) -> object:
            """
            this is the source for this event.
            """
            return self._source
        
        @Source.setter
        def Source(self, value: object) -> None:
            self._source = value

        @property
        def Trigger(self) -> int:
            """
            this is the trigger that fires this event.
            """
            return self._trigger
        
        @Trigger.setter
        def Trigger(self, value: int) -> None:
            self._trigger = value

if not typing.TYPE_CHECKING and _DYNAMIC:
    def _dynamic_struct() -> None:
        # Dynamically create uno struct using uno
        global Event
        order = ('Offset', 'Repeat', 'Source', 'Trigger')

        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('com.sun.star.animations.Event')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        Event = _struct_init

    _dynamic_struct()

__all__ = ['Event']
