# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.datatransfer.dnd
# Libre Office Version: 7.2
from .drag_source_event import DragSourceEvent as DragSourceEvent_8ccf115c
import typing
from ooo_uno.oenv import UNO_ENVIRONMENT, UNO_RUNTIME
_DYNAMIC = False
if (not typing.TYPE_CHECKING) and UNO_RUNTIME and UNO_ENVIRONMENT:
    _DYNAMIC = True
    from ooo_uno.helper import uno_helper

if typing.TYPE_CHECKING or _DYNAMIC is False:


    class DragSourceDropEvent(DragSourceEvent_8ccf115c):
        """
        Struct Class

        The DragSourceDropEvent is delivered from an object that implements XDragSourceContext to its currently registered drag source listener's.
        
        It contains sufficient information for the originator of the operation to provide appropriate feedback to the end user when the operation completes.

        See Also:
            `API DragSourceDropEvent <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1datatransfer_1_1dnd_1_1DragSourceDropEvent.html>`_


        Note:
            | At runtime DragSourceDropEvent will be an actual uno struct however can seamlessly be treated as a regualr class.
            | At design time a class is presumed. This allows for better typings.
            | DragSourceDropEvent is a callable and can be treatead as a class and create instances.
        """

        def __init__(self, DropAction: typing.Optional[int] = None, DropSuccess: typing.Optional[bool] = None):
            self._drop_action = DropAction
            self._drop_success = DropSuccess

        @property
        def DropAction(self) -> int:
            """
            The action performed by the target on the subject of the drop.
            """
            return self._drop_action
        
        @DropAction.setter
        def DropAction(self, value: int) -> None:
            self._drop_action = value

        @property
        def DropSuccess(self) -> bool:
            """
            Indicates if the drop was successful.
            """
            return self._drop_success
        
        @DropSuccess.setter
        def DropSuccess(self, value: bool) -> None:
            self._drop_success = value

if not typing.TYPE_CHECKING and _DYNAMIC:
    def _dynamic_struct() -> None:
        # Dynamically create uno struct using uno
        global DragSourceDropEvent
        order = ('DropAction', 'DropSuccess')

        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('com.sun.star.datatransfer.dnd.DragSourceDropEvent')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        DragSourceDropEvent = _struct_init

    _dynamic_struct()

__all__ = ['DragSourceDropEvent']
