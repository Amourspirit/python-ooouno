# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.drawing
# Libre Office Version: 7.2
import typing
if typing.TYPE_CHECKING:
    from ..awt.point import Point as Point_5fb2085e
    from .alignment import Alignment as Alignment_b1400b93
    from .escape_direction import EscapeDirection as EscapeDirection_fdc50de6
from ooo_uno.oenv import UNO_ENVIRONMENT, UNO_RUNTIME
_DYNAMIC = False
if (not typing.TYPE_CHECKING) and UNO_RUNTIME and UNO_ENVIRONMENT:
    _DYNAMIC = True
    from ooo_uno.helper import uno_helper

if typing.TYPE_CHECKING or _DYNAMIC is False:


    class GluePoint2(object):
        """
        Struct Class

        This struct defines the attributes of a glue point.
        
        A glue point is a position inside a drawing shape where an edge of a connector shape can be connected.

        See Also:
            `API GluePoint2 <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1drawing_1_1GluePoint2.html>`_


        Note:
            | At runtime GluePoint2 will be an actual uno struct however can seamlessly be treated as a regualr class.
            | At design time a class is presumed. This allows for better typings.
            | GluePoint2 is a callable and can be treatead as a class and create instances.
        """

        def __init__(self, Escape: 'typing.Optional[EscapeDirection_fdc50de6]' = None, IsRelative: typing.Optional[bool] = None, IsUserDefined: typing.Optional[bool] = None, Position: 'typing.Optional[Point_5fb2085e]' = None, PositionAlignment: 'typing.Optional[Alignment_b1400b93]' = None):
            self._escape = Escape
            self._is_relative = IsRelative
            self._is_user_defined = IsUserDefined
            self._position = Position
            self._position_alignment = PositionAlignment

        @property
        def Escape(self) -> 'EscapeDirection_fdc50de6':
            """
            this member specifies the escape direction for a glue point.
            
            The escape direction is the direction the connecting line escapes the shape.
            """
            return self._escape
        
        @Escape.setter
        def Escape(self, value: 'EscapeDirection_fdc50de6') -> None:
            self._escape = value

        @property
        def IsRelative(self) -> bool:
            """
            if this flag is set to true, the position of this glue point is given in 1/100% values instead of 1/100cm.
            """
            return self._is_relative
        
        @IsRelative.setter
        def IsRelative(self, value: bool) -> None:
            self._is_relative = value

        @property
        def IsUserDefined(self) -> bool:
            """
            if this flag is set to false, this is a default glue point.
            
            Some shapes may have default glue points attached to them which cannot be altered or removed.
            """
            return self._is_user_defined
        
        @IsUserDefined.setter
        def IsUserDefined(self, value: bool) -> None:
            self._is_user_defined = value

        @property
        def Position(self) -> 'Point_5fb2085e':
            """
            This is the position of this glue point.
            
            Depending on the flag IsRelative, this is either in 1/100cm or in 1/100%.
            """
            return self._position
        
        @Position.setter
        def Position(self, value: 'Point_5fb2085e') -> None:
            self._position = value

        @property
        def PositionAlignment(self) -> 'Alignment_b1400b93':
            """
            if this glue points position is not relative, this enum specifies the vertical and horizontal alignment of this point.
            
            The alignment specifies how the glue point is moved if the shape is resized.
            """
            return self._position_alignment
        
        @PositionAlignment.setter
        def PositionAlignment(self, value: 'Alignment_b1400b93') -> None:
            self._position_alignment = value

if not typing.TYPE_CHECKING and _DYNAMIC:
    def _dynamic_struct() -> None:
        # Dynamically create uno struct using uno
        global GluePoint2
        order = ('Escape', 'IsRelative', 'IsUserDefined', 'Position', 'PositionAlignment')

        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('com.sun.star.drawing.GluePoint2')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        GluePoint2 = _struct_init

    _dynamic_struct()

__all__ = ['GluePoint2']
