# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.rendering
# Libre Office Version: 7.2
import typing
if typing.TYPE_CHECKING:
    from .x_color_space import XColorSpace as XColorSpace_e3940d09
from ooo_uno.oenv import UNO_ENVIRONMENT, UNO_RUNTIME
_DYNAMIC = False
if (not typing.TYPE_CHECKING) and UNO_RUNTIME and UNO_ENVIRONMENT:
    _DYNAMIC = True
    from ooo_uno.helper import uno_helper

if typing.TYPE_CHECKING or _DYNAMIC is False:


    class FloatingPointBitmapLayout(object):
        """
        Struct Class

        This structure describes the memory layout of a bitmap having floating point color channels.
        
        This structure collects all necessary information to describe the memory layout of a bitmap having floating point color channels
        
        **since**
        
            OOo 2.0

        See Also:
            `API FloatingPointBitmapLayout <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1rendering_1_1FloatingPointBitmapLayout.html>`_


        Note:
            | At runtime FloatingPointBitmapLayout will be an actual uno struct however can seamlessly be treated as a regualr class.
            | At design time a class is presumed. This allows for better typings.
            | FloatingPointBitmapLayout is a callable and can be treatead as a class and create instances.
        """

        def __init__(self, ColorSpace: 'typing.Optional[XColorSpace_e3940d09]' = None, Endianness: typing.Optional[int] = None, Format: typing.Optional[int] = None, NumComponents: typing.Optional[int] = None, PlaneStride: typing.Optional[int] = None, ScanLineBytes: typing.Optional[int] = None, ScanLineStride: typing.Optional[int] = None, ScanLines: typing.Optional[int] = None):
            self._color_space = ColorSpace
            self._endianness = Endianness
            self._format = Format
            self._num_components = NumComponents
            self._plane_stride = PlaneStride
            self._scan_line_bytes = ScanLineBytes
            self._scan_line_stride = ScanLineStride
            self._scan_lines = ScanLines

        @property
        def ColorSpace(self) -> 'XColorSpace_e3940d09':
            """
            Color space the bitmap colors shall be interpreted within.
            """
            return self._color_space
        
        @ColorSpace.setter
        def ColorSpace(self, value: 'XColorSpace_e3940d09') -> None:
            self._color_space = value

        @property
        def Endianness(self) -> int:
            """
            Endianness of the pixel values.
            
            This value must be one of the Endianness constants
            """
            return self._endianness
        
        @Endianness.setter
        def Endianness(self, value: int) -> None:
            self._endianness = value

        @property
        def Format(self) -> int:
            """
            Format type of this bitmap.
            
            This value must be one of the FloatingPointBitmapFormat constants.
            """
            return self._format
        
        @Format.setter
        def Format(self, value: int) -> None:
            self._format = value

        @property
        def NumComponents(self) -> int:
            """
            Number of color components per pixel.
            
            This value must not be negative
            """
            return self._num_components
        
        @NumComponents.setter
        def NumComponents(self, value: int) -> None:
            self._num_components = value

        @property
        def PlaneStride(self) -> int:
            """
            Byte offset between the start of two consecutive planes.
            
            This value is permitted to be negative. If this value is zero, the bitmap is assumed to be in chunky format, otherwise it is assumed to be planar. The difference between chunky and planar layout lies in the way how color channels are interleaved. For a chunky format, all channel data for a single pixel lies consecutively in memory. For a planar layout, the first channel of all pixel is stored consecutive, followed by the second channel, and so forth.
            """
            return self._plane_stride
        
        @PlaneStride.setter
        def PlaneStride(self, value: int) -> None:
            self._plane_stride = value

        @property
        def ScanLineBytes(self) -> int:
            """
            Number of data bytes per scanline.
            
            This value must not be negative
            """
            return self._scan_line_bytes
        
        @ScanLineBytes.setter
        def ScanLineBytes(self, value: int) -> None:
            self._scan_line_bytes = value

        @property
        def ScanLineStride(self) -> int:
            """
            Byte offset between the start of two consecutive scanlines.
            
            This value is permitted to be negative, denoting a bitmap whose content is flipped at the x axis.
            """
            return self._scan_line_stride
        
        @ScanLineStride.setter
        def ScanLineStride(self, value: int) -> None:
            self._scan_line_stride = value

        @property
        def ScanLines(self) -> int:
            """
            Number of scanlines for this bitmap.
            
            This value must not be negative
            """
            return self._scan_lines
        
        @ScanLines.setter
        def ScanLines(self, value: int) -> None:
            self._scan_lines = value

if not typing.TYPE_CHECKING and _DYNAMIC:
    def _dynamic_struct() -> None:
        # Dynamically create uno struct using uno
        global FloatingPointBitmapLayout
        order = ('ColorSpace', 'Endianness', 'Format', 'NumComponents', 'PlaneStride', 'ScanLineBytes', 'ScanLineStride', 'ScanLines')

        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('com.sun.star.rendering.FloatingPointBitmapLayout')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        FloatingPointBitmapLayout = _struct_init

    _dynamic_struct()

__all__ = ['FloatingPointBitmapLayout']
