# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.sheet
# Libre Office Version: 7.2
import os
import typing
if typing.TYPE_CHECKING:
    from .solver_constraint_operator import SolverConstraintOperator as SolverConstraintOperator_6e4a110d
    from ..table.cell_address import CellAddress as CellAddress_ae5f0b56
from ooo_uno.oenv import UNO_ENVIRONMENT
if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
    from ooo_uno.helper import uno_helper


class SolverConstraint(object):
    """
    Struct Class

    is used to specify a constraint for a solver model.

    See Also:
        `API SolverConstraint <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1sheet_1_1SolverConstraint.html>`_


    Note:
        | At runtime SolverConstraint will be an actual uno struct however can seamlessly be treated as a regualr class.
        | At design time a class is presumed. This allows for better typings.
        | SolverConstraint is a callable and can be treatead as a class and create instances.
    """

    def __init__(self, Left: 'typing.Optional[CellAddress_ae5f0b56]' = None, Operator: 'typing.Optional[SolverConstraintOperator_6e4a110d]' = None, Right: typing.Optional[object] = None):
        self._left = Left
        self._operator = Operator
        self._right = Right

    @property
    def Left(self) -> 'CellAddress_ae5f0b56':
        """
        The address of the cell that is constrained.
        """
        return self._left
    
    @Left.setter
    def Left(self, value: 'CellAddress_ae5f0b56') -> None:
        self._left = value

    @property
    def Operator(self) -> 'SolverConstraintOperator_6e4a110d':
        """
        The type of the constraint.
        """
        return self._operator
    
    @Operator.setter
    def Operator(self, value: 'SolverConstraintOperator_6e4a110d') -> None:
        self._operator = value

    @property
    def Right(self) -> object:
        """
        The comparison value, of type double or com.sun.star.table.CellAddress.
        """
        return self._right
    
    @Right.setter
    def Right(self, value: object) -> None:
        self._right = value

def _dynamic_struct() -> None:
    # Dynamically create uno struct using uno
    global SolverConstraint
    ignore = os.environ.get('ooouno_ignore_runtime', 'False')
    if ignore == 'True':
        return
    if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
        order = ('Left', 'Operator', 'Right')
        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('com.sun.star.sheet.SolverConstraint')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        SolverConstraint = _struct_init

if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
    _dynamic_struct()

__all__ = ['SolverConstraint']
