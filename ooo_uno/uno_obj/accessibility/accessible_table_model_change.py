# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.accessibility
# Libre Office Version: 7.2
import typing
from ooo_uno.oenv import UNO_ENVIRONMENT, UNO_RUNTIME
_DYNAMIC = False
if (not typing.TYPE_CHECKING) and UNO_RUNTIME and UNO_ENVIRONMENT:
    _DYNAMIC = True
    from ooo_uno.helper import uno_helper

if typing.TYPE_CHECKING or _DYNAMIC is False:


    class AccessibleTableModelChange(object):
        """
        Struct Class

        This structure lets an event give access to a change of a table model.
        
        The data members of the AccessibleTableModelChange structure give access to the type and cell range of a change of a table model. See AccessibleTableModelChangeType for details of the change type. The range of the affected rows, columns, and/or cells can be obtained by accessing the other four data members.
        
        **since**
        
            OOo 1.1.2

        See Also:
            `API AccessibleTableModelChange <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1accessibility_1_1AccessibleTableModelChange.html>`_


        Note:
            | At runtime AccessibleTableModelChange will be an actual uno struct however can seamlessly be treated as a regualr class.
            | At design time a class is presumed. This allows for better typings.
            | AccessibleTableModelChange is a callable and can be treatead as a class and create instances.
        """

        def __init__(self, FirstColumn: typing.Optional[int] = None, FirstRow: typing.Optional[int] = None, LastColumn: typing.Optional[int] = None, LastRow: typing.Optional[int] = None, Type: typing.Optional[int] = None):
            self._first_column = FirstColumn
            self._first_row = FirstRow
            self._last_column = LastColumn
            self._last_row = LastRow
            self._type = Type

        @property
        def FirstColumn(self) -> int:
            """
            The lowest index of a column that has changed.
            
            The first column that has been changed or contains modified cells.
            """
            return self._first_column
        
        @FirstColumn.setter
        def FirstColumn(self, value: int) -> None:
            self._first_column = value

        @property
        def FirstRow(self) -> int:
            """
            The lowest index of a row that has changed.
            
            The first row that has been changed or that contains modified cells.
            """
            return self._first_row
        
        @FirstRow.setter
        def FirstRow(self, value: int) -> None:
            self._first_row = value

        @property
        def LastColumn(self) -> int:
            """
            The highest index of a column that has changed.
            
            The last column that has been changed or contains modified cells.
            """
            return self._last_column
        
        @LastColumn.setter
        def LastColumn(self, value: int) -> None:
            self._last_column = value

        @property
        def LastRow(self) -> int:
            """
            The highest index of a row that has changed.
            
            The last row that has been changed or that contains modified cells.
            """
            return self._last_row
        
        @LastRow.setter
        def LastRow(self, value: int) -> None:
            self._last_row = value

        @property
        def Type(self) -> int:
            """
            The type of the event as defined in AccessibleTableModelChangeType.
            
            The model change either inserted or deleted one or more rows and/or columns or modified the content of a number of cells. See AccessibleTableModelChangeType for details of the type of the model change.
            """
            return self._type
        
        @Type.setter
        def Type(self, value: int) -> None:
            self._type = value

if not typing.TYPE_CHECKING and _DYNAMIC:
    def _dynamic_struct() -> None:
        # Dynamically create uno struct using uno
        global AccessibleTableModelChange
        order = ('FirstColumn', 'FirstRow', 'LastColumn', 'LastRow', 'Type')

        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('com.sun.star.accessibility.AccessibleTableModelChange')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        AccessibleTableModelChange = _struct_init

    _dynamic_struct()

__all__ = ['AccessibleTableModelChange']
