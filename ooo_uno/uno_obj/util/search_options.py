# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.util
# Libre Office Version: 7.2
import typing
if typing.TYPE_CHECKING:
    from ..lang.locale import Locale as Locale_70d308fa
    from .search_algorithms import SearchAlgorithms as SearchAlgorithms_e2c00d36
from ooo_uno.oenv import UNO_ENVIRONMENT, UNO_RUNTIME
_DYNAMIC = False
if (not typing.TYPE_CHECKING) and UNO_RUNTIME and UNO_ENVIRONMENT:
    _DYNAMIC = True
    from ooo_uno.helper import uno_helper

if typing.TYPE_CHECKING or _DYNAMIC is False:


    class SearchOptions(object):
        """
        Struct Class


        See Also:
            `API SearchOptions <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1util_1_1SearchOptions.html>`_


        Note:
            | At runtime SearchOptions will be an actual uno struct however can seamlessly be treated as a regualr class.
            | At design time a class is presumed. This allows for better typings.
            | SearchOptions is a callable and can be treatead as a class and create instances.
        """

        def __init__(self, Locale: 'typing.Optional[Locale_70d308fa]' = None, algorithmType: 'typing.Optional[SearchAlgorithms_e2c00d36]' = None, changedChars: typing.Optional[int] = None, deletedChars: typing.Optional[int] = None, insertedChars: typing.Optional[int] = None, replaceString: typing.Optional[str] = None, searchFlag: typing.Optional[int] = None, searchString: typing.Optional[str] = None, transliterateFlags: typing.Optional[int] = None):
            self._locale = Locale
            self._algorithm_type = algorithmType
            self._changed_chars = changedChars
            self._deleted_chars = deletedChars
            self._inserted_chars = insertedChars
            self._replace_string = replaceString
            self._search_flag = searchFlag
            self._search_string = searchString
            self._transliterate_flags = transliterateFlags

        @property
        def Locale(self) -> 'Locale_70d308fa':
            """
            The locale for case insensitive search.
            """
            return self._locale
        
        @Locale.setter
        def Locale(self, value: 'Locale_70d308fa') -> None:
            self._locale = value

        @property
        def algorithmType(self) -> 'SearchAlgorithms_e2c00d36':
            """
            search type
            """
            return self._algorithm_type
        
        @algorithmType.setter
        def algorithmType(self, value: 'SearchAlgorithms_e2c00d36') -> None:
            self._algorithm_type = value

        @property
        def changedChars(self) -> int:
            """
            This many characters can be different (as a replacement) between the found word and the search pattern in a \"Weighted Levenshtein
            Distance\" search.
            """
            return self._changed_chars
        
        @changedChars.setter
        def changedChars(self, value: int) -> None:
            self._changed_chars = value

        @property
        def deletedChars(self) -> int:
            """
            This many characters can be missing in the found word in a \"Weighted Levenshtein Distance\" search.
            """
            return self._deleted_chars
        
        @deletedChars.setter
        def deletedChars(self, value: int) -> None:
            self._deleted_chars = value

        @property
        def insertedChars(self) -> int:
            """
            This many characters can be additional in the found word in a \"Weighted Levenshtein Distance\" search.
            """
            return self._inserted_chars
        
        @insertedChars.setter
        def insertedChars(self, value: int) -> None:
            self._inserted_chars = value

        @property
        def replaceString(self) -> str:
            """
            The replacement text (is for optional replacing - SearchOption is only the data container for it)
            """
            return self._replace_string
        
        @replaceString.setter
        def replaceString(self, value: str) -> None:
            self._replace_string = value

        @property
        def searchFlag(self) -> int:
            """
            some flags - can be mixed
            """
            return self._search_flag
        
        @searchFlag.setter
        def searchFlag(self, value: int) -> None:
            self._search_flag = value

        @property
        def searchString(self) -> str:
            """
            The text or pattern to be searched.
            """
            return self._search_string
        
        @searchString.setter
        def searchString(self, value: str) -> None:
            self._search_string = value

        @property
        def transliterateFlags(self) -> int:
            """
            Flags for the transliteration.
            
            Same meaning as the enum of com.sun.star.i18n.TransliterationModules
            """
            return self._transliterate_flags
        
        @transliterateFlags.setter
        def transliterateFlags(self, value: int) -> None:
            self._transliterate_flags = value

if not typing.TYPE_CHECKING and _DYNAMIC:
    def _dynamic_struct() -> None:
        # Dynamically create uno struct using uno
        global SearchOptions
        order = ('Locale', 'algorithmType', 'changedChars', 'deletedChars', 'insertedChars', 'replaceString', 'searchFlag', 'searchString', 'transliterateFlags')

        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('com.sun.star.util.SearchOptions')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        SearchOptions = _struct_init

    _dynamic_struct()

__all__ = ['SearchOptions']
