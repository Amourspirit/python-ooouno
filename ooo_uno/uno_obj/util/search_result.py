# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.util
# Libre Office Version: 7.2
import os
import typing
from ooo_uno.oenv import UNO_ENVIRONMENT
if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
    from ooo_uno.helper import uno_helper


class SearchResult(object):
    """
    Struct Class


    See Also:
        `API SearchResult <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1util_1_1SearchResult.html>`_


    Note:
        | At runtime SearchResult will be an actual uno struct however can seamlessly be treated as a regualr class.
        | At design time a class is presumed. This allows for better typings.
        | SearchResult is a callable and can be treatead as a class and create instances.
    """

    def __init__(self, endOffset: 'typing.Optional[typing.List[int]]' = None, startOffset: 'typing.Optional[typing.List[int]]' = None, subRegExpressions: typing.Optional[int] = None):
        self._end_offset = endOffset
        self._start_offset = startOffset
        self._sub_reg_expressions = subRegExpressions

    @property
    def endOffset(self) -> 'typing.List[int]':
        return self._end_offset
    
    @endOffset.setter
    def endOffset(self, value: 'typing.List[int]') -> None:
        self._end_offset = value

    @property
    def startOffset(self) -> 'typing.List[int]':
        return self._start_offset
    
    @startOffset.setter
    def startOffset(self, value: 'typing.List[int]') -> None:
        self._start_offset = value

    @property
    def subRegExpressions(self) -> int:
        """
        Number of subexpressions.
        
        If it is 0, then no match found; this value is 1 for ABSOLUTE and APPROXIMATE match. The start and endOffset are always dependent on the search direction.
        
        For example, if you search \"X\" in the text \"-X-\" the offsets are:
        
        Forward, the startOffset is inclusive, the endOffset exclusive. Backward, the startOffset is exclusive, the endOffset inclusive.
        
        For regular expressions it can be greater than 1. If the value is 1, startoffset[0] and endoffset[0] points to the matching sub string if value is > 1, still startoffset[0] and endoffset[0] points to the matching substring for whole regular expression startoffset[i] and endoffset[i] points to the matching substring of i th matching substring.
        """
        return self._sub_reg_expressions
    
    @subRegExpressions.setter
    def subRegExpressions(self, value: int) -> None:
        self._sub_reg_expressions = value

def _dynamic_struct() -> None:
    # Dynamically create uno struct using uno
    global SearchResult
    ignore = os.environ.get('ooouno_ignore_runtime', 'False')
    if ignore == 'True':
        return
    if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
        order = ('endOffset', 'startOffset', 'subRegExpressions')
        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('com.sun.star.util.SearchResult')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        SearchResult = _struct_init

if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
    _dynamic_struct()

__all__ = ['SearchResult']
