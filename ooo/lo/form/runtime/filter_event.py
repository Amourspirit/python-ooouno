# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.form.runtime
# Libre Office Version: 7.2
from ooo.oenv import UNO_NONE
from ...lang.event_object import EventObject as EventObject_a3d70b03
import typing


class FilterEvent(EventObject_a3d70b03):
    """
    Struct Class

    is an event fired by a filter controller, when the filter managed by the controller changes.
    
    **since**
    
        OOo 3.3

    See Also:
        `API FilterEvent <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1form_1_1runtime_1_1FilterEvent.html>`_
    """
    __ooo_ns__: str = 'com.sun.star.form.runtime'
    __ooo_full_ns__: str = 'com.sun.star.form.runtime.FilterEvent'
    __ooo_type_name__: str = 'struct'
    typeName: str = 'com.sun.star.form.runtime.FilterEvent'
    """Literal Constant ``com.sun.star.form.runtime.FilterEvent``"""

    def __init__(self, DisjunctiveTerm: int = 0, FilterComponent: int = 0, PredicateExpression: str = '', **kwargs) -> None:
        """
        Constructor

        Other Arguments:
            ``DisjunctiveTerm`` can be another ``FilterEvent`` instance,
                in which case other named args are ignored.
                However ``**kwargs`` are still passed so parent class.

        Arguments:
            DisjunctiveTerm (int, optional): DisjunctiveTerm value
            FilterComponent (int, optional): FilterComponent value
            PredicateExpression (str, optional): PredicateExpression value
        """
        super().__init__(**kwargs)
        if isinstance(DisjunctiveTerm, FilterEvent):
            oth: FilterEvent = DisjunctiveTerm
            self._disjunctive_term = oth.DisjunctiveTerm
            self._filter_component = oth.FilterComponent
            self._predicate_expression = oth.PredicateExpression
            return
        else:
            self._disjunctive_term = DisjunctiveTerm
            self._filter_component = FilterComponent
            self._predicate_expression = PredicateExpression



    @property
    def DisjunctiveTerm(self) -> int:
        """
        denotes the index of the disjunctive term to which the event applies, if any.
        """
        return self._disjunctive_term
    
    @DisjunctiveTerm.setter
    def DisjunctiveTerm(self, value: int) -> None:
        self._disjunctive_term = value

    @property
    def FilterComponent(self) -> int:
        """
        denotes the index of the filter component to which the event applies, if any.
        """
        return self._filter_component
    
    @FilterComponent.setter
    def FilterComponent(self, value: int) -> None:
        self._filter_component = value

    @property
    def PredicateExpression(self) -> str:
        """
        denotes the predicate expression associated with the event.
        """
        return self._predicate_expression
    
    @PredicateExpression.setter
    def PredicateExpression(self, value: str) -> None:
        self._predicate_expression = value


__all__ = ['FilterEvent']
