# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.i18n
# Libre Office Version: 7.2
import os
import typing
if typing.TYPE_CHECKING:
    from ..beans.property_values import PropertyValues as PropertyValues_d6470ce6
    from ..linguistic2.x_hyphenator import XHyphenator as XHyphenator_ff4e0def
from ooo_uno.oenv import UNO_ENVIRONMENT
if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
    from ooo_uno.helper import uno_helper


class LineBreakHyphenationOptions(object):
    """
    Struct Class

    Hyphenation options passed in calls to XBreakIterator.getLineBreak().

    See Also:
        `API LineBreakHyphenationOptions <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1i18n_1_1LineBreakHyphenationOptions.html>`_


    Note:
        | At runtime LineBreakHyphenationOptions will be an actual uno struct however can seamlessly be treated as a regualr class.
        | At design time a class is presumed. This allows for better typings.
        | LineBreakHyphenationOptions is a callable and can be treatead as a class and create instances.
    """

    def __init__(self, aHyphenationOptions: 'typing.Optional[PropertyValues_d6470ce6]' = None, hyphenIndex: typing.Optional[int] = None, rHyphenator: 'typing.Optional[XHyphenator_ff4e0def]' = None):
        self._a_hyphenation_options = aHyphenationOptions
        self._hyphen_index = hyphenIndex
        self._r_hyphenator = rHyphenator

    @property
    def aHyphenationOptions(self) -> 'PropertyValues_d6470ce6':
        """
        Sequence of property values to be used by the hyphenator - can be empty if the default values (from the property set) should be used.
        """
        return self._a_hyphenation_options
    
    @aHyphenationOptions.setter
    def aHyphenationOptions(self, value: 'PropertyValues_d6470ce6') -> None:
        self._a_hyphenation_options = value

    @property
    def hyphenIndex(self) -> int:
        """
        The first character not fitting to the current line, considering an additional \"-\" for hyphenation.
        """
        return self._hyphen_index
    
    @hyphenIndex.setter
    def hyphenIndex(self, value: int) -> None:
        self._hyphen_index = value

    @property
    def rHyphenator(self) -> 'XHyphenator_ff4e0def':
        """
        Reference to the specific hyphenator - can be zero.
        """
        return self._r_hyphenator
    
    @rHyphenator.setter
    def rHyphenator(self, value: 'XHyphenator_ff4e0def') -> None:
        self._r_hyphenator = value

def _dynamic_struct() -> None:
    # Dynamically create uno struct using uno
    global LineBreakHyphenationOptions
    ignore = os.environ.get('ooouno_ignore_runtime', 'False')
    if ignore == 'True':
        return
    if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
        order = ('aHyphenationOptions', 'hyphenIndex', 'rHyphenator')
        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('com.sun.star.i18n.LineBreakHyphenationOptions')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        LineBreakHyphenationOptions = _struct_init

if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
    _dynamic_struct()

__all__ = ['LineBreakHyphenationOptions']
