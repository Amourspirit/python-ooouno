# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.drawing.framework
# Libre Office Version: 7.2
import os
import typing
if typing.TYPE_CHECKING:
    from .x_resource_id import XResourceId as XResourceId_5be3103d
from ooo_uno.oenv import UNO_ENVIRONMENT
if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
    from ooo_uno.helper import uno_helper


class TabBarButton(object):
    """
    Struct Class

    Descriptor of a tab bar button.
    
    Tab bar buttons are typically used to offer the user the choice between different views to be displayed in one pane.
    
    For identification only the ResourceId is used, so for some methods of the XTabBar interface only the ResourceId member is evaluated.

    See Also:
        `API TabBarButton <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1drawing_1_1framework_1_1TabBarButton.html>`_


    Note:
        | At runtime TabBarButton will be an actual uno struct however can seamlessly be treated as a regualr class.
        | At design time a class is presumed. This allows for better typings.
        | TabBarButton is a callable and can be treatead as a class and create instances.
    """

    def __init__(self, ButtonLabel: typing.Optional[str] = None, HelpText: typing.Optional[str] = None, ResourceId: 'typing.Optional[XResourceId_5be3103d]' = None):
        self._button_label = ButtonLabel
        self._help_text = HelpText
        self._resource_id = ResourceId

    @property
    def ButtonLabel(self) -> str:
        """
        This label is displayed on the UI as button text.
        
        The label is expected to be localized.
        """
        return self._button_label
    
    @ButtonLabel.setter
    def ButtonLabel(self, value: str) -> None:
        self._button_label = value

    @property
    def HelpText(self) -> str:
        """
        The localized help text that may be displayed in a tool tip.
        """
        return self._help_text
    
    @HelpText.setter
    def HelpText(self, value: str) -> None:
        self._help_text = value

    @property
    def ResourceId(self) -> 'XResourceId_5be3103d':
        """
        XResourceId object of the resource that is requested to be displayed when the tab bar button is activated.
        
        For some methods of the XTabBar interface only this member is evaluated. That is because only this member is used to identify a tab bar button.
        """
        return self._resource_id
    
    @ResourceId.setter
    def ResourceId(self, value: 'XResourceId_5be3103d') -> None:
        self._resource_id = value

def _dynamic_struct() -> None:
    # Dynamically create uno struct using uno
    global TabBarButton
    ignore = os.environ.get('ooouno_ignore_runtime', 'False')
    if ignore == 'True':
        return
    if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
        order = ('ButtonLabel', 'HelpText', 'ResourceId')
        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('com.sun.star.drawing.framework.TabBarButton')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        TabBarButton = _struct_init

if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
    _dynamic_struct()

__all__ = ['TabBarButton']
