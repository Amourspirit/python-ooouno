# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.datatransfer.dnd
# Libre Office Version: 7.2
from ...lang.event_object import EventObject as EventObject_a3d70b03
import typing
if typing.TYPE_CHECKING:
    from .x_drag_source import XDragSource as XDragSource_49900fb2
    from .x_drag_source_context import XDragSourceContext as XDragSourceContext_c2661297


class DragSourceEvent(EventObject_a3d70b03):
    """
    Struct Class

    This class is the base class for DragSourceDragEvent and DragSourceDropEvent.
    
    To access the XDragSource that originated this event, use the com.sun.star.lang.EventObject.Source member of this object.

    See Also:
        `API DragSourceEvent <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1datatransfer_1_1dnd_1_1DragSourceEvent.html>`_
    """
    __ooo_ns__: str = 'com.sun.star.datatransfer.dnd'
    __ooo_full_ns__: str = 'com.sun.star.datatransfer.dnd.DragSourceEvent'
    __ooo_type_name__: str = 'struct'
    typeName: str = 'com.sun.star.datatransfer.dnd.DragSourceEvent'
    """Literal Constant ``com.sun.star.datatransfer.dnd.DragSourceEvent``"""

    def __init__(self, *args, **kwargs):
        """
        Constructor

        Other Arguments:
            First positinal arg can be another ``DragSourceEvent`` instance,
                if it is the only argument passed to contructor;
                Otherwise, postitional arguments are treated as ``DragSourceEvent``
                values. Following the order of ``Keyword Arguments``.

        Keyword Arguments:
            DragSourceContext (XDragSourceContext, optional): DragSourceContext value
            DragSource (XDragSource, optional): DragSource value
        """
        self._drag_source_context = None
        self._drag_source = None

        key_order = ('DragSourceContext', 'DragSource')
        arg_len = len(args)
        if arg_len == 1:
            if isinstance(args[0], DragSourceEvent):
                oth = args[0]
                for key in key_order:
                    setattr(self, key, getattr(oth, key))
                return

        if  arg_len > len(key_order):
            raise ValueError("DragSourceEvent.__init__() To many parameters")
        for i, arg in enumerate(args):
            setattr(self, key_order[i], arg)
        for k, v in kwargs.items():
            if k in key_order:
                setattr(self, k, v)


    @property
    def DragSourceContext(self) -> 'XDragSourceContext_c2661297':
        """
        The drag source context of the current drag operation.
        """
        return self._drag_source_context
    
    @DragSourceContext.setter
    def DragSourceContext(self, value: 'XDragSourceContext_c2661297') -> None:
        self._drag_source_context = value

    @property
    def DragSource(self) -> 'XDragSource_49900fb2':
        """
        The drag source on which the Drag and Drop operation was initiated.
        """
        return self._drag_source
    
    @DragSource.setter
    def DragSource(self, value: 'XDragSource_49900fb2') -> None:
        self._drag_source = value


__all__ = ['DragSourceEvent']
