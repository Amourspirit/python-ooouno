# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.script
# Libre Office Version: 7.2
import os
import typing
from ooo_uno.oenv import UNO_ENVIRONMENT
if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
    from ooo_uno.helper import uno_helper


class ScriptEventDescriptor(object):
    """
    Struct Class

    describes an effect, especially a script to be executed, for a certain event given by the listener type and the name of the event method.

    See Also:
        `API ScriptEventDescriptor <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1script_1_1ScriptEventDescriptor.html>`_


    Note:
        | At runtime ScriptEventDescriptor will be an actual uno struct however can seamlessly be treated as a regualr class.
        | At design time a class is presumed. This allows for better typings.
        | ScriptEventDescriptor is a callable and can be treatead as a class and create instances.
    """

    def __init__(self, AddListenerParam: typing.Optional[str] = None, EventMethod: typing.Optional[str] = None, ListenerType: typing.Optional[str] = None, ScriptCode: typing.Optional[str] = None, ScriptType: typing.Optional[str] = None):
        self._add_listener_param = AddListenerParam
        self._event_method = EventMethod
        self._listener_type = ListenerType
        self._script_code = ScriptCode
        self._script_type = ScriptType

    @property
    def AddListenerParam(self) -> str:
        """
        data to be used if the addListener method needs an additional parameter.
        
        If the type of this parameter is different from string, it will be converted, when added.
        """
        return self._add_listener_param
    
    @AddListenerParam.setter
    def AddListenerParam(self, value: str) -> None:
        self._add_listener_param = value

    @property
    def EventMethod(self) -> str:
        """
        event method as string.
        """
        return self._event_method
    
    @EventMethod.setter
    def EventMethod(self, value: str) -> None:
        self._event_method = value

    @property
    def ListenerType(self) -> str:
        """
        listener type as string, same as listener-XIdlClass.getName().
        """
        return self._listener_type
    
    @ListenerType.setter
    def ListenerType(self, value: str) -> None:
        self._listener_type = value

    @property
    def ScriptCode(self) -> str:
        """
        script code as string (the code has to correspond with the language defined by ScriptType).
        """
        return self._script_code
    
    @ScriptCode.setter
    def ScriptCode(self, value: str) -> None:
        self._script_code = value

    @property
    def ScriptType(self) -> str:
        """
        type of the script language as string; for example, \"Basic\" or \"StarScript\".
        """
        return self._script_type
    
    @ScriptType.setter
    def ScriptType(self, value: str) -> None:
        self._script_type = value

def _dynamic_struct() -> None:
    # Dynamically create uno struct using uno
    global ScriptEventDescriptor
    ignore = os.environ.get('ooouno_ignore_runtime', 'False')
    if ignore == 'True':
        return
    if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
        order = ('AddListenerParam', 'EventMethod', 'ListenerType', 'ScriptCode', 'ScriptType')
        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('com.sun.star.script.ScriptEventDescriptor')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        ScriptEventDescriptor = _struct_init

if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
    _dynamic_struct()

__all__ = ['ScriptEventDescriptor']
