# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.linguistic2
# Libre Office Version: 7.2
import typing
from ..beans.property_value import PropertyValue as PropertyValue_c9610c73
from .single_proofreading_error import SingleProofreadingError as SingleProofreadingError_c54812c1
if typing.TYPE_CHECKING:
    from ..lang.locale import Locale as Locale_70d308fa
    from .x_proofreader import XProofreader as XProofreader_dab0e46
    from ..text.x_flat_paragraph import XFlatParagraph as XFlatParagraph_c8310c42


class ProofreadingResult(object):
    """
    Struct Class

    holds the results from proofreading a sentence.
    
    **since**
    
        OOo 3.0.1

    See Also:
        `API ProofreadingResult <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1linguistic2_1_1ProofreadingResult.html>`_
    """
    __ooo_ns__: str = 'com.sun.star.linguistic2'
    __ooo_full_ns__: str = 'com.sun.star.linguistic2.ProofreadingResult'
    __ooo_type_name__: str = 'struct'
    typeName: str = 'com.sun.star.linguistic2.ProofreadingResult'
    """Literal Constant ``com.sun.star.linguistic2.ProofreadingResult``"""

    aErrors: typing.TypeAlias = typing.Tuple[SingleProofreadingError_c54812c1, ...]
    """
    """
    aProperties: typing.TypeAlias = typing.Tuple[PropertyValue_c9610c73, ...]
    """
    """

    def __init__(self, *args, **kwargs):
        """
        Constructor

        Other Arguments:
            First positinal arg can be another ``ProofreadingResult`` instance,
                if it is the only argument passed to contructor;
                Otherwise, postitional arguments are treated as ``ProofreadingResult``
                values. Following the order of ``Keyword Arguments``.

        Keyword Arguments:
            aDocumentIdentifier (str, optional): aDocumentIdentifier value
            xFlatParagraph (XFlatParagraph, optional): xFlatParagraph value
            aText (str, optional): aText value
            aLocale (Locale, optional): aLocale value
            nStartOfSentencePosition (int, optional): nStartOfSentencePosition value
            nBehindEndOfSentencePosition (int, optional): nBehindEndOfSentencePosition value
            nStartOfNextSentencePosition (int, optional): nStartOfNextSentencePosition value
            xProofreader (XProofreader, optional): xProofreader value
        """
        self._a_document_identifier = None
        self._x_flat_paragraph = None
        self._a_text = None
        self._a_locale = None
        self._n_start_of_sentence_position = None
        self._n_behind_end_of_sentence_position = None
        self._n_start_of_next_sentence_position = None
        self._x_proofreader = None

        key_order = ('aDocumentIdentifier', 'xFlatParagraph', 'aText', 'aLocale', 'nStartOfSentencePosition', 'nBehindEndOfSentencePosition', 'nStartOfNextSentencePosition', 'xProofreader')
        arg_len = len(args)
        if arg_len == 1:
            if isinstance(args[0], ProofreadingResult):
                oth = args[0]
                for key in key_order:
                    setattr(self, key, getattr(oth, key))
                return

        if  arg_len > len(key_order):
            raise ValueError("ProofreadingResult.__init__() To many parameters")
        for i, arg in enumerate(args):
            setattr(self, key_order[i], arg)
        for k, v in kwargs.items():
            if k in key_order:
                setattr(self, k, v)

    @property
    def aDocumentIdentifier(self) -> str:
        """
        """
        return self._a_document_identifier
    
    @aDocumentIdentifier.setter
    def aDocumentIdentifier(self, value: str) -> None:
        self._a_document_identifier = value

    @property
    def xFlatParagraph(self) -> 'XFlatParagraph_c8310c42':
        """
        """
        return self._x_flat_paragraph
    
    @xFlatParagraph.setter
    def xFlatParagraph(self, value: 'XFlatParagraph_c8310c42') -> None:
        self._x_flat_paragraph = value

    @property
    def aText(self) -> str:
        """
        """
        return self._a_text
    
    @aText.setter
    def aText(self, value: str) -> None:
        self._a_text = value

    @property
    def aLocale(self) -> 'Locale_70d308fa':
        """
        """
        return self._a_locale
    
    @aLocale.setter
    def aLocale(self, value: 'Locale_70d308fa') -> None:
        self._a_locale = value

    @property
    def nStartOfSentencePosition(self) -> int:
        """
        """
        return self._n_start_of_sentence_position
    
    @nStartOfSentencePosition.setter
    def nStartOfSentencePosition(self, value: int) -> None:
        self._n_start_of_sentence_position = value

    @property
    def nBehindEndOfSentencePosition(self) -> int:
        """
        """
        return self._n_behind_end_of_sentence_position
    
    @nBehindEndOfSentencePosition.setter
    def nBehindEndOfSentencePosition(self, value: int) -> None:
        self._n_behind_end_of_sentence_position = value

    @property
    def nStartOfNextSentencePosition(self) -> int:
        """
        """
        return self._n_start_of_next_sentence_position
    
    @nStartOfNextSentencePosition.setter
    def nStartOfNextSentencePosition(self, value: int) -> None:
        self._n_start_of_next_sentence_position = value

    @property
    def xProofreader(self) -> 'XProofreader_dab0e46':
        """
        """
        return self._x_proofreader
    
    @xProofreader.setter
    def xProofreader(self, value: 'XProofreader_dab0e46') -> None:
        self._x_proofreader = value


__all__ = ['ProofreadingResult']
