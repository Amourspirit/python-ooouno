# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.script
# Libre Office Version: 7.2
from ..lang.event_object import EventObject as EventObject_a3d70b03
import typing
from ooo_uno.oenv import UNO_ENVIRONMENT, UNO_RUNTIME
_DYNAMIC = False
if (not typing.TYPE_CHECKING) and UNO_RUNTIME and UNO_ENVIRONMENT:
    _DYNAMIC = True
    from ooo_uno.helper import uno_helper

if typing.TYPE_CHECKING or _DYNAMIC is False:


    class AllEventObject(EventObject_a3d70b03):
        """
        Struct Class

        This event is a wrapper for an original event in a forwarding event.
        
        Usually the original event is the first argument in the array of arguments.

        See Also:
            `API AllEventObject <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1script_1_1AllEventObject.html>`_


        Note:
            | At runtime AllEventObject will be an actual uno struct however can seamlessly be treated as a regualr class.
            | At design time a class is presumed. This allows for better typings.
            | AllEventObject is a callable and can be treatead as a class and create instances.
        """

        def __init__(self, Arguments: 'typing.Optional[typing.List[object]]' = None, Helper: typing.Optional[object] = None, ListenerType: typing.Optional[object] = None, MethodName: typing.Optional[str] = None):
            self._arguments = Arguments
            self._helper = Helper
            self._listener_type = ListenerType
            self._method_name = MethodName

        @property
        def Arguments(self) -> 'typing.List[object]':
            """
            The arguments of the original method.
            """
            return self._arguments
        
        @Arguments.setter
        def Arguments(self, value: 'typing.List[object]') -> None:
            self._arguments = value

        @property
        def Helper(self) -> object:
            """
            A helper value for the implementation that can be used arbitrarily.
            
            This field reflects the third parameter of the method XAllListenerAdapterService.createAllListerAdapter().
            """
            return self._helper
        
        @Helper.setter
        def Helper(self, value: object) -> None:
            self._helper = value

        @property
        def ListenerType(self) -> object:
            """
            contains the type of the original listener.
            """
            return self._listener_type
        
        @ListenerType.setter
        def ListenerType(self, value: object) -> None:
            self._listener_type = value

        @property
        def MethodName(self) -> str:
            """
            The original method name on which the event was fired.
            """
            return self._method_name
        
        @MethodName.setter
        def MethodName(self, value: str) -> None:
            self._method_name = value

if not typing.TYPE_CHECKING and _DYNAMIC:
    def _dynamic_struct() -> None:
        # Dynamically create uno struct using uno
        global AllEventObject
        order = ('Arguments', 'Helper', 'ListenerType', 'MethodName')

        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('com.sun.star.script.AllEventObject')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        AllEventObject = _struct_init

    _dynamic_struct()

__all__ = ['AllEventObject']
