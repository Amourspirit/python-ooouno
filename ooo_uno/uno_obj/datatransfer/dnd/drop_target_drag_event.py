# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.datatransfer.dnd
# Libre Office Version: 7.2
import os
from .drop_target_event import DropTargetEvent as DropTargetEvent_8d651169
import typing
if typing.TYPE_CHECKING:
    from .x_drop_target_drag_context import XDropTargetDragContext as XDropTargetDragContext_10221422
from ooo_uno.oenv import UNO_ENVIRONMENT
if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
    from ooo_uno.helper import uno_helper


class DropTargetDragEvent(DropTargetEvent_8d651169):
    """
    Struct Class

    The DropTargetDragEvent is delivered from the drop target to the currently registered drop target listener.
    
    It contains information regarding the current state of the operation to enable the operations initiator to provide the end user with the appropriate drag over feedback.

    See Also:
        `API DropTargetDragEvent <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1datatransfer_1_1dnd_1_1DropTargetDragEvent.html>`_


    Note:
        | At runtime DropTargetDragEvent will be an actual uno struct however can seamlessly be treated as a regualr class.
        | At design time a class is presumed. This allows for better typings.
        | DropTargetDragEvent is a callable and can be treatead as a class and create instances.
    """

    def __init__(self, Context: 'typing.Optional[XDropTargetDragContext_10221422]' = None, DropAction: typing.Optional[int] = None, LocationX: typing.Optional[int] = None, LocationY: typing.Optional[int] = None, SourceActions: typing.Optional[int] = None):
        self._context = Context
        self._drop_action = DropAction
        self._location_x = LocationX
        self._location_y = LocationY
        self._source_actions = SourceActions

    @property
    def Context(self) -> 'XDropTargetDragContext_10221422':
        """
        The drop target context of the current drag operation.
        """
        return self._context
    
    @Context.setter
    def Context(self, value: 'XDropTargetDragContext_10221422') -> None:
        self._context = value

    @property
    def DropAction(self) -> int:
        """
        This value represents the currently selected drop action.
        """
        return self._drop_action
    
    @DropAction.setter
    def DropAction(self, value: int) -> None:
        self._drop_action = value

    @property
    def LocationX(self) -> int:
        """
        The cursor's current x location within the window's coordinates.
        """
        return self._location_x
    
    @LocationX.setter
    def LocationX(self, value: int) -> None:
        self._location_x = value

    @property
    def LocationY(self) -> int:
        """
        The cursor's current y location within the window's coordinates.
        """
        return self._location_y
    
    @LocationY.setter
    def LocationY(self, value: int) -> None:
        self._location_y = value

    @property
    def SourceActions(self) -> int:
        """
        This value represents the action or actions supported by the source.
        
        This may be a combination of arbitrary source actions except ACTION_DEFAULT.
        
        To combine different actions use a logical OR.
        """
        return self._source_actions
    
    @SourceActions.setter
    def SourceActions(self, value: int) -> None:
        self._source_actions = value

def _dynamic_struct() -> None:
    # Dynamically create uno struct using uno
    global DropTargetDragEvent
    ignore = os.environ.get('ooouno_ignore_runtime', 'False')
    if ignore == 'True':
        return
    if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
        order = ('Context', 'DropAction', 'LocationX', 'LocationY', 'SourceActions')
        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('com.sun.star.datatransfer.dnd.DropTargetDragEvent')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        DropTargetDragEvent = _struct_init

if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
    _dynamic_struct()

__all__ = ['DropTargetDragEvent']
