# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.accessibility
# Libre Office Version: 7.2
from ..lang.event_object import EventObject as EventObject_a3d70b03


class AccessibleEventObject(EventObject_a3d70b03):
    """
    Struct Class

    this struct describes an accessible event, that is broadcasted from the XAccessibleEventBroadcaster and notified to XAccessibleEventListener.
    
    It is usually implemented by AccessibleContext.
    
    **since**
    
        OOo 1.1.2

    See Also:
        `API AccessibleEventObject <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1accessibility_1_1AccessibleEventObject.html>`_
    """
    __ooo_ns__: str = 'com.sun.star.accessibility'
    __ooo_full_ns__: str = 'com.sun.star.accessibility.AccessibleEventObject'
    __ooo_type_name__: str = 'struct'
    typeName: str = 'com.sun.star.accessibility.AccessibleEventObject'
    """Literal Constant ``com.sun.star.accessibility.AccessibleEventObject``"""

    def __init__(self, *args, **kwargs):
        """
        Constructor

        Other Arguments:
            First positinal arg can be another ``AccessibleEventObject`` instance,
                if it is the only argument passed to contructor;
                Otherwise, postitional arguments are treated as ``AccessibleEventObject``
                values. Following the order of ``Keyword Arguments``.

        Keyword Arguments:
            EventId (int, optional): EventId value
            NewValue (object, optional): NewValue value
            OldValue (object, optional): OldValue value
        """
        self._event_id = None
        self._new_value = None
        self._old_value = None

        key_order = ('EventId', 'NewValue', 'OldValue')
        arg_len = len(args)
        if arg_len == 1:
            if isinstance(args[0], AccessibleEventObject):
                oth = args[0]
                for key in key_order:
                    setattr(self, key, getattr(oth, key))
                return

        if  arg_len > len(key_order):
            raise ValueError("AccessibleEventObject.__init__() To many parameters")
        for i, arg in enumerate(args):
            setattr(self, key_order[i], arg)
        for k, v in kwargs.items():
            if k in key_order:
                setattr(self, k, v)


    @property
    def EventId(self) -> int:
        """
        specifies the type of this event.
        
        For a list of possible events see AccessibleEventId.
        """
        return self._event_id
    
    @EventId.setter
    def EventId(self, value: int) -> None:
        self._event_id = value

    @property
    def NewValue(self) -> object:
        """
        for events that specifies a value change, this is the new value.
        
        Depending on the EventId, this can be void.
        """
        return self._new_value
    
    @NewValue.setter
    def NewValue(self, value: object) -> None:
        self._new_value = value

    @property
    def OldValue(self) -> object:
        """
        for events that specifies a value change, this is the old value.
        
        Depending on the EventId, this can be void.
        """
        return self._old_value
    
    @OldValue.setter
    def OldValue(self, value: object) -> None:
        self._old_value = value


__all__ = ['AccessibleEventObject']
