# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.ucb
# Libre Office Version: 7.2
import os
import typing
from ooo_uno.oenv import UNO_ENVIRONMENT
if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
    from ooo_uno.helper import uno_helper


class NumberedSortingInfo(object):
    """
    Struct Class

    contains information for sorting a ContentResultSet.
    
    In contrast to the struct SortingInfo this struct is used to be on the safe side, that no one asks for sorting by a property which is not contained in a ContentResultSet.

    See Also:
        `API NumberedSortingInfo <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1ucb_1_1NumberedSortingInfo.html>`_


    Note:
        | At runtime NumberedSortingInfo will be an actual uno struct however can seamlessly be treated as a regualr class.
        | At design time a class is presumed. This allows for better typings.
        | NumberedSortingInfo is a callable and can be treatead as a class and create instances.
    """

    def __init__(self, Ascending: typing.Optional[bool] = None, ColumnIndex: typing.Optional[int] = None):
        self._ascending = Ascending
        self._column_index = ColumnIndex

    @property
    def Ascending(self) -> bool:
        """
        contains a flag indicating the sort mode (ascending or descending).
        """
        return self._ascending
    
    @Ascending.setter
    def Ascending(self, value: bool) -> None:
        self._ascending = value

    @property
    def ColumnIndex(self) -> int:
        """
        sort the result set by this column.
        
        Index starts with 1.
        """
        return self._column_index
    
    @ColumnIndex.setter
    def ColumnIndex(self, value: int) -> None:
        self._column_index = value

def _dynamic_struct() -> None:
    # Dynamically create uno struct using uno
    global NumberedSortingInfo
    ignore = os.environ.get('ooouno_ignore_runtime', 'False')
    if ignore == 'True':
        return
    if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
        order = ('Ascending', 'ColumnIndex')
        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('com.sun.star.ucb.NumberedSortingInfo')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        NumberedSortingInfo = _struct_init

if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
    _dynamic_struct()

__all__ = ['NumberedSortingInfo']
