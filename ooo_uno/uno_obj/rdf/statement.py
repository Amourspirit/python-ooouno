# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.rdf
# Libre Office Version: 7.2
import os
import typing
if typing.TYPE_CHECKING:
    from .x_node import XNode as XNode_5ee40822
    from .x_resource import XResource as XResource_842709e4
    from .xuri import XURI as XURI_5682078c
from ooo_uno.oenv import UNO_ENVIRONMENT
if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
    from ooo_uno.helper import uno_helper


class Statement(object):
    """
    Struct Class

    represents a RDF statement, or triple.
    
    **since**
    
        OOo 3.2

    See Also:
        `API Statement <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1rdf_1_1Statement.html>`_


    Note:
        | At runtime Statement will be an actual uno struct however can seamlessly be treated as a regualr class.
        | At design time a class is presumed. This allows for better typings.
        | Statement is a callable and can be treatead as a class and create instances.
    """

    def __init__(self, Graph: 'typing.Optional[XURI_5682078c]' = None, Object: 'typing.Optional[XNode_5ee40822]' = None, Predicate: 'typing.Optional[XURI_5682078c]' = None, Subject: 'typing.Optional[XResource_842709e4]' = None):
        self._graph = Graph
        self._object = Object
        self._predicate = Predicate
        self._subject = Subject

    @property
    def Graph(self) -> 'XURI_5682078c':
        """
        the named graph that contains this statement, or NULL.
        """
        return self._graph
    
    @Graph.setter
    def Graph(self, value: 'XURI_5682078c') -> None:
        self._graph = value

    @property
    def Object(self) -> 'XNode_5ee40822':
        """
        the object of the RDF statement.
        """
        return self._object
    
    @Object.setter
    def Object(self, value: 'XNode_5ee40822') -> None:
        self._object = value

    @property
    def Predicate(self) -> 'XURI_5682078c':
        """
        the predicate of the RDF statement.
        """
        return self._predicate
    
    @Predicate.setter
    def Predicate(self, value: 'XURI_5682078c') -> None:
        self._predicate = value

    @property
    def Subject(self) -> 'XResource_842709e4':
        """
        the subject of the RDF statement.
        """
        return self._subject
    
    @Subject.setter
    def Subject(self, value: 'XResource_842709e4') -> None:
        self._subject = value

def _dynamic_struct() -> None:
    # Dynamically create uno struct using uno
    global Statement
    ignore = os.environ.get('ooouno_ignore_runtime', 'False')
    if ignore == 'True':
        return
    if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
        order = ('Graph', 'Object', 'Predicate', 'Subject')
        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('com.sun.star.rdf.Statement')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        Statement = _struct_init

if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
    _dynamic_struct()

__all__ = ['Statement']
