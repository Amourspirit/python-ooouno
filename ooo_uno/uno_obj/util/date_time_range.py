# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.util
# Libre Office Version: 7.2
import os
import typing
from ooo_uno.oenv import UNO_ENVIRONMENT
if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
    from ooo_uno.helper import uno_helper


class DateTimeRange(object):
    """
    Struct Class

    represents a range of date+time values.
    
    **since**
    
        LibreOffice 4.1

    See Also:
        `API DateTimeRange <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1util_1_1DateTimeRange.html>`_


    Note:
        | At runtime DateTimeRange will be an actual uno struct however can seamlessly be treated as a regualr class.
        | At design time a class is presumed. This allows for better typings.
        | DateTimeRange is a callable and can be treatead as a class and create instances.
    """

    def __init__(self, EndDay: typing.Optional[int] = None, EndHours: typing.Optional[int] = None, EndMinutes: typing.Optional[int] = None, EndMonth: typing.Optional[int] = None, EndNanoSeconds: typing.Optional[int] = None, EndSeconds: typing.Optional[int] = None, EndYear: typing.Optional[int] = None, IsUTC: typing.Optional[bool] = None, StartDay: typing.Optional[int] = None, StartHours: typing.Optional[int] = None, StartMinutes: typing.Optional[int] = None, StartMonth: typing.Optional[int] = None, StartNanoSeconds: typing.Optional[int] = None, StartSeconds: typing.Optional[int] = None, StartYear: typing.Optional[int] = None):
        self._end_day = EndDay
        self._end_hours = EndHours
        self._end_minutes = EndMinutes
        self._end_month = EndMonth
        self._end_nano_seconds = EndNanoSeconds
        self._end_seconds = EndSeconds
        self._end_year = EndYear
        self._is_utc = IsUTC
        self._start_day = StartDay
        self._start_hours = StartHours
        self._start_minutes = StartMinutes
        self._start_month = StartMonth
        self._start_nano_seconds = StartNanoSeconds
        self._start_seconds = StartSeconds
        self._start_year = StartYear

    @property
    def EndDay(self) -> int:
        """
        contains the end day of month (1-31 or 0 for a void date) for the range.
        """
        return self._end_day
    
    @EndDay.setter
    def EndDay(self, value: int) -> None:
        self._end_day = value

    @property
    def EndHours(self) -> int:
        """
        contains the end hour (0-23) for the range.
        """
        return self._end_hours
    
    @EndHours.setter
    def EndHours(self, value: int) -> None:
        self._end_hours = value

    @property
    def EndMinutes(self) -> int:
        """
        contains the end minutes (0-59) for the range.
        """
        return self._end_minutes
    
    @EndMinutes.setter
    def EndMinutes(self, value: int) -> None:
        self._end_minutes = value

    @property
    def EndMonth(self) -> int:
        """
        contains the end month of year (1-12 or 0 for a void date) for the range.
        """
        return self._end_month
    
    @EndMonth.setter
    def EndMonth(self, value: int) -> None:
        self._end_month = value

    @property
    def EndNanoSeconds(self) -> int:
        """
        contains the end nanoseconds (0 - 999 999 999) for the range.
        """
        return self._end_nano_seconds
    
    @EndNanoSeconds.setter
    def EndNanoSeconds(self, value: int) -> None:
        self._end_nano_seconds = value

    @property
    def EndSeconds(self) -> int:
        """
        contains the end seconds (0-59) for the range.
        """
        return self._end_seconds
    
    @EndSeconds.setter
    def EndSeconds(self, value: int) -> None:
        self._end_seconds = value

    @property
    def EndYear(self) -> int:
        """
        contains the end year for the range.
        """
        return self._end_year
    
    @EndYear.setter
    def EndYear(self, value: int) -> None:
        self._end_year = value

    @property
    def IsUTC(self) -> bool:
        """
        true: time zone is UTC false: unknown time zone.
        
        **since**
        
            LibreOffice 4.1
        """
        return self._is_utc
    
    @IsUTC.setter
    def IsUTC(self, value: bool) -> None:
        self._is_utc = value

    @property
    def StartDay(self) -> int:
        """
        contains the start day of month (1-31 or 0 for a void date) for the range.
        """
        return self._start_day
    
    @StartDay.setter
    def StartDay(self, value: int) -> None:
        self._start_day = value

    @property
    def StartHours(self) -> int:
        """
        contains the start hour (0-23) for the range.
        """
        return self._start_hours
    
    @StartHours.setter
    def StartHours(self, value: int) -> None:
        self._start_hours = value

    @property
    def StartMinutes(self) -> int:
        """
        contains the start minutes (0-59) for the range.
        """
        return self._start_minutes
    
    @StartMinutes.setter
    def StartMinutes(self, value: int) -> None:
        self._start_minutes = value

    @property
    def StartMonth(self) -> int:
        """
        contains the start month of year (1-12 or 0 for a void date) for the range.
        """
        return self._start_month
    
    @StartMonth.setter
    def StartMonth(self, value: int) -> None:
        self._start_month = value

    @property
    def StartNanoSeconds(self) -> int:
        """
        contains the start nanoseconds (0 - 999 999 999) for the range.
        """
        return self._start_nano_seconds
    
    @StartNanoSeconds.setter
    def StartNanoSeconds(self, value: int) -> None:
        self._start_nano_seconds = value

    @property
    def StartSeconds(self) -> int:
        """
        contains the start seconds (0-59) for the range.
        """
        return self._start_seconds
    
    @StartSeconds.setter
    def StartSeconds(self, value: int) -> None:
        self._start_seconds = value

    @property
    def StartYear(self) -> int:
        """
        contains the start year for the range.
        """
        return self._start_year
    
    @StartYear.setter
    def StartYear(self, value: int) -> None:
        self._start_year = value

def _dynamic_struct() -> None:
    # Dynamically create uno struct using uno
    global DateTimeRange
    ignore = os.environ.get('ooouno_ignore_runtime', 'False')
    if ignore == 'True':
        return
    if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
        order = ('EndDay', 'EndHours', 'EndMinutes', 'EndMonth', 'EndNanoSeconds', 'EndSeconds', 'EndYear', 'IsUTC', 'StartDay', 'StartHours', 'StartMinutes', 'StartMonth', 'StartNanoSeconds', 'StartSeconds', 'StartYear')
        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('com.sun.star.util.DateTimeRange')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        DateTimeRange = _struct_init

if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
    _dynamic_struct()

__all__ = ['DateTimeRange']
