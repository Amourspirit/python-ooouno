# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.drawing
# Libre Office Version: 7.2
import typing
if typing.TYPE_CHECKING:
    from ..awt.point import Point as Point_5fb2085e
from ooo_uno.oenv import UNO_ENVIRONMENT, UNO_RUNTIME
_DYNAMIC = False
if (not typing.TYPE_CHECKING) and UNO_RUNTIME and UNO_ENVIRONMENT:
    _DYNAMIC = True
    from ooo_uno.helper import uno_helper

if typing.TYPE_CHECKING or _DYNAMIC is False:


    class BezierPoint(object):
        """
        Struct Class

        This is a point on a Bezier curve.
        
        The two control points specify how the Bezier curve goes through the given position.
        
        .. deprecated::
        
            Class is deprecated.

        See Also:
            `API BezierPoint <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1drawing_1_1BezierPoint.html>`_


        Note:
            | At runtime BezierPoint will be an actual uno struct however can seamlessly be treated as a regualr class.
            | At design time a class is presumed. This allows for better typings.
            | BezierPoint is a callable and can be treatead as a class and create instances.
        """

        def __init__(self, ControlPoint1: 'typing.Optional[Point_5fb2085e]' = None, ControlPoint2: 'typing.Optional[Point_5fb2085e]' = None, Position: 'typing.Optional[Point_5fb2085e]' = None):
            self._control_point1 = ControlPoint1
            self._control_point2 = ControlPoint2
            self._position = Position

        @property
        def ControlPoint1(self) -> 'Point_5fb2085e':
            """
            This is the position of the first control point.
            """
            return self._control_point1
        
        @ControlPoint1.setter
        def ControlPoint1(self, value: 'Point_5fb2085e') -> None:
            self._control_point1 = value

        @property
        def ControlPoint2(self) -> 'Point_5fb2085e':
            """
            This is the position of the second control point.
            """
            return self._control_point2
        
        @ControlPoint2.setter
        def ControlPoint2(self, value: 'Point_5fb2085e') -> None:
            self._control_point2 = value

        @property
        def Position(self) -> 'Point_5fb2085e':
            """
            This is the position of this point.
            """
            return self._position
        
        @Position.setter
        def Position(self, value: 'Point_5fb2085e') -> None:
            self._position = value

if not typing.TYPE_CHECKING and _DYNAMIC:
    def _dynamic_struct() -> None:
        # Dynamically create uno struct using uno
        global BezierPoint
        order = ('ControlPoint1', 'ControlPoint2', 'Position')

        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('com.sun.star.drawing.BezierPoint')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        BezierPoint = _struct_init

    _dynamic_struct()

__all__ = ['BezierPoint']
