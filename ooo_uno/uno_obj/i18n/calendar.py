# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.i18n
# Libre Office Version: 7.2
import os
import typing
if typing.TYPE_CHECKING:
    from .calendar_item import CalendarItem as CalendarItem_a86c0af1
from ooo_uno.oenv import UNO_ENVIRONMENT
if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
    from ooo_uno.helper import uno_helper


class Calendar(object):
    """
    Struct Class

    A calendar as returned in a sequence by XLocaleData.getAllCalendars().

    See Also:
        `API Calendar <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1i18n_1_1Calendar.html>`_


    Note:
        | At runtime Calendar will be an actual uno struct however can seamlessly be treated as a regualr class.
        | At design time a class is presumed. This allows for better typings.
        | Calendar is a callable and can be treatead as a class and create instances.
    """

    def __init__(self, Days: 'typing.Optional[typing.List[CalendarItem_a86c0af1]]' = None, Default: typing.Optional[bool] = None, Eras: 'typing.Optional[typing.List[CalendarItem_a86c0af1]]' = None, MinimumNumberOfDaysForFirstWeek: typing.Optional[int] = None, Months: 'typing.Optional[typing.List[CalendarItem_a86c0af1]]' = None, Name: typing.Optional[str] = None, StartOfWeek: typing.Optional[str] = None):
        self._days = Days
        self._default = Default
        self._eras = Eras
        self._minimum_number_of_days_for_first_week = MinimumNumberOfDaysForFirstWeek
        self._months = Months
        self._name = Name
        self._start_of_week = StartOfWeek

    @property
    def Days(self) -> 'typing.List[CalendarItem_a86c0af1]':
        """
        the days of the week, see also CalendarItem.
        """
        return self._days
    
    @Days.setter
    def Days(self, value: 'typing.List[CalendarItem_a86c0af1]') -> None:
        self._days = value

    @property
    def Default(self) -> bool:
        """
        if this is the default calendar for a given locale.
        """
        return self._default
    
    @Default.setter
    def Default(self, value: bool) -> None:
        self._default = value

    @property
    def Eras(self) -> 'typing.List[CalendarItem_a86c0af1]':
        """
        the possible eras, see also CalendarItem.
        """
        return self._eras
    
    @Eras.setter
    def Eras(self, value: 'typing.List[CalendarItem_a86c0af1]') -> None:
        self._eras = value

    @property
    def MinimumNumberOfDaysForFirstWeek(self) -> int:
        """
        how many days must reside in the first week of a year.
        """
        return self._minimum_number_of_days_for_first_week
    
    @MinimumNumberOfDaysForFirstWeek.setter
    def MinimumNumberOfDaysForFirstWeek(self, value: int) -> None:
        self._minimum_number_of_days_for_first_week = value

    @property
    def Months(self) -> 'typing.List[CalendarItem_a86c0af1]':
        """
        the months of the year, see also CalendarItem.
        """
        return self._months
    
    @Months.setter
    def Months(self, value: 'typing.List[CalendarItem_a86c0af1]') -> None:
        self._months = value

    @property
    def Name(self) -> str:
        """
        the name of the calendar, for example, Gregorian.
        """
        return self._name
    
    @Name.setter
    def Name(self, value: str) -> None:
        self._name = value

    @property
    def StartOfWeek(self) -> str:
        """
        the ID of the day with which the week begins.
        """
        return self._start_of_week
    
    @StartOfWeek.setter
    def StartOfWeek(self, value: str) -> None:
        self._start_of_week = value

def _dynamic_struct() -> None:
    # Dynamically create uno struct using uno
    global Calendar
    ignore = os.environ.get('ooouno_ignore_runtime', 'False')
    if ignore == 'True':
        return
    if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
        order = ('Days', 'Default', 'Eras', 'MinimumNumberOfDaysForFirstWeek', 'Months', 'Name', 'StartOfWeek')
        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('com.sun.star.i18n.Calendar')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        Calendar = _struct_init

if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
    _dynamic_struct()

__all__ = ['Calendar']
