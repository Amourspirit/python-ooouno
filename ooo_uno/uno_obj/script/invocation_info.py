# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.script
# Libre Office Version: 7.2
import os
import typing
if typing.TYPE_CHECKING:
    from ..reflection.param_mode import ParamMode as ParamMode_d7260ca9
    from .member_type import MemberType as MemberType_b1e00b97
from ooo_uno.oenv import UNO_ENVIRONMENT
if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
    from ooo_uno.helper import uno_helper


class InvocationInfo(object):
    """
    Struct Class

    This struct is used to specify information about object members (methods or properties) accessed via XInvocation, such as names, types, or parameters.

    See Also:
        `API InvocationInfo <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1script_1_1InvocationInfo.html>`_


    Note:
        | At runtime InvocationInfo will be an actual uno struct however can seamlessly be treated as a regualr class.
        | At design time a class is presumed. This allows for better typings.
        | InvocationInfo is a callable and can be treatead as a class and create instances.
    """

    def __init__(self, PropertyAttribute: typing.Optional[int] = None, aName: typing.Optional[str] = None, aParamModes: 'typing.Optional[typing.List[ParamMode_d7260ca9]]' = None, aParamTypes: 'typing.Optional[typing.List[object]]' = None, aType: typing.Optional[object] = None, eMemberType: 'typing.Optional[MemberType_b1e00b97]' = None):
        self._property_attribute = PropertyAttribute
        self._a_name = aName
        self._a_param_modes = aParamModes
        self._a_param_types = aParamTypes
        self._a_type = aType
        self._e_member_type = eMemberType

    @property
    def PropertyAttribute(self) -> int:
        """
        Only for property members: This field may contain zero or more constants of the com.sun.star.beans.PropertyAttribute constants group.
        
        It is not guaranteed that all necessary constants are set to describe the property completely, but a flag will only be set, if the corresponding charac- teristic really exists. Example: If the READONLY flag is set, the property is readonly. If it isn't set, the property nevertheless can be readonly.
        
        For methods this field is irrelevant and is set to 0.
        """
        return self._property_attribute
    
    @PropertyAttribute.setter
    def PropertyAttribute(self, value: int) -> None:
        self._property_attribute = value

    @property
    def aName(self) -> str:
        """
        Name of the method or property.
        """
        return self._a_name
    
    @aName.setter
    def aName(self, value: str) -> None:
        self._a_name = value

    @property
    def aParamModes(self) -> 'typing.List[ParamMode_d7260ca9]':
        """
        Mode of method parameters (IN, OUT, INOUT), for properties this sequence is empty.
        """
        return self._a_param_modes
    
    @aParamModes.setter
    def aParamModes(self, value: 'typing.List[ParamMode_d7260ca9]') -> None:
        self._a_param_modes = value

    @property
    def aParamTypes(self) -> 'typing.List[object]':
        """
        Types method parameters, for properties this sequence is empty.
        """
        return self._a_param_types
    
    @aParamTypes.setter
    def aParamTypes(self, value: 'typing.List[object]') -> None:
        self._a_param_types = value

    @property
    def aType(self) -> object:
        """
        Type of the member, for methods the return type.
        """
        return self._a_type
    
    @aType.setter
    def aType(self, value: object) -> None:
        self._a_type = value

    @property
    def eMemberType(self) -> 'MemberType_b1e00b97':
        """
        Kind of the member (method or property).
        """
        return self._e_member_type
    
    @eMemberType.setter
    def eMemberType(self, value: 'MemberType_b1e00b97') -> None:
        self._e_member_type = value

def _dynamic_struct() -> None:
    # Dynamically create uno struct using uno
    global InvocationInfo
    ignore = os.environ.get('ooouno_ignore_runtime', 'False')
    if ignore == 'True':
        return
    if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
        order = ('PropertyAttribute', 'aName', 'aParamModes', 'aParamTypes', 'aType', 'eMemberType')
        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('com.sun.star.script.InvocationInfo')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        InvocationInfo = _struct_init

if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
    _dynamic_struct()

__all__ = ['InvocationInfo']
