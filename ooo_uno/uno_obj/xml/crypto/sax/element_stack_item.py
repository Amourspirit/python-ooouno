# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.xml.crypto.sax
# Libre Office Version: 7.2
import typing
if typing.TYPE_CHECKING:
    from ...sax.x_attribute_list import XAttributeList as XAttributeList_eec70d7b
from ooo_uno.oenv import UNO_ENVIRONMENT, UNO_RUNTIME
_DYNAMIC = False
if (not typing.TYPE_CHECKING) and UNO_RUNTIME and UNO_ENVIRONMENT:
    _DYNAMIC = True
    from ooo_uno.helper import uno_helper

if typing.TYPE_CHECKING or _DYNAMIC is False:


    class ElementStackItem(object):
        """
        Struct Class

        A struct to keep a startElement/endElement SAX event.

        See Also:
            `API ElementStackItem <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1xml_1_1crypto_1_1sax_1_1ElementStackItem.html>`_


        Note:
            | At runtime ElementStackItem will be an actual uno struct however can seamlessly be treated as a regualr class.
            | At design time a class is presumed. This allows for better typings.
            | ElementStackItem is a callable and can be treatead as a class and create instances.
        """

        def __init__(self, elementName: typing.Optional[str] = None, isStartElementEvent: typing.Optional[bool] = None, xAttributes: 'typing.Optional[XAttributeList_eec70d7b]' = None):
            self._element_name = elementName
            self._is_start_element_event = isStartElementEvent
            self._x_attributes = xAttributes

        @property
        def elementName(self) -> str:
            """
            the name of the element
            """
            return self._element_name
        
        @elementName.setter
        def elementName(self, value: str) -> None:
            self._element_name = value

        @property
        def isStartElementEvent(self) -> bool:
            """
            whether it is a startElement event
            """
            return self._is_start_element_event
        
        @isStartElementEvent.setter
        def isStartElementEvent(self, value: bool) -> None:
            self._is_start_element_event = value

        @property
        def xAttributes(self) -> 'XAttributeList_eec70d7b':
            """
            attribute list for a startElement event
            """
            return self._x_attributes
        
        @xAttributes.setter
        def xAttributes(self, value: 'XAttributeList_eec70d7b') -> None:
            self._x_attributes = value

if not typing.TYPE_CHECKING and _DYNAMIC:
    def _dynamic_struct() -> None:
        # Dynamically create uno struct using uno
        global ElementStackItem
        order = ('elementName', 'isStartElementEvent', 'xAttributes')

        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('com.sun.star.xml.crypto.sax.ElementStackItem')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        ElementStackItem = _struct_init

    _dynamic_struct()

__all__ = ['ElementStackItem']
