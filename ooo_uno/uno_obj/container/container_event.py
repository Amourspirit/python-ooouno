# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.container
# Libre Office Version: 7.2
import os
from ..lang.event_object import EventObject as EventObject_a3d70b03
import typing
from ooo_uno.oenv import UNO_ENVIRONMENT
if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
    from ooo_uno.helper import uno_helper


class ContainerEvent(EventObject_a3d70b03):
    """
    Struct Class

    This event is fired when an element is inserted in a container.

    See Also:
        `API ContainerEvent <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1container_1_1ContainerEvent.html>`_


    Note:
        | At runtime ContainerEvent will be an actual uno struct however can seamlessly be treated as a regualr class.
        | At design time a class is presumed. This allows for better typings.
        | ContainerEvent is a callable and can be treatead as a class and create instances.
    """

    def __init__(self, Accessor: typing.Optional[object] = None, Element: typing.Optional[object] = None, ReplacedElement: typing.Optional[object] = None):
        self._accessor = Accessor
        self._element = Element
        self._replaced_element = ReplacedElement

    @property
    def Accessor(self) -> object:
        """
        It contains the accessor to the element which is inserted or removed.
        
        The type and the value of the accessor depends on the service.
        """
        return self._accessor
    
    @Accessor.setter
    def Accessor(self, value: object) -> None:
        self._accessor = value

    @property
    def Element(self) -> object:
        """
        This contains the element that was inserted or removed.
        """
        return self._element
    
    @Element.setter
    def Element(self, value: object) -> None:
        self._element = value

    @property
    def ReplacedElement(self) -> object:
        """
        This contains the replaced element.
        """
        return self._replaced_element
    
    @ReplacedElement.setter
    def ReplacedElement(self, value: object) -> None:
        self._replaced_element = value

def _dynamic_struct() -> None:
    # Dynamically create uno struct using uno
    global ContainerEvent
    ignore = os.environ.get('ooouno_ignore_runtime', 'False')
    if ignore == 'True':
        return
    if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
        order = ('Accessor', 'Element', 'ReplacedElement')
        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('com.sun.star.container.ContainerEvent')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        ContainerEvent = _struct_init

if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
    _dynamic_struct()

__all__ = ['ContainerEvent']
