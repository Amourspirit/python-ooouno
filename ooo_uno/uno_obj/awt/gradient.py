# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.awt
# Libre Office Version: 7.2
import typing
if typing.TYPE_CHECKING:
    from .gradient_style import GradientStyle as GradientStyle_b02b0b93
    from ..util.color import Color as Color_68e908c5
from ooo_uno.oenv import UNO_ENVIRONMENT, UNO_RUNTIME
_DYNAMIC = False
if (not typing.TYPE_CHECKING) and UNO_RUNTIME and UNO_ENVIRONMENT:
    _DYNAMIC = True
    from ooo_uno.helper import uno_helper

if typing.TYPE_CHECKING or _DYNAMIC is False:


    class Gradient(object):
        """
        Struct Class

        Describes a gradient between two colors.
        
        Many aspects of the gradient are undefined, like the algorithm and color space to use to interpolate between the colors and what \"intensity\" means.

        See Also:
            `API Gradient <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1awt_1_1Gradient.html>`_


        Note:
            | At runtime Gradient will be an actual uno struct however can seamlessly be treated as a regualr class.
            | At design time a class is presumed. This allows for better typings.
            | Gradient is a callable and can be treatead as a class and create instances.
        """

        def __init__(self, Angle: typing.Optional[int] = None, Border: typing.Optional[int] = None, EndColor: 'typing.Optional[Color_68e908c5]' = None, EndIntensity: typing.Optional[int] = None, StartColor: 'typing.Optional[Color_68e908c5]' = None, StartIntensity: typing.Optional[int] = None, StepCount: typing.Optional[int] = None, Style: 'typing.Optional[GradientStyle_b02b0b93]' = None, XOffset: typing.Optional[int] = None, YOffset: typing.Optional[int] = None):
            self._angle = Angle
            self._border = Border
            self._end_color = EndColor
            self._end_intensity = EndIntensity
            self._start_color = StartColor
            self._start_intensity = StartIntensity
            self._step_count = StepCount
            self._style = Style
            self._x_offset = XOffset
            self._y_offset = YOffset

        @property
        def Angle(self) -> int:
            """
            angle of the gradient in 1/10 degree.
            """
            return self._angle
        
        @Angle.setter
        def Angle(self, value: int) -> None:
            self._angle = value

        @property
        def Border(self) -> int:
            """
            per cent of the total width where just the start color is used.
            """
            return self._border
        
        @Border.setter
        def Border(self, value: int) -> None:
            self._border = value

        @property
        def EndColor(self) -> 'Color_68e908c5':
            """
            specifies the color at the end point of the gradient.
            """
            return self._end_color
        
        @EndColor.setter
        def EndColor(self, value: 'Color_68e908c5') -> None:
            self._end_color = value

        @property
        def EndIntensity(self) -> int:
            """
            specifies the intensity at the end point of the gradient.
            """
            return self._end_intensity
        
        @EndIntensity.setter
        def EndIntensity(self, value: int) -> None:
            self._end_intensity = value

        @property
        def StartColor(self) -> 'Color_68e908c5':
            """
            specifies the color at the start point of the gradient.
            """
            return self._start_color
        
        @StartColor.setter
        def StartColor(self, value: 'Color_68e908c5') -> None:
            self._start_color = value

        @property
        def StartIntensity(self) -> int:
            """
            Specifies the intensity at the start point of the gradient.
            
            What that means is undefined.
            """
            return self._start_intensity
        
        @StartIntensity.setter
        def StartIntensity(self, value: int) -> None:
            self._start_intensity = value

        @property
        def StepCount(self) -> int:
            """
            Specifies the number of steps of change color.
            
            What that means is undefined.
            """
            return self._step_count
        
        @StepCount.setter
        def StepCount(self, value: int) -> None:
            self._step_count = value

        @property
        def Style(self) -> 'GradientStyle_b02b0b93':
            """
            specifies the style of the gradient.
            """
            return self._style
        
        @Style.setter
        def Style(self, value: 'GradientStyle_b02b0b93') -> None:
            self._style = value

        @property
        def XOffset(self) -> int:
            """
            Specifies the X-coordinate, where the gradient begins.
            
            This is effectively the center of the RADIAL, ELLIPTICAL, SQUARE and RECT style gradients.
            """
            return self._x_offset
        
        @XOffset.setter
        def XOffset(self, value: int) -> None:
            self._x_offset = value

        @property
        def YOffset(self) -> int:
            """
            Specifies the Y-coordinate, where the gradient begins.
            
            See previous field.
            """
            return self._y_offset
        
        @YOffset.setter
        def YOffset(self, value: int) -> None:
            self._y_offset = value

if not typing.TYPE_CHECKING and _DYNAMIC:
    def _dynamic_struct() -> None:
        # Dynamically create uno struct using uno
        global Gradient
        order = ('Angle', 'Border', 'EndColor', 'EndIntensity', 'StartColor', 'StartIntensity', 'StepCount', 'Style', 'XOffset', 'YOffset')

        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('com.sun.star.awt.Gradient')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        Gradient = _struct_init

    _dynamic_struct()

__all__ = ['Gradient']
