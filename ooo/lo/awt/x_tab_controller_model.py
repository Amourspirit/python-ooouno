# coding: utf-8
#
# Copyright 2023 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Interface Class
# this is a auto generated file generated by Cheetah
# Libre Office Version: 7.4
# Namespace: com.sun.star.awt
from __future__ import annotations
import typing
from abc import abstractmethod
from ..uno.x_interface import XInterface as XInterface_8f010a43
if typing.TYPE_CHECKING:
    from .x_control_model import XControlModel as XControlModel_affc0b7e

class XTabControllerModel(XInterface_8f010a43):
    """
    specifies the basic operations for a tab controller model.

    See Also:
        `API XTabControllerModel <https://api.libreoffice.org/docs/idl/ref/interfacecom_1_1sun_1_1star_1_1awt_1_1XTabControllerModel.html>`_
    """
    __ooo_ns__: str = 'com.sun.star.awt'
    __ooo_full_ns__: str = 'com.sun.star.awt.XTabControllerModel'
    __ooo_type_name__: str = 'interface'
    __pyunointerface__: str = 'com.sun.star.awt.XTabControllerModel'

    @abstractmethod
    def getControlModels(self) -> typing.Tuple[XControlModel_affc0b7e, ...]:
        """
        returns the control models.
        """
        ...
    @abstractmethod
    def getGroup(self, nGroup: int, Group: typing.Tuple[XControlModel_affc0b7e, ...], Name: str) -> None:
        """
        returns a control model group.

        * ``Group`` is an out direction argument.
        * ``Name`` is an out direction argument.
        """
        ...
    @abstractmethod
    def getGroupByName(self, Name: str, Group: typing.Tuple[XControlModel_affc0b7e, ...]) -> None:
        """
        returns a control model group by name.

        * ``Group`` is an out direction argument.
        """
        ...
    @abstractmethod
    def getGroupControl(self) -> bool:
        """
        returns whether the control models are grouped together.
        """
        ...
    @abstractmethod
    def getGroupCount(self) -> int:
        """
        returns the number of control model groups.
        """
        ...
    @abstractmethod
    def setControlModels(self, Controls: typing.Tuple[XControlModel_affc0b7e, ...]) -> None:
        """
        sets the control models.
        """
        ...
    @abstractmethod
    def setGroup(self, Group: typing.Tuple[XControlModel_affc0b7e, ...], GroupName: str) -> None:
        """
        sets a control model group.
        """
        ...
    @abstractmethod
    def setGroupControl(self, GroupControl: bool) -> None:
        """
        determines if the control models are grouped together.
        """
        ...

__all__ = ['XTabControllerModel']

