# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.i18n
# Libre Office Version: 7.2


class LineBreakUserOptions(object):
    """
    Struct Class

    Line break options passed in calls to XBreakIterator.getLineBreak().

    See Also:
        `API LineBreakUserOptions <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1i18n_1_1LineBreakUserOptions.html>`_
    """
    __ooo_ns__: str = 'com.sun.star.i18n'
    __ooo_full_ns__: str = 'com.sun.star.i18n.LineBreakUserOptions'
    __ooo_type_name__: str = 'struct'
    typeName: str = 'com.sun.star.i18n.LineBreakUserOptions'
    """Literal Constant ``com.sun.star.i18n.LineBreakUserOptions``"""

    def __init__(self, *args, **kwargs):
        """
        Constructor

        Other Arguments:
            First positinal arg can be another ``LineBreakUserOptions`` instance,
                if it is the only argument passed to contructor;
                Otherwise, postitional arguments are treated as ``LineBreakUserOptions``
                values. Following the order of ``Keyword Arguments``.

        Keyword Arguments:
            forbiddenBeginCharacters (str, optional): forbiddenBeginCharacters value
            forbiddenEndCharacters (str, optional): forbiddenEndCharacters value
            applyForbiddenRules (bool, optional): applyForbiddenRules value
            allowPunctuationOutsideMargin (bool, optional): allowPunctuationOutsideMargin value
            allowHyphenateEnglish (bool, optional): allowHyphenateEnglish value
        """
        self._forbidden_begin_characters = None
        self._forbidden_end_characters = None
        self._apply_forbidden_rules = None
        self._allow_punctuation_outside_margin = None
        self._allow_hyphenate_english = None

        key_order = ('forbiddenBeginCharacters', 'forbiddenEndCharacters', 'applyForbiddenRules', 'allowPunctuationOutsideMargin', 'allowHyphenateEnglish')
        arg_len = len(args)
        if arg_len == 1:
            if isinstance(args[0], LineBreakUserOptions):
                oth = args[0]
                for key in key_order:
                    setattr(self, key, getattr(oth, key))
                return

        if  arg_len > len(key_order):
            raise ValueError("LineBreakUserOptions.__init__() To many parameters")
        for i, arg in enumerate(args):
            setattr(self, key_order[i], arg)
        for k, v in kwargs.items():
            if k in key_order:
                setattr(self, k, v)


    @property
    def forbiddenBeginCharacters(self) -> str:
        """
        Characters not allowed at the beginning of a line.
        """
        return self._forbidden_begin_characters
    
    @forbiddenBeginCharacters.setter
    def forbiddenBeginCharacters(self, value: str) -> None:
        self._forbidden_begin_characters = value

    @property
    def forbiddenEndCharacters(self) -> str:
        """
        Characters not allowed at the end of a line.
        """
        return self._forbidden_end_characters
    
    @forbiddenEndCharacters.setter
    def forbiddenEndCharacters(self, value: str) -> None:
        self._forbidden_end_characters = value

    @property
    def applyForbiddenRules(self) -> bool:
        """
        If the forbidden characters rules are to be applied or not.
        """
        return self._apply_forbidden_rules
    
    @applyForbiddenRules.setter
    def applyForbiddenRules(self, value: bool) -> None:
        self._apply_forbidden_rules = value

    @property
    def allowPunctuationOutsideMargin(self) -> bool:
        """
        If punctuation characters are allowed at the end of the line if outside of the margins, resulting in a line not being wrapped if only the punctuation would wrap.
        """
        return self._allow_punctuation_outside_margin
    
    @allowPunctuationOutsideMargin.setter
    def allowPunctuationOutsideMargin(self, value: bool) -> None:
        self._allow_punctuation_outside_margin = value

    @property
    def allowHyphenateEnglish(self) -> bool:
        """
        Allow English hyphenation.
        """
        return self._allow_hyphenate_english
    
    @allowHyphenateEnglish.setter
    def allowHyphenateEnglish(self, value: bool) -> None:
        self._allow_hyphenate_english = value


__all__ = ['LineBreakUserOptions']
