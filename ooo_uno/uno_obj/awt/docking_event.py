# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.awt
# Libre Office Version: 7.2
import os
from ..lang.event_object import EventObject as EventObject_a3d70b03
import typing
if typing.TYPE_CHECKING:
    from .point import Point as Point_5fb2085e
    from .rectangle import Rectangle as Rectangle_84b109e9
from ooo_uno.oenv import UNO_ENVIRONMENT
if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
    from ooo_uno.helper import uno_helper


class DockingEvent(EventObject_a3d70b03):
    """
    Struct Class

    specifies a docking event.

    See Also:
        `API DockingEvent <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1awt_1_1DockingEvent.html>`_


    Note:
        | At runtime DockingEvent will be an actual uno struct however can seamlessly be treated as a regualr class.
        | At design time a class is presumed. This allows for better typings.
        | DockingEvent is a callable and can be treatead as a class and create instances.
    """

    def __init__(self, MousePos: 'typing.Optional[Point_5fb2085e]' = None, TrackingRectangle: 'typing.Optional[Rectangle_84b109e9]' = None, bInteractive: typing.Optional[bool] = None, bLiveMode: typing.Optional[bool] = None):
        self._mouse_pos = MousePos
        self._tracking_rectangle = TrackingRectangle
        self._b_interactive = bInteractive
        self._b_live_mode = bLiveMode

    @property
    def MousePos(self) -> 'Point_5fb2085e':
        """
        specifies the current mouse position in frame coordinates
        """
        return self._mouse_pos
    
    @MousePos.setter
    def MousePos(self, value: 'Point_5fb2085e') -> None:
        self._mouse_pos = value

    @property
    def TrackingRectangle(self) -> 'Rectangle_84b109e9':
        """
        specifies the current tracking rectangle
        """
        return self._tracking_rectangle
    
    @TrackingRectangle.setter
    def TrackingRectangle(self, value: 'Rectangle_84b109e9') -> None:
        self._tracking_rectangle = value

    @property
    def bInteractive(self) -> bool:
        """
        specifies if the docking procedure is interactive which means that the user is currently dragging the window to a new position if this member is FALSE the window will be docked or undocked immediately using the returned tracking rectangle
        """
        return self._b_interactive
    
    @bInteractive.setter
    def bInteractive(self, value: bool) -> None:
        self._b_interactive = value

    @property
    def bLiveMode(self) -> bool:
        """
        specifies if the layout should be adjusted immediately
        """
        return self._b_live_mode
    
    @bLiveMode.setter
    def bLiveMode(self, value: bool) -> None:
        self._b_live_mode = value

def _dynamic_struct() -> None:
    # Dynamically create uno struct using uno
    global DockingEvent
    ignore = os.environ.get('ooouno_ignore_runtime', 'False')
    if ignore == 'True':
        return
    if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
        order = ('MousePos', 'TrackingRectangle', 'bInteractive', 'bLiveMode')
        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('com.sun.star.awt.DockingEvent')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        DockingEvent = _struct_init

if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
    _dynamic_struct()

__all__ = ['DockingEvent']
