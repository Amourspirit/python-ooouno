# coding: utf-8
#
# Copyright 2023-2024 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.awt
# Libre Office Version: 2024.2
from ooo.oenv.env_const import UNO_NONE
from .gradient import Gradient as Gradient_7a8a0982
from .gradient_style import GradientStyle as GradientStyle_b02b0b93
from ..util.color import Color as Color_68e908c5
from ..util.color import Color as Color_68e908c5
import typing
from .color_stop_sequence import ColorStopSequence as ColorStopSequence_e2d70d32


class Gradient2(Gradient_7a8a0982):
    """
    Struct Class

    This struct extends the Gradient definition by adding a sequence of ColorStops to allow definition of multi-color gradients.

    See Also:
        `API Gradient2 <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1awt_1_1Gradient2.html>`_
    """
    __ooo_ns__: str = 'com.sun.star.awt'
    __ooo_full_ns__: str = 'com.sun.star.awt.Gradient2'
    __ooo_type_name__: str = 'struct'
    typeName: str = 'com.sun.star.awt.Gradient2'
    """Literal Constant ``com.sun.star.awt.Gradient2``"""

    def __init__(self, Style: typing.Optional[GradientStyle_b02b0b93] = GradientStyle_b02b0b93.LINEAR, StartColor: typing.Optional[Color_68e908c5] = Color_68e908c5(0), EndColor: typing.Optional[Color_68e908c5] = Color_68e908c5(0), Angle: typing.Optional[int] = 0, Border: typing.Optional[int] = 0, XOffset: typing.Optional[int] = 0, YOffset: typing.Optional[int] = 0, StartIntensity: typing.Optional[int] = 0, EndIntensity: typing.Optional[int] = 0, StepCount: typing.Optional[int] = 0, ColorStops: typing.Optional[ColorStopSequence_e2d70d32] = ColorStopSequence_e2d70d32(())) -> None:
        """
        Constructor

        Arguments:
            Style (GradientStyle, optional): Style value.
            StartColor (Color, optional): StartColor value.
            EndColor (Color, optional): EndColor value.
            Angle (int, optional): Angle value.
            Border (int, optional): Border value.
            XOffset (int, optional): XOffset value.
            YOffset (int, optional): YOffset value.
            StartIntensity (int, optional): StartIntensity value.
            EndIntensity (int, optional): EndIntensity value.
            StepCount (int, optional): StepCount value.
            ColorStops (ColorStopSequence, optional): ColorStops value.
        """

        if isinstance(Style, Gradient2):
            oth: Gradient2 = Style
            self.Style = oth.Style
            self.StartColor = oth.StartColor
            self.EndColor = oth.EndColor
            self.Angle = oth.Angle
            self.Border = oth.Border
            self.XOffset = oth.XOffset
            self.YOffset = oth.YOffset
            self.StartIntensity = oth.StartIntensity
            self.EndIntensity = oth.EndIntensity
            self.StepCount = oth.StepCount
            self.ColorStops = oth.ColorStops
            return

        kargs = {
            "Style": Style,
            "StartColor": StartColor,
            "EndColor": EndColor,
            "Angle": Angle,
            "Border": Border,
            "XOffset": XOffset,
            "YOffset": YOffset,
            "StartIntensity": StartIntensity,
            "EndIntensity": EndIntensity,
            "StepCount": StepCount,
            "ColorStops": ColorStops,
        }
        self._init(**kargs)

    def _init(self, **kwargs) -> None:
        self._color_stops = kwargs["ColorStops"]
        inst_keys = ('ColorStops',)
        kargs = kwargs.copy()
        for key in inst_keys:
            del kargs[key]
        super()._init(**kargs)


    @property
    def ColorStops(self) -> ColorStopSequence_e2d70d32:
        """
        contains the full multi-color gradient definition.
        """
        return self._color_stops

    @ColorStops.setter
    def ColorStops(self, value: ColorStopSequence_e2d70d32) -> None:
        self._color_stops = value


__all__ = ['Gradient2']
