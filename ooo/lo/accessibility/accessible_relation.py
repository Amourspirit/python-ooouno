# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.accessibility
# Libre Office Version: 7.2
import typing
from ..uno.x_interface import XInterface as XInterface_8f010a43


class AccessibleRelation(object):
    """
    Struct Class

    An AccessibleRelation object defines a one-to-many relation.
    
    The represented relation points from the implementing object to a set of target objects.
    
    **since**
    
        OOo 1.1.2

    See Also:
        `API AccessibleRelation <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1accessibility_1_1AccessibleRelation.html>`_
    """
    __ooo_ns__: str = 'com.sun.star.accessibility'
    __ooo_full_ns__: str = 'com.sun.star.accessibility.AccessibleRelation'
    __ooo_type_name__: str = 'struct'
    typeName: str = 'com.sun.star.accessibility.AccessibleRelation'
    """Literal Constant ``com.sun.star.accessibility.AccessibleRelation``"""

    TargetSet: typing.TypeAlias = typing.Tuple[XInterface_8f010a43, ...]
    """
    Set of objects that are the relation's targets.
    
    The content of this set is undefined if the relation's type is INVALID. The set must not contain references to one object more than once.
    """

    def __init__(self, *args, **kwargs):
        """
        Constructor

        Other Arguments:
            First positinal arg can be another ``AccessibleRelation`` instance,
                if it is the only argument passed to contructor;
                Otherwise, postitional arguments are treated as ``AccessibleRelation``
                values. Following the order of ``Keyword Arguments``.

        Keyword Arguments:
            RelationType (int, optional): RelationType value
        """
        self._relation_type = None

        key_order = ('RelationType',)
        arg_len = len(args)
        if arg_len == 1:
            if isinstance(args[0], AccessibleRelation):
                oth = args[0]
                for key in key_order:
                    setattr(self, key, getattr(oth, key))
                return

        if  arg_len > len(key_order):
            raise ValueError("AccessibleRelation.__init__() To many parameters")
        for i, arg in enumerate(args):
            setattr(self, key_order[i], arg)
        for k, v in kwargs.items():
            if k in key_order:
                setattr(self, k, v)

    @property
    def RelationType(self) -> int:
        """
        Type of the relation.
        
        Its value has to be one of the constants defined by AccessibleRelationType. If that value is INVALID then the whole relation is regarded as invalid. The content of the TargetSet is then undefined.
        """
        return self._relation_type
    
    @RelationType.setter
    def RelationType(self, value: int) -> None:
        self._relation_type = value


__all__ = ['AccessibleRelation']
