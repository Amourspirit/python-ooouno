# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.beans
# Libre Office Version: 7.2
import typing
if typing.TYPE_CHECKING:
    from .property_state import PropertyState as PropertyState_c97b0c77
from ooo_uno.oenv import UNO_ENVIRONMENT, UNO_RUNTIME
_DYNAMIC = False
if (not typing.TYPE_CHECKING) and UNO_RUNTIME and UNO_ENVIRONMENT:
    _DYNAMIC = True
    from ooo_uno.helper import uno_helper

if typing.TYPE_CHECKING or _DYNAMIC is False:


    class PropertyValue(object):
        """
        Struct Class

        specifies a property value.

        See Also:
            `API PropertyValue <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1beans_1_1PropertyValue.html>`_


        Note:
            | At runtime PropertyValue will be an actual uno struct however can seamlessly be treated as a regualr class.
            | At design time a class is presumed. This allows for better typings.
            | PropertyValue is a callable and can be treatead as a class and create instances.
        """

        def __init__(self, Handle: typing.Optional[int] = None, Name: typing.Optional[str] = None, State: 'typing.Optional[PropertyState_c97b0c77]' = None, Value: typing.Optional[object] = None):
            self._handle = Handle
            self._name = Name
            self._state = State
            self._value = Value

        @property
        def Handle(self) -> int:
            """
            contains an implementation-specific handle for the property.
            
            It may be -1 if the implementation has no handle. If available it can be used for fast lookups.
            """
            return self._handle
        
        @Handle.setter
        def Handle(self, value: int) -> None:
            self._handle = value

        @property
        def Name(self) -> str:
            """
            specifies the name of the property.
            
            The name is unique within a sequence of PropertyValues. Upper and lower case are distinguished.
            """
            return self._name
        
        @Name.setter
        def Name(self, value: str) -> None:
            self._name = value

        @property
        def State(self) -> 'PropertyState_c97b0c77':
            """
            determines if the value comes from the object itself or from a default and if the value cannot be determined exactly.
            """
            return self._state
        
        @State.setter
        def State(self, value: 'PropertyState_c97b0c77') -> None:
            self._state = value

        @property
        def Value(self) -> object:
            """
            contains the value of the property or VOID, if no value is available.
            """
            return self._value
        
        @Value.setter
        def Value(self, value: object) -> None:
            self._value = value

if not typing.TYPE_CHECKING and _DYNAMIC:
    def _dynamic_struct() -> None:
        # Dynamically create uno struct using uno
        global PropertyValue
        order = ('Handle', 'Name', 'State', 'Value')

        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('com.sun.star.beans.PropertyValue')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        PropertyValue = _struct_init

    _dynamic_struct()

__all__ = ['PropertyValue']
