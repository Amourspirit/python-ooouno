# coding: utf-8
#
# Copyright 2023 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Enum Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.reflection
# Libre Office Version: 7.4
from __future__ import annotations
import uno
from typing import TYPE_CHECKING


if TYPE_CHECKING:

    class MethodMode(uno.Enum):
        """
        Enum Class


        See Also:
            `API MethodMode <https://api.libreoffice.org/docs/idl/ref/namespacecom_1_1sun_1_1star_1_1reflection.html#a5e114fee85d0f2f8cb01480a474dd9b4>`_
        """
        __ooo_ns__: str = ...
        __ooo_full_ns__: str = ...
        __ooo_type_name__: str = ...

        @property
        def typeName(self) -> str:
            ...

        ONEWAY: MethodMode = ...
        """
        method may be run asynchronously
        """
        TWOWAY: MethodMode = ...
        """
        method is run The
        """

else:

    from ooo.helper.enum_helper import UnoEnumMeta
    class MethodMode(metaclass=UnoEnumMeta, type_name="com.sun.star.reflection.MethodMode", name_space="com.sun.star.reflection"):
        """Dynamically created class that represents ``com.sun.star.reflection.MethodMode`` Enum. Class loosely mimics Enum"""
        pass

__all__ = ['MethodMode']

