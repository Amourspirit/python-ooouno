# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.awt
# Libre Office Version: 7.2
from ..lang.event_object import EventObject as EventObject_a3d70b03


class WindowEvent(EventObject_a3d70b03):
    """
    Struct Class

    specifies a window event.

    See Also:
        `API WindowEvent <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1awt_1_1WindowEvent.html>`_
    """
    __ooo_ns__: str = 'com.sun.star.awt'
    __ooo_full_ns__: str = 'com.sun.star.awt.WindowEvent'
    __ooo_type_name__: str = 'struct'
    typeName: str = 'com.sun.star.awt.WindowEvent'
    """Literal Constant ``com.sun.star.awt.WindowEvent``"""


    def __init__(self, *args, **kwargs):
        """
        Constructor

        Other Arguments:
            First positinal arg can be another ``WindowEvent`` instance,
                if it is the only argument passed to contructor;
                Otherwise, postitional arguments are treated as ``WindowEvent``
                values. Following the order of ``Keyword Arguments``.

        Keyword Arguments:
            X (int, optional): X value
            Y (int, optional): Y value
            Width (int, optional): Width value
            Height (int, optional): Height value
            LeftInset (int, optional): LeftInset value
            TopInset (int, optional): TopInset value
            RightInset (int, optional): RightInset value
            BottomInset (int, optional): BottomInset value
        """
        self._x = None
        self._y = None
        self._width = None
        self._height = None
        self._left_inset = None
        self._top_inset = None
        self._right_inset = None
        self._bottom_inset = None

        key_order = ('X', 'Y', 'Width', 'Height', 'LeftInset', 'TopInset', 'RightInset', 'BottomInset')
        arg_len = len(args)
        if arg_len == 1:
            if isinstance(args[0], WindowEvent):
                oth = args[0]
                for key in key_order:
                    setattr(self, key, getattr(oth, key))
                return

        if  arg_len > len(key_order):
            raise ValueError("WindowEvent.__init__() To many parameters")
        for i, arg in enumerate(args):
            setattr(self, key_order[i], arg)
        for k, v in kwargs.items():
            if k in key_order:
                setattr(self, k, v)

    @property
    def X(self) -> int:
        """
        specifies the outer x position of the window.
        """
        return self._x
    
    @X.setter
    def X(self, value: int) -> None:
        self._x = value

    @property
    def Y(self) -> int:
        """
        specifies the outer y position of the window.
        """
        return self._y
    
    @Y.setter
    def Y(self, value: int) -> None:
        self._y = value

    @property
    def Width(self) -> int:
        """
        specifies the outer (total) width of the window.
        """
        return self._width
    
    @Width.setter
    def Width(self, value: int) -> None:
        self._width = value

    @property
    def Height(self) -> int:
        """
        specifies the outer (total) height of the window.
        """
        return self._height
    
    @Height.setter
    def Height(self, value: int) -> None:
        self._height = value

    @property
    def LeftInset(self) -> int:
        """
        specifies the inset from the left.
        
        The inset is the distance between the outer and the inner window, that means the left inset is the width of the left border.
        """
        return self._left_inset
    
    @LeftInset.setter
    def LeftInset(self, value: int) -> None:
        self._left_inset = value

    @property
    def TopInset(self) -> int:
        """
        specifies the inset from the top.
        
        The inset is the distance between the outer and the inner window, that means the top inset is the height of the top border.
        """
        return self._top_inset
    
    @TopInset.setter
    def TopInset(self, value: int) -> None:
        self._top_inset = value

    @property
    def RightInset(self) -> int:
        """
        specifies the inset from the right.
        
        The inset is the distance between the outer and the inner window, that means the right inset is the width of the right border.
        """
        return self._right_inset
    
    @RightInset.setter
    def RightInset(self, value: int) -> None:
        self._right_inset = value

    @property
    def BottomInset(self) -> int:
        """
        specifies the inset from the bottom.
        
        The inset is the distance between the outer and the inner window, that means the bottom inset is the height of the bottom border.
        """
        return self._bottom_inset
    
    @BottomInset.setter
    def BottomInset(self, value: int) -> None:
        self._bottom_inset = value


__all__ = ['WindowEvent']
