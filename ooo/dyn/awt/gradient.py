# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.awt
# Libre Office Version: 7.2
from typing import TYPE_CHECKING
from ooo.oenv import UNO_ENVIRONMENT, UNO_RUNTIME, UNO_NONE
_DYNAMIC = False
if (not TYPE_CHECKING) and UNO_RUNTIME and UNO_ENVIRONMENT:
    _DYNAMIC = True

if not TYPE_CHECKING and _DYNAMIC:
    def _dynamic_struct():
        import uno
        from com.sun.star.awt import Gradient as UGradient
        # Dynamically create uno com.sun.star.awt.Gradient using uno
        global Gradient

        def _set_attr(struct):
            struct.__dict__['__ooo_ns__'] = 'com.sun.star.awt'
            struct.__dict__['__ooo_full_ns__'] = 'com.sun.star.awt.Gradient'
            struct.__dict__['__ooo_type_name__'] = 'struct'

        def _struct_init(Style = UNO_NONE, StartColor = UNO_NONE, EndColor = UNO_NONE, Angle = UNO_NONE, Border = UNO_NONE, XOffset = UNO_NONE, YOffset = UNO_NONE, StartIntensity = UNO_NONE, EndIntensity = UNO_NONE, StepCount = UNO_NONE):
            ns = 'com.sun.star.awt.Gradient'
            if isinstance(Style, UGradient):
                inst = uno.createUnoStruct(ns, Style)
                _set_attr(inst)
                return inst
            struct = uno.createUnoStruct(ns)

            if not Style is UNO_NONE:
                if getattr(struct, 'Style') != Style:
                    setattr(struct, 'Style', Style)
            if not StartColor is UNO_NONE:
                if getattr(struct, 'StartColor') != StartColor:
                    setattr(struct, 'StartColor', StartColor)
            if not EndColor is UNO_NONE:
                if getattr(struct, 'EndColor') != EndColor:
                    setattr(struct, 'EndColor', EndColor)
            if not Angle is UNO_NONE:
                if getattr(struct, 'Angle') != Angle:
                    setattr(struct, 'Angle', Angle)
            if not Border is UNO_NONE:
                if getattr(struct, 'Border') != Border:
                    setattr(struct, 'Border', Border)
            if not XOffset is UNO_NONE:
                if getattr(struct, 'XOffset') != XOffset:
                    setattr(struct, 'XOffset', XOffset)
            if not YOffset is UNO_NONE:
                if getattr(struct, 'YOffset') != YOffset:
                    setattr(struct, 'YOffset', YOffset)
            if not StartIntensity is UNO_NONE:
                if getattr(struct, 'StartIntensity') != StartIntensity:
                    setattr(struct, 'StartIntensity', StartIntensity)
            if not EndIntensity is UNO_NONE:
                if getattr(struct, 'EndIntensity') != EndIntensity:
                    setattr(struct, 'EndIntensity', EndIntensity)
            if not StepCount is UNO_NONE:
                if getattr(struct, 'StepCount') != StepCount:
                    setattr(struct, 'StepCount', StepCount)
            _set_attr(struct)
            return struct
        Gradient = _struct_init

    _dynamic_struct()
else:
    from ...lo.awt.gradient import Gradient as Gradient

__all__ = ['Gradient']

