# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.connection
# Libre Office Version: 7.2
import os
import typing
from ooo_uno.oenv import UNO_ENVIRONMENT
if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
    from ooo_uno.helper import uno_helper


class SocketPermission(object):
    """
    Struct Class

    This permission represents access to a network via sockets.
    
    A SocketPermission consists of a host specification and a set of actions specifying ways to connect to that host. The host is specified as
    
    The host is expressed as a DNS name, as a numerical IP address, or as \"localhost\" (for the local machine). The wildcard \"*\" may be included once in a DNS name host specification. If it is included, it must be in the leftmost position, as in \"*.sun.com\".
    The port or portrange is optional. A port specification of the form \"N-\", where N is a port number, signifies all ports numbered N and above, while a specification of the form \"-N\" indicates all ports numbered N and below.
    
    The possible ways to connect to the host are
    
    The \"listen\" action is only meaningful when used with \"localhost\". The \"resolve\" (resolve host/ip name service lookups) action is implied when any of the other actions are present.
    As an example of the creation and meaning of SocketPermissions, note that if the following permission
    
    is granted, it allows to connect to port 7777 on foo.bar.com, and to accept connections on that port.
    Similarly, if the following permission
    
    is granted, it allows that code to accept connections on, connect to, or listen on any port between 1024 and 65535 on the local host.
    
    **since**
    
        OOo 1.1.2

    See Also:
        `API SocketPermission <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1connection_1_1SocketPermission.html>`_


    Note:
        | At runtime SocketPermission will be an actual uno struct however can seamlessly be treated as a regualr class.
        | At design time a class is presumed. This allows for better typings.
        | SocketPermission is a callable and can be treatead as a class and create instances.
    """

    def __init__(self, Actions: typing.Optional[str] = None, Host: typing.Optional[str] = None):
        self._actions = Actions
        self._host = Host

    @property
    def Actions(self) -> str:
        """
        comma separated actions list
        """
        return self._actions
    
    @Actions.setter
    def Actions(self, value: str) -> None:
        self._actions = value

    @property
    def Host(self) -> str:
        """
        target host with optional portrange
        """
        return self._host
    
    @Host.setter
    def Host(self, value: str) -> None:
        self._host = value

def _dynamic_struct() -> None:
    # Dynamically create uno struct using uno
    global SocketPermission
    ignore = os.environ.get('ooouno_ignore_runtime', 'False')
    if ignore == 'True':
        return
    if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
        order = ('Actions', 'Host')
        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('com.sun.star.connection.SocketPermission')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        SocketPermission = _struct_init

if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
    _dynamic_struct()

__all__ = ['SocketPermission']
