# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.ucb
# Libre Office Version: 7.2
from ..lang.event_object import EventObject as EventObject_a3d70b03
import typing
if typing.TYPE_CHECKING:
    from .x_content import XContent as XContent_79db0975
    from .x_content_identifier import XContentIdentifier as XContentIdentifier_edc90d78
from ooo_uno.oenv import UNO_ENVIRONMENT, UNO_RUNTIME
_DYNAMIC = False
if (not typing.TYPE_CHECKING) and UNO_RUNTIME and UNO_ENVIRONMENT:
    _DYNAMIC = True
    from ooo_uno.helper import uno_helper

if typing.TYPE_CHECKING or _DYNAMIC is False:


    class ContentEvent(EventObject_a3d70b03):
        """
        Struct Class

        A structure for content events.

        See Also:
            `API ContentEvent <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1ucb_1_1ContentEvent.html>`_


        Note:
            | At runtime ContentEvent will be an actual uno struct however can seamlessly be treated as a regualr class.
            | At design time a class is presumed. This allows for better typings.
            | ContentEvent is a callable and can be treatead as a class and create instances.
        """

        def __init__(self, Action: typing.Optional[int] = None, Content: 'typing.Optional[XContent_79db0975]' = None, Id: 'typing.Optional[XContentIdentifier_edc90d78]' = None):
            self._action = Action
            self._content = Content
            self._id = Id

        @property
        def Action(self) -> int:
            """
            The action.
            
            The value can be one of the ContentAction constants.
            """
            return self._action
        
        @Action.setter
        def Action(self, value: int) -> None:
            self._action = value

        @property
        def Content(self) -> 'XContent_79db0975':
            """
            The content to that the action is related (e.g., the content that was just physically destroyed, the content that was just inserted into a folder content).
            
            This member must be filled as follows:
            """
            return self._content
        
        @Content.setter
        def Content(self, value: 'XContent_79db0975') -> None:
            self._content = value

        @property
        def Id(self) -> 'XContentIdentifier_edc90d78':
            """
            A content identifier, which must be filled according to the action notified (e.g., the id of the folder content into which another content was inserted).
            
            This member must be filled as follows:
            """
            return self._id
        
        @Id.setter
        def Id(self, value: 'XContentIdentifier_edc90d78') -> None:
            self._id = value

if not typing.TYPE_CHECKING and _DYNAMIC:
    def _dynamic_struct() -> None:
        # Dynamically create uno struct using uno
        global ContentEvent
        order = ('Action', 'Content', 'Id')

        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('com.sun.star.ucb.ContentEvent')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        ContentEvent = _struct_init

    _dynamic_struct()

__all__ = ['ContentEvent']
