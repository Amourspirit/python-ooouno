# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.script
# Libre Office Version: 7.2
from ..lang.event_object import EventObject as EventObject_a3d70b03
import typing
if typing.TYPE_CHECKING:
    from .interrupt_reason import InterruptReason as InterruptReason_f3d00dd2
from ooo_uno.oenv import UNO_ENVIRONMENT, UNO_RUNTIME
_DYNAMIC = False
if (not typing.TYPE_CHECKING) and UNO_RUNTIME and UNO_ENVIRONMENT:
    _DYNAMIC = True
    from ooo_uno.helper import uno_helper

if typing.TYPE_CHECKING or _DYNAMIC is False:


    class InterruptEngineEvent(EventObject_a3d70b03):
        """
        Struct Class

        describes an interrupt which occurs in the scripting engine.
        
        .. deprecated::
        
            Class is deprecated.

        See Also:
            `API InterruptEngineEvent <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1script_1_1InterruptEngineEvent.html>`_


        Note:
            | At runtime InterruptEngineEvent will be an actual uno struct however can seamlessly be treated as a regualr class.
            | At design time a class is presumed. This allows for better typings.
            | InterruptEngineEvent is a callable and can be treatead as a class and create instances.
        """

        def __init__(self, EndColumn: typing.Optional[int] = None, EndLine: typing.Optional[int] = None, ErrorMessage: typing.Optional[str] = None, Name: typing.Optional[str] = None, Reason: 'typing.Optional[InterruptReason_f3d00dd2]' = None, SourceCode: typing.Optional[str] = None, StartColumn: typing.Optional[int] = None, StartLine: typing.Optional[int] = None):
            self._end_column = EndColumn
            self._end_line = EndLine
            self._error_message = ErrorMessage
            self._name = Name
            self._reason = Reason
            self._source_code = SourceCode
            self._start_column = StartColumn
            self._start_line = StartLine

        @property
        def EndColumn(self) -> int:
            """
            contains the first column in the \"EndLine\" which is NOT affected by the event that took place.
            """
            return self._end_column
        
        @EndColumn.setter
        def EndColumn(self, value: int) -> None:
            self._end_column = value

        @property
        def EndLine(self) -> int:
            """
            contains the last line in the module's source code that is affected by the event that took place.
            """
            return self._end_line
        
        @EndLine.setter
        def EndLine(self, value: int) -> None:
            self._end_line = value

        @property
        def ErrorMessage(self) -> str:
            """
            error message.
            
            Only valid if Reason is RuntimeError or CompileError.
            """
            return self._error_message
        
        @ErrorMessage.setter
        def ErrorMessage(self, value: str) -> None:
            self._error_message = value

        @property
        def Name(self) -> str:
            """
            fully qualified name to address the module or function affected by the event that took place.
            
            If the module or function can't be addressed by name (for example, in case that a runtime-generated eval-module is executed), this string is empty.
            """
            return self._name
        
        @Name.setter
        def Name(self, value: str) -> None:
            self._name = value

        @property
        def Reason(self) -> 'InterruptReason_f3d00dd2':
            """
            contains the interrupt reason.
            """
            return self._reason
        
        @Reason.setter
        def Reason(self, value: 'InterruptReason_f3d00dd2') -> None:
            self._reason = value

        @property
        def SourceCode(self) -> str:
            """
            source code of the Module affected by the event that took place.
            
            If the source can be accessed using the ModuleName, or if the source is unknown (executing compiled code), this string can be empty.
            """
            return self._source_code
        
        @SourceCode.setter
        def SourceCode(self, value: str) -> None:
            self._source_code = value

        @property
        def StartColumn(self) -> int:
            """
            contains the first column in the \"StartLine\" that is affected by the event that took place.
            """
            return self._start_column
        
        @StartColumn.setter
        def StartColumn(self, value: int) -> None:
            self._start_column = value

        @property
        def StartLine(self) -> int:
            """
            contains the first line in the module's source code that is affected by the event that took place.
            
            If \"name\" addresses a function, all line and column values are nevertheless given relative to the module's source. If source code is not available, this value addresses a binary position in the compiled code.
            """
            return self._start_line
        
        @StartLine.setter
        def StartLine(self, value: int) -> None:
            self._start_line = value

if not typing.TYPE_CHECKING and _DYNAMIC:
    def _dynamic_struct() -> None:
        # Dynamically create uno struct using uno
        global InterruptEngineEvent
        order = ('EndColumn', 'EndLine', 'ErrorMessage', 'Name', 'Reason', 'SourceCode', 'StartColumn', 'StartLine')

        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('com.sun.star.script.InterruptEngineEvent')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        InterruptEngineEvent = _struct_init

    _dynamic_struct()

__all__ = ['InterruptEngineEvent']
