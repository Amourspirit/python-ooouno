# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.frame
# Libre Office Version: 7.2
import typing
if typing.TYPE_CHECKING:
    from ..util.url import URL as URL_57ad07b9
from ooo_uno.oenv import UNO_ENVIRONMENT, UNO_RUNTIME
_DYNAMIC = False
if (not typing.TYPE_CHECKING) and UNO_RUNTIME and UNO_ENVIRONMENT:
    _DYNAMIC = True
    from ooo_uno.helper import uno_helper

if typing.TYPE_CHECKING or _DYNAMIC is False:


    class DispatchDescriptor(object):
        """
        Struct Class

        describes a feature to be retrieved by a URL that has to be loaded into a specified frame
        
        For a normal dispatch calls all needed parameters are separated. For optimized remote functionality XDispatch.queryDispatches() it's necessary to pack these parameters in a flat structure which can be used in a simple manner.

        See Also:
            `API DispatchDescriptor <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1frame_1_1DispatchDescriptor.html>`_


        Note:
            | At runtime DispatchDescriptor will be an actual uno struct however can seamlessly be treated as a regualr class.
            | At design time a class is presumed. This allows for better typings.
            | DispatchDescriptor is a callable and can be treatead as a class and create instances.
        """

        def __init__(self, FeatureURL: 'typing.Optional[URL_57ad07b9]' = None, FrameName: typing.Optional[str] = None, SearchFlags: typing.Optional[int] = None):
            self._feature_url = FeatureURL
            self._frame_name = FrameName
            self._search_flags = SearchFlags

        @property
        def FeatureURL(self) -> 'URL_57ad07b9':
            """
            specifies the URL of the resource/function
            
            Must be a full parsed URL. Use service com.sun.star.util.URLTransformer for that.
            """
            return self._feature_url
        
        @FeatureURL.setter
        def FeatureURL(self, value: 'URL_57ad07b9') -> None:
            self._feature_url = value

        @property
        def FrameName(self) -> str:
            """
            name of the target frame
            
            Special targets (e.g. \"_blank\", \"_self\") or really existing target names can be used.
            """
            return self._frame_name
        
        @FrameName.setter
        def FrameName(self, value: str) -> None:
            self._frame_name = value

        @property
        def SearchFlags(self) -> int:
            """
            describes how the target frame is to be searched
            
            This optional parameter is used if FrameName isn't a special target only.
            """
            return self._search_flags
        
        @SearchFlags.setter
        def SearchFlags(self, value: int) -> None:
            self._search_flags = value

if not typing.TYPE_CHECKING and _DYNAMIC:
    def _dynamic_struct() -> None:
        # Dynamically create uno struct using uno
        global DispatchDescriptor
        order = ('FeatureURL', 'FrameName', 'SearchFlags')

        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('com.sun.star.frame.DispatchDescriptor')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        DispatchDescriptor = _struct_init

    _dynamic_struct()

__all__ = ['DispatchDescriptor']
