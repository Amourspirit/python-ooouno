# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.chart2.data
# Libre Office Version: 7.2
import typing
from ooo_uno.oenv import UNO_ENVIRONMENT, UNO_RUNTIME
_DYNAMIC = False
if (not typing.TYPE_CHECKING) and UNO_RUNTIME and UNO_ENVIRONMENT:
    _DYNAMIC = True
    from ooo_uno.helper import uno_helper

if typing.TYPE_CHECKING or _DYNAMIC is False:


    class HighlightedRange(object):
        """
        Struct Class


        See Also:
            `API HighlightedRange <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1chart2_1_1data_1_1HighlightedRange.html>`_


        Note:
            | At runtime HighlightedRange will be an actual uno struct however can seamlessly be treated as a regualr class.
            | At design time a class is presumed. This allows for better typings.
            | HighlightedRange is a callable and can be treatead as a class and create instances.
        """

        def __init__(self, AllowMerginigWithOtherRanges: typing.Optional[bool] = None, Index: typing.Optional[int] = None, PreferredColor: typing.Optional[int] = None, RangeRepresentation: typing.Optional[str] = None):
            self._allow_merginig_with_other_ranges = AllowMerginigWithOtherRanges
            self._index = Index
            self._preferred_color = PreferredColor
            self._range_representation = RangeRepresentation

        @property
        def AllowMerginigWithOtherRanges(self) -> bool:
            """
            If the highlighted range is visually highlighted and this member is TRUE, the range given in RangeRepresentation may be included in a merged range rectangle spanning a bigger range.
            """
            return self._allow_merginig_with_other_ranges
        
        @AllowMerginigWithOtherRanges.setter
        def AllowMerginigWithOtherRanges(self, value: bool) -> None:
            self._allow_merginig_with_other_ranges = value

        @property
        def Index(self) -> int:
            """
            Only take the cell at position Index out of the given Range.
            
            If this value is -1 take the whole sequence.
            """
            return self._index
        
        @Index.setter
        def Index(self, value: int) -> None:
            self._index = value

        @property
        def PreferredColor(self) -> int:
            """
            Use this color for marking the range.
            
            This color may be ignored and replaced by a better fitting color, if it would be otherwise not well visible.
            """
            return self._preferred_color
        
        @PreferredColor.setter
        def PreferredColor(self, value: int) -> None:
            self._preferred_color = value

        @property
        def RangeRepresentation(self) -> str:
            """
            The range representation string of the highlighted range.
            """
            return self._range_representation
        
        @RangeRepresentation.setter
        def RangeRepresentation(self, value: str) -> None:
            self._range_representation = value

if not typing.TYPE_CHECKING and _DYNAMIC:
    def _dynamic_struct() -> None:
        # Dynamically create uno struct using uno
        global HighlightedRange
        order = ('AllowMerginigWithOtherRanges', 'Index', 'PreferredColor', 'RangeRepresentation')

        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('com.sun.star.chart2.data.HighlightedRange')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        HighlightedRange = _struct_init

    _dynamic_struct()

__all__ = ['HighlightedRange']
