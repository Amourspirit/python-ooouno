# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.ucb
# Libre Office Version: 7.2
import os
import typing
if typing.TYPE_CHECKING:
    from .rule_term import RuleTerm as RuleTerm_7a4b0972
from ooo_uno.oenv import UNO_ENVIRONMENT
if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
    from ooo_uno.helper import uno_helper


class Rule(object):
    """
    Struct Class

    describes a rule that can be applies to a number of objects.
    
    A rule consists of a sequence of RuleTerms describing the objects to which the rule should be applied, the RuleAction which should be used on the matching objects, and a parameter.

    See Also:
        `API Rule <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1ucb_1_1Rule.html>`_


    Note:
        | At runtime Rule will be an actual uno struct however can seamlessly be treated as a regualr class.
        | At design time a class is presumed. This allows for better typings.
        | Rule is a callable and can be treatead as a class and create instances.
    """

    def __init__(self, Action: typing.Optional[int] = None, Parameter: typing.Optional[str] = None, Terms: 'typing.Optional[typing.List[RuleTerm_7a4b0972]]' = None):
        self._action = Action
        self._parameter = Parameter
        self._terms = Terms

    @property
    def Action(self) -> int:
        """
        the action to perform on the matching objects.
        
        The value can be one of the RuleAction constants.
        """
        return self._action
    
    @Action.setter
    def Action(self, value: int) -> None:
        self._action = value

    @property
    def Parameter(self) -> str:
        """
        Some RuleActions require a parameter.
        """
        return self._parameter
    
    @Parameter.setter
    def Parameter(self, value: str) -> None:
        self._parameter = value

    @property
    def Terms(self) -> 'typing.List[RuleTerm_7a4b0972]':
        """
        the rule terms describing the objects to which the rule should be applied.
        """
        return self._terms
    
    @Terms.setter
    def Terms(self, value: 'typing.List[RuleTerm_7a4b0972]') -> None:
        self._terms = value

def _dynamic_struct() -> None:
    # Dynamically create uno struct using uno
    global Rule
    ignore = os.environ.get('ooouno_ignore_runtime', 'False')
    if ignore == 'True':
        return
    if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
        order = ('Action', 'Parameter', 'Terms')
        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('com.sun.star.ucb.Rule')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        Rule = _struct_init

if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
    _dynamic_struct()

__all__ = ['Rule']
