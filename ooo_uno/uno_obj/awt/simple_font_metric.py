# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.awt
# Libre Office Version: 7.2
import os
import typing
from ooo_uno.oenv import UNO_ENVIRONMENT
if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
    from ooo_uno.helper import uno_helper


class SimpleFontMetric(object):
    """
    Struct Class

    describes the general metrics of a certain font.

    See Also:
        `API SimpleFontMetric <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1awt_1_1SimpleFontMetric.html>`_


    Note:
        | At runtime SimpleFontMetric will be an actual uno struct however can seamlessly be treated as a regualr class.
        | At design time a class is presumed. This allows for better typings.
        | SimpleFontMetric is a callable and can be treatead as a class and create instances.
    """

    def __init__(self, Ascent: typing.Optional[int] = None, Descent: typing.Optional[int] = None, FirstChar: typing.Optional[str] = None, LastChar: typing.Optional[str] = None, Leading: typing.Optional[int] = None, Slant: typing.Optional[int] = None):
        self._ascent = Ascent
        self._descent = Descent
        self._first_char = FirstChar
        self._last_char = LastChar
        self._leading = Leading
        self._slant = Slant

    @property
    def Ascent(self) -> int:
        """
        specifies the portion of a lower case character that rises above the height of the character \"x\" of the font.
        
        For example, the letters \"b\", \"d\", \"h\", \"k\" and \"l\" have an ascent unequal to 0.
        
        The ascent is measured in pixels, thus the font metric is device dependent.
        """
        return self._ascent
    
    @Ascent.setter
    def Ascent(self, value: int) -> None:
        self._ascent = value

    @property
    def Descent(self) -> int:
        """
        specifies the portion of a letter falling below the baseline.
        
        For example, the letters \"g\", \"p\", and \"y\" have a descent unequal to 0.
        
        The descent is measured in pixels, thus the font metric is device dependent.
        """
        return self._descent
    
    @Descent.setter
    def Descent(self, value: int) -> None:
        self._descent = value

    @property
    def FirstChar(self) -> str:
        """
        specifies the code of the first printable character in the font.
        """
        return self._first_char
    
    @FirstChar.setter
    def FirstChar(self, value: str) -> None:
        self._first_char = value

    @property
    def LastChar(self) -> str:
        """
        specifies the code of the last printable character in the font.
        """
        return self._last_char
    
    @LastChar.setter
    def LastChar(self, value: str) -> None:
        self._last_char = value

    @property
    def Leading(self) -> int:
        """
        specifies the vertical space between lines of this font; it is also called internal line spacing.
        
        The leading is measured in pixels, thus the font metric is device dependent.
        """
        return self._leading
    
    @Leading.setter
    def Leading(self, value: int) -> None:
        self._leading = value

    @property
    def Slant(self) -> int:
        """
        specifies the slant of the characters (italic).
        
        The slant is measured in degrees from 0 to 359.
        """
        return self._slant
    
    @Slant.setter
    def Slant(self, value: int) -> None:
        self._slant = value

def _dynamic_struct() -> None:
    # Dynamically create uno struct using uno
    global SimpleFontMetric
    ignore = os.environ.get('ooouno_ignore_runtime', 'False')
    if ignore == 'True':
        return
    if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
        order = ('Ascent', 'Descent', 'FirstChar', 'LastChar', 'Leading', 'Slant')
        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('com.sun.star.awt.SimpleFontMetric')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        SimpleFontMetric = _struct_init

if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
    _dynamic_struct()

__all__ = ['SimpleFontMetric']
