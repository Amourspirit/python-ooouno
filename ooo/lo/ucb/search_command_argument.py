# coding: utf-8
#
# Copyright 2023-2024 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.ucb
# Libre Office Version: 2024.2
from ooo.oenv.env_const import UNO_NONE
import typing
from ..beans.property import Property as Property_8f4e0a76
from .search_info import SearchInfo as SearchInfo_8daf0a24


class SearchCommandArgument(object):
    """
    Struct Class

    The argument for the command \"search\".

    See Also:
        `API SearchCommandArgument <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1ucb_1_1SearchCommandArgument.html>`_
    """
    __ooo_ns__: str = 'com.sun.star.ucb'
    __ooo_full_ns__: str = 'com.sun.star.ucb.SearchCommandArgument'
    __ooo_type_name__: str = 'struct'
    typeName: str = 'com.sun.star.ucb.SearchCommandArgument'
    """Literal Constant ``com.sun.star.ucb.SearchCommandArgument``"""

    def __init__(self, Info: typing.Optional[SearchInfo_8daf0a24] = UNO_NONE, Properties: typing.Optional[typing.Tuple[Property_8f4e0a76, ...]] = ()) -> None:
        """
        Constructor

        Arguments:
            Info (SearchInfo, optional): Info value.
            Properties (typing.Tuple[Property, ...], optional): Properties value.
        """
        super().__init__()

        if isinstance(Info, SearchCommandArgument):
            oth: SearchCommandArgument = Info
            self.Info = oth.Info
            self.Properties = oth.Properties
            return

        kargs = {
            "Info": Info,
            "Properties": Properties,
        }
        if kargs["Info"] is UNO_NONE:
            kargs["Info"] = None
        self._init(**kargs)

    def _init(self, **kwargs) -> None:
        self._info = kwargs["Info"]
        self._properties = kwargs["Properties"]


    @property
    def Info(self) -> SearchInfo_8daf0a24:
        """
        the search criteria.
        """
        return self._info

    @Info.setter
    def Info(self, value: SearchInfo_8daf0a24) -> None:
        self._info = value

    @property
    def Properties(self) -> typing.Tuple[Property_8f4e0a76, ...]:
        """
        the properties for which values shall be provided through the ContentResultSet returned by the search command.
        """
        return self._properties

    @Properties.setter
    def Properties(self, value: typing.Tuple[Property_8f4e0a76, ...]) -> None:
        self._properties = value


__all__ = ['SearchCommandArgument']
