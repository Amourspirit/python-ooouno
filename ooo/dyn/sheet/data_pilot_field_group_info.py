# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.sheet
# Libre Office Version: 7.2
from typing import TYPE_CHECKING
from ooo.oenv import UNO_ENVIRONMENT, UNO_RUNTIME, UNO_NONE
_DYNAMIC = False
if (not TYPE_CHECKING) and UNO_RUNTIME and UNO_ENVIRONMENT:
    _DYNAMIC = True

if not TYPE_CHECKING and _DYNAMIC:
    def _dynamic_struct():
        import uno
        from com.sun.star.sheet import DataPilotFieldGroupInfo as UDataPilotFieldGroupInfo
        # Dynamically create uno com.sun.star.sheet.DataPilotFieldGroupInfo using uno
        global DataPilotFieldGroupInfo

        def _set_attr(struct):
            struct.__dict__['__ooo_ns__'] = 'com.sun.star.sheet'
            struct.__dict__['__ooo_full_ns__'] = 'com.sun.star.sheet.DataPilotFieldGroupInfo'
            struct.__dict__['__ooo_type_name__'] = 'struct'

        def _struct_init(HasAutoStart = UNO_NONE, HasAutoEnd = UNO_NONE, HasDateValues = UNO_NONE, Start = UNO_NONE, End = UNO_NONE, Step = UNO_NONE, GroupBy = UNO_NONE, SourceField = UNO_NONE, Groups = UNO_NONE):
            ns = 'com.sun.star.sheet.DataPilotFieldGroupInfo'
            if isinstance(HasAutoStart, UDataPilotFieldGroupInfo):
                inst = uno.createUnoStruct(ns, HasAutoStart)
                _set_attr(inst)
                return inst
            struct = uno.createUnoStruct(ns)

            if not HasAutoStart is UNO_NONE:
                if getattr(struct, 'HasAutoStart') != HasAutoStart:
                    setattr(struct, 'HasAutoStart', HasAutoStart)
            if not HasAutoEnd is UNO_NONE:
                if getattr(struct, 'HasAutoEnd') != HasAutoEnd:
                    setattr(struct, 'HasAutoEnd', HasAutoEnd)
            if not HasDateValues is UNO_NONE:
                if getattr(struct, 'HasDateValues') != HasDateValues:
                    setattr(struct, 'HasDateValues', HasDateValues)
            if not Start is UNO_NONE:
                if getattr(struct, 'Start') != Start:
                    setattr(struct, 'Start', Start)
            if not End is UNO_NONE:
                if getattr(struct, 'End') != End:
                    setattr(struct, 'End', End)
            if not Step is UNO_NONE:
                if getattr(struct, 'Step') != Step:
                    setattr(struct, 'Step', Step)
            if not GroupBy is UNO_NONE:
                if getattr(struct, 'GroupBy') != GroupBy:
                    setattr(struct, 'GroupBy', GroupBy)
            if not SourceField is UNO_NONE:
                if getattr(struct, 'SourceField') != SourceField:
                    setattr(struct, 'SourceField', SourceField)
            if not Groups is UNO_NONE:
                if getattr(struct, 'Groups') != Groups:
                    setattr(struct, 'Groups', Groups)
            _set_attr(struct)
            return struct
        DataPilotFieldGroupInfo = _struct_init

    _dynamic_struct()
else:
    from ...lo.sheet.data_pilot_field_group_info import DataPilotFieldGroupInfo as DataPilotFieldGroupInfo

__all__ = ['DataPilotFieldGroupInfo']

