# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.drawing.framework
# Libre Office Version: 7.2
import os
from ...lang.event_object import EventObject as EventObject_a3d70b03
import typing
if typing.TYPE_CHECKING:
    from .x_configuration import XConfiguration as XConfiguration_8f0511a0
    from .x_resource_id import XResourceId as XResourceId_5be3103d
    from ...uno.x_interface import XInterface as XInterface_8f010a43
from ooo_uno.oenv import UNO_ENVIRONMENT
if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
    from ooo_uno.helper import uno_helper


class ConfigurationChangeEvent(EventObject_a3d70b03):
    """
    Struct Class

    Objects of this class are used for notifying changes of the configuration.
    
    They are broadcasted by the configuration controller which maintains the configuration. The set of types of configuration changes is not fixed and is not maintained or documented in one place.
    
    The set of used members and the exact meaning of their values is not the same for all types. Therefore, the descriptions of the members are just general guidelines. See XConfigurationController for a list of event types used by the basic drawing framework.

    See Also:
        `API ConfigurationChangeEvent <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1drawing_1_1framework_1_1ConfigurationChangeEvent.html>`_


    Note:
        | At runtime ConfigurationChangeEvent will be an actual uno struct however can seamlessly be treated as a regualr class.
        | At design time a class is presumed. This allows for better typings.
        | ConfigurationChangeEvent is a callable and can be treatead as a class and create instances.
    """

    def __init__(self, Configuration: 'typing.Optional[XConfiguration_8f0511a0]' = None, ResourceId: 'typing.Optional[XResourceId_5be3103d]' = None, ResourceObject: 'typing.Optional[XInterface_8f010a43]' = None, Type: typing.Optional[str] = None, UserData: typing.Optional[object] = None):
        self._configuration = Configuration
        self._resource_id = ResourceId
        self._resource_object = ResourceObject
        self._type = Type
        self._user_data = UserData

    @property
    def Configuration(self) -> 'XConfiguration_8f0511a0':
        """
        The current configuration, depending on the event type, either before or after the change.
        
        May be an empty reference.
        """
        return self._configuration
    
    @Configuration.setter
    def Configuration(self, value: 'XConfiguration_8f0511a0') -> None:
        self._configuration = value

    @property
    def ResourceId(self) -> 'XResourceId_5be3103d':
        """
        The resource id that is part of the configuration change.
        """
        return self._resource_id
    
    @ResourceId.setter
    def ResourceId(self, value: 'XResourceId_5be3103d') -> None:
        self._resource_id = value

    @property
    def ResourceObject(self) -> 'XInterface_8f010a43':
        """
        The resource object that corresponds to the ResourceId.
        
        May be an empty reference.
        """
        return self._resource_object
    
    @ResourceObject.setter
    def ResourceObject(self, value: 'XInterface_8f010a43') -> None:
        self._resource_object = value

    @property
    def Type(self) -> str:
        """
        The type of configuration change is a free-form string.
        
        This is the only member that is always set. The values of the other members depend on the configuration change type and may or may not be set.
        """
        return self._type
    
    @Type.setter
    def Type(self, value: str) -> None:
        self._type = value

    @property
    def UserData(self) -> object:
        """
        Each listener is called with exactly the UserData that was given when the listener was registered.
        """
        return self._user_data
    
    @UserData.setter
    def UserData(self, value: object) -> None:
        self._user_data = value

def _dynamic_struct() -> None:
    # Dynamically create uno struct using uno
    global ConfigurationChangeEvent
    ignore = os.environ.get('ooouno_ignore_runtime', 'False')
    if ignore == 'True':
        return
    if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
        order = ('Configuration', 'ResourceId', 'ResourceObject', 'Type', 'UserData')
        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('com.sun.star.drawing.framework.ConfigurationChangeEvent')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        ConfigurationChangeEvent = _struct_init

if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
    _dynamic_struct()

__all__ = ['ConfigurationChangeEvent']
