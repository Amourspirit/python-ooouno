# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.sheet
# Libre Office Version: 7.2
import os
import typing
from ooo_uno.oenv import UNO_ENVIRONMENT
if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
    from ooo_uno.helper import uno_helper


class DataPilotFieldReference(object):
    """
    Struct Class

    controls how a data pilot field's results are shown in relation to a selected reference result.

    See Also:
        `API DataPilotFieldReference <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1sheet_1_1DataPilotFieldReference.html>`_


    Note:
        | At runtime DataPilotFieldReference will be an actual uno struct however can seamlessly be treated as a regualr class.
        | At design time a class is presumed. This allows for better typings.
        | DataPilotFieldReference is a callable and can be treatead as a class and create instances.
    """

    def __init__(self, ReferenceField: typing.Optional[str] = None, ReferenceItemName: typing.Optional[str] = None, ReferenceItemType: typing.Optional[int] = None, ReferenceType: typing.Optional[int] = None):
        self._reference_field = ReferenceField
        self._reference_item_name = ReferenceItemName
        self._reference_item_type = ReferenceItemType
        self._reference_type = ReferenceType

    @property
    def ReferenceField(self) -> str:
        """
        contains the reference field
        """
        return self._reference_field
    
    @ReferenceField.setter
    def ReferenceField(self, value: str) -> None:
        self._reference_field = value

    @property
    def ReferenceItemName(self) -> str:
        """
        contains the name of the reference item, when the DataPilotFieldReference.ReferenceItemType is NAMED otherwise is empty
        """
        return self._reference_item_name
    
    @ReferenceItemName.setter
    def ReferenceItemName(self, value: str) -> None:
        self._reference_item_name = value

    @property
    def ReferenceItemType(self) -> int:
        """
        selects between a named reference item and using the previous or next item for each item from the reference field.
        """
        return self._reference_item_type
    
    @ReferenceItemType.setter
    def ReferenceItemType(self, value: int) -> None:
        self._reference_item_type = value

    @property
    def ReferenceType(self) -> int:
        """
        contains the type of the reference.
        """
        return self._reference_type
    
    @ReferenceType.setter
    def ReferenceType(self, value: int) -> None:
        self._reference_type = value

def _dynamic_struct() -> None:
    # Dynamically create uno struct using uno
    global DataPilotFieldReference
    ignore = os.environ.get('ooouno_ignore_runtime', 'False')
    if ignore == 'True':
        return
    if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
        order = ('ReferenceField', 'ReferenceItemName', 'ReferenceItemType', 'ReferenceType')
        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('com.sun.star.sheet.DataPilotFieldReference')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        DataPilotFieldReference = _struct_init

if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
    _dynamic_struct()

__all__ = ['DataPilotFieldReference']
