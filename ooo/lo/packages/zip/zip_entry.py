# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.packages.zip
# Libre Office Version: 7.2
import typing


class ZipEntry(object):
    """
    Struct Class

    used to represent a ZIP file entry
    
    This interface is an IDL version of the Java interface java.util.zip.ZipFile with some minor adaptations.

    See Also:
        `API ZipEntry <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1packages_1_1zip_1_1ZipEntry.html>`_
    """
    __ooo_ns__: str = 'com.sun.star.packages.zip'
    __ooo_full_ns__: str = 'com.sun.star.packages.zip.ZipEntry'
    __ooo_type_name__: str = 'struct'
    typeName: str = 'com.sun.star.packages.zip.ZipEntry'
    """Literal Constant ``com.sun.star.packages.zip.ZipEntry``"""

    extra: typing.TypeAlias = typing.Tuple[int, ...]
    """
    optional extra field data for entry
    """

    def __init__(self, *args, **kwargs):
        """
        Constructor

        Other Arguments:
            First positinal arg can be another ``ZipEntry`` instance,
                if it is the only argument passed to contructor;
                Otherwise, postitional arguments are treated as ``ZipEntry``
                values. Following the order of ``Keyword Arguments``.

        Keyword Arguments:
            nVersion (int, optional): nVersion value
            nFlag (int, optional): nFlag value
            nMethod (int, optional): nMethod value
            nTime (int, optional): nTime value
            nCrc (int, optional): nCrc value
            nCompressedSize (int, optional): nCompressedSize value
            nSize (int, optional): nSize value
            nOffset (int, optional): nOffset value
            nDiskNumber (int, optional): nDiskNumber value
            sName (str, optional): sName value
            sComment (str, optional): sComment value
        """
        self._n_version = None
        self._n_flag = None
        self._n_method = None
        self._n_time = None
        self._n_crc = None
        self._n_compressed_size = None
        self._n_size = None
        self._n_offset = None
        self._n_disk_number = None
        self._s_name = None
        self._s_comment = None

        key_order = ('nVersion', 'nFlag', 'nMethod', 'nTime', 'nCrc', 'nCompressedSize', 'nSize', 'nOffset', 'nDiskNumber', 'sName', 'sComment')
        arg_len = len(args)
        if arg_len == 1:
            if isinstance(args[0], ZipEntry):
                oth = args[0]
                for key in key_order:
                    setattr(self, key, getattr(oth, key))
                return

        if  arg_len > len(key_order):
            raise ValueError("ZipEntry.__init__() To many parameters")
        for i, arg in enumerate(args):
            setattr(self, key_order[i], arg)
        for k, v in kwargs.items():
            if k in key_order:
                setattr(self, k, v)

    @property
    def nVersion(self) -> int:
        """
        version needed to extract
        """
        return self._n_version
    
    @nVersion.setter
    def nVersion(self, value: int) -> None:
        self._n_version = value

    @property
    def nFlag(self) -> int:
        """
        bit flags
        """
        return self._n_flag
    
    @nFlag.setter
    def nFlag(self, value: int) -> None:
        self._n_flag = value

    @property
    def nMethod(self) -> int:
        """
        compression method
        """
        return self._n_method
    
    @nMethod.setter
    def nMethod(self, value: int) -> None:
        self._n_method = value

    @property
    def nTime(self) -> int:
        """
        modification time
        """
        return self._n_time
    
    @nTime.setter
    def nTime(self, value: int) -> None:
        self._n_time = value

    @property
    def nCrc(self) -> int:
        """
        CRC-32 of entry data.
        """
        return self._n_crc
    
    @nCrc.setter
    def nCrc(self, value: int) -> None:
        self._n_crc = value

    @property
    def nCompressedSize(self) -> int:
        """
        uncompressed size of entry data
        """
        return self._n_compressed_size
    
    @nCompressedSize.setter
    def nCompressedSize(self, value: int) -> None:
        self._n_compressed_size = value

    @property
    def nSize(self) -> int:
        """
        uncompressed size of entry data
        """
        return self._n_size
    
    @nSize.setter
    def nSize(self, value: int) -> None:
        self._n_size = value

    @property
    def nOffset(self) -> int:
        """
        offset of LOC header
        """
        return self._n_offset
    
    @nOffset.setter
    def nOffset(self, value: int) -> None:
        self._n_offset = value

    @property
    def nDiskNumber(self) -> int:
        """
        The number of the disk this entry is saved on.
        """
        return self._n_disk_number
    
    @nDiskNumber.setter
    def nDiskNumber(self, value: int) -> None:
        self._n_disk_number = value

    @property
    def sName(self) -> str:
        """
        the entry name
        """
        return self._s_name
    
    @sName.setter
    def sName(self, value: str) -> None:
        self._s_name = value

    @property
    def sComment(self) -> str:
        """
        optional comment
        """
        return self._s_comment
    
    @sComment.setter
    def sComment(self, value: str) -> None:
        self._s_comment = value


__all__ = ['ZipEntry']
