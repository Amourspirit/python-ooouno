# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.sheet
# Libre Office Version: 7.2


class DataPilotTableHeaderData(object):
    """
    Struct Class

    information about a cell within the column or row header area of a DataPilot table.
    
    This struct contains information about a particular cell located within the column or row header area of a DataPilot table. This is the type that is contained in DataPilotTablePositionData.PositionData when the value of DataPilotTablePositionData.PositionType is either DataPilotTablePositionType.ROW_HEADER or DataPilotTablePositionType.COLUMN_HEADER.
    
    **since**
    
        OOo 3.0

    See Also:
        `API DataPilotTableHeaderData <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1sheet_1_1DataPilotTableHeaderData.html>`_
    """
    __ooo_ns__: str = 'com.sun.star.sheet'
    __ooo_full_ns__: str = 'com.sun.star.sheet.DataPilotTableHeaderData'
    __ooo_type_name__: str = 'struct'
    typeName: str = 'com.sun.star.sheet.DataPilotTableHeaderData'
    """Literal Constant ``com.sun.star.sheet.DataPilotTableHeaderData``"""

    def __init__(self, *args, **kwargs):
        """
        Constructor

        Other Arguments:
            First positinal arg can be another ``DataPilotTableHeaderData`` instance,
                if it is the only argument passed to contructor;
                Otherwise, postitional arguments are treated as ``DataPilotTableHeaderData``
                values. Following the order of ``Keyword Arguments``.

        Keyword Arguments:
            Dimension (int, optional): Dimension value
            Hierarchy (int, optional): Hierarchy value
            Level (int, optional): Level value
            Flags (int, optional): Flags value
            MemberName (str, optional): MemberName value
        """
        self._dimension = None
        self._hierarchy = None
        self._level = None
        self._flags = None
        self._member_name = None

        key_order = ('Dimension', 'Hierarchy', 'Level', 'Flags', 'MemberName')
        arg_len = len(args)
        if arg_len == 1:
            if isinstance(args[0], DataPilotTableHeaderData):
                oth = args[0]
                for key in key_order:
                    setattr(self, key, getattr(oth, key))
                return

        if  arg_len > len(key_order):
            raise ValueError("DataPilotTableHeaderData.__init__() To many parameters")
        for i, arg in enumerate(args):
            setattr(self, key_order[i], arg)
        for k, v in kwargs.items():
            if k in key_order:
                setattr(self, k, v)


    @property
    def Dimension(self) -> int:
        """
        number of dimensions
        """
        return self._dimension
    
    @Dimension.setter
    def Dimension(self, value: int) -> None:
        self._dimension = value

    @property
    def Hierarchy(self) -> int:
        """
        hierarchy
        """
        return self._hierarchy
    
    @Hierarchy.setter
    def Hierarchy(self, value: int) -> None:
        self._hierarchy = value

    @property
    def Level(self) -> int:
        """
        level
        """
        return self._level
    
    @Level.setter
    def Level(self, value: int) -> None:
        self._level = value

    @property
    def Flags(self) -> int:
        """
        flag
        """
        return self._flags
    
    @Flags.setter
    def Flags(self, value: int) -> None:
        self._flags = value

    @property
    def MemberName(self) -> str:
        """
        member name
        """
        return self._member_name
    
    @MemberName.setter
    def MemberName(self, value: str) -> None:
        self._member_name = value


__all__ = ['DataPilotTableHeaderData']
