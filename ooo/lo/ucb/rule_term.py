# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.ucb
# Libre Office Version: 7.2
from ooo.oenv import UNO_NONE
import typing


class RuleTerm(object):
    """
    Struct Class

    describes a term.
    
    A term is used to select objects to which a rule should apply.

    See Also:
        `API RuleTerm <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1ucb_1_1RuleTerm.html>`_
    """
    __ooo_ns__: str = 'com.sun.star.ucb'
    __ooo_full_ns__: str = 'com.sun.star.ucb.RuleTerm'
    __ooo_type_name__: str = 'struct'
    typeName: str = 'com.sun.star.ucb.RuleTerm'
    """Literal Constant ``com.sun.star.ucb.RuleTerm``"""

    def __init__(self, Property: str = '', Operand: object = None, Operator: int = 0, CaseSensitive: bool = False, RegularExpression: bool = False) -> None:
        """
        Constructor

        Other Arguments:
            ``Property`` can be another ``RuleTerm`` instance,
                in which case other named args are ignored.

        Arguments:
            Property (str, optional): Property value
            Operand (object, optional): Operand value
            Operator (int, optional): Operator value
            CaseSensitive (bool, optional): CaseSensitive value
            RegularExpression (bool, optional): RegularExpression value
        """
        if isinstance(Property, RuleTerm):
            oth: RuleTerm = Property
            self._property = oth.Property
            self._operand = oth.Operand
            self._operator = oth.Operator
            self._case_sensitive = oth.CaseSensitive
            self._regular_expression = oth.RegularExpression
            return
        else:
            self._property = Property
            self._operand = Operand
            self._operator = Operator
            self._case_sensitive = CaseSensitive
            self._regular_expression = RegularExpression



    @property
    def Property(self) -> str:
        """
        the name of the property used to match the term.
        """
        return self._property
    
    @Property.setter
    def Property(self, value: str) -> None:
        self._property = value

    @property
    def Operand(self) -> object:
        """
        the value of the property used to compare with the document property.
        """
        return self._operand
    
    @Operand.setter
    def Operand(self, value: object) -> None:
        self._operand = value

    @property
    def Operator(self) -> int:
        """
        the operator used to compare the property of the document with the given value (e.g.
        
        \"contains\" or \"greater equal\").
        
        The value can be one of the RuleOperator constants.
        """
        return self._operator
    
    @Operator.setter
    def Operator(self, value: int) -> None:
        self._operator = value

    @property
    def CaseSensitive(self) -> bool:
        """
        this flag indicates whether a string \"operand\" shall be compared case sensitive.
        """
        return self._case_sensitive
    
    @CaseSensitive.setter
    def CaseSensitive(self, value: bool) -> None:
        self._case_sensitive = value

    @property
    def RegularExpression(self) -> bool:
        """
        this flag indicates whether a string \"operand\" shall be treated as a regular expression.
        """
        return self._regular_expression
    
    @RegularExpression.setter
    def RegularExpression(self, value: bool) -> None:
        self._regular_expression = value


__all__ = ['RuleTerm']
