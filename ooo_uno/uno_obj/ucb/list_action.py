# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.ucb
# Libre Office Version: 7.2
import typing
from ooo_uno.oenv import UNO_ENVIRONMENT, UNO_RUNTIME
_DYNAMIC = False
if (not typing.TYPE_CHECKING) and UNO_RUNTIME and UNO_ENVIRONMENT:
    _DYNAMIC = True
    from ooo_uno.helper import uno_helper

if typing.TYPE_CHECKING or _DYNAMIC is False:


    class ListAction(object):
        """
        Struct Class

        This struct contains information needed in the notifications of a XDynamicResultSet.

        See Also:
            `API ListAction <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1ucb_1_1ListAction.html>`_


        Note:
            | At runtime ListAction will be an actual uno struct however can seamlessly be treated as a regualr class.
            | At design time a class is presumed. This allows for better typings.
            | ListAction is a callable and can be treatead as a class and create instances.
        """

        def __init__(self, ActionInfo: typing.Optional[object] = None, Count: typing.Optional[int] = None, ListActionType: typing.Optional[int] = None, Position: typing.Optional[int] = None):
            self._action_info = ActionInfo
            self._count = Count
            self._list_action_type = ListActionType
            self._position = Position

        @property
        def ActionInfo(self) -> object:
            """
            depending on the content of ListAction.ListActionType the ListAction.ActionInfo could contain additional information about the changes happened (see table above).
            """
            return self._action_info
        
        @ActionInfo.setter
        def ActionInfo(self, value: object) -> None:
            self._action_info = value

        @property
        def Count(self) -> int:
            """
            The count of involved rows.
            """
            return self._count
        
        @Count.setter
        def Count(self, value: int) -> None:
            self._count = value

        @property
        def ListActionType(self) -> int:
            """
            specifies the kind of modification happened to all assigned rows.
            
            The value of the other members of this struct depend on the value of this member:
            """
            return self._list_action_type
        
        @ListActionType.setter
        def ListActionType(self, value: int) -> None:
            self._list_action_type = value

        @property
        def Position(self) -> int:
            """
            The position where something has happened (index begins with 1 as usual with JDBC ).
            
            Its value does not necessary indicate the new position in the new com.sun.star.sdbc.XResultSet, but a position while doing the changes step by step beginning with the old com.sun.star.sdbc.XResultSet.
            """
            return self._position
        
        @Position.setter
        def Position(self, value: int) -> None:
            self._position = value

if not typing.TYPE_CHECKING and _DYNAMIC:
    def _dynamic_struct() -> None:
        # Dynamically create uno struct using uno
        global ListAction
        order = ('ActionInfo', 'Count', 'ListActionType', 'Position')

        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('com.sun.star.ucb.ListAction')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        ListAction = _struct_init

    _dynamic_struct()

__all__ = ['ListAction']
