# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.frame.status
# Libre Office Version: 7.2
import os
import typing
from ooo_uno.oenv import UNO_ENVIRONMENT
if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
    from ooo_uno.helper import uno_helper


class LeftRightMarginScale(object):
    """
    Struct Class

    specifies a left and right margin.
    
    **since**
    
        LibreOffice 5.3

    See Also:
        `API LeftRightMarginScale <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1frame_1_1status_1_1LeftRightMarginScale.html>`_


    Note:
        | At runtime LeftRightMarginScale will be an actual uno struct however can seamlessly be treated as a regualr class.
        | At design time a class is presumed. This allows for better typings.
        | LeftRightMarginScale is a callable and can be treatead as a class and create instances.
    """

    def __init__(self, AutoFirstLine: typing.Optional[bool] = None, FirstLine: typing.Optional[int] = None, Left: typing.Optional[int] = None, Right: typing.Optional[int] = None, ScaleFirstLine: typing.Optional[int] = None, ScaleLeft: typing.Optional[int] = None, ScaleRight: typing.Optional[int] = None, TextLeft: typing.Optional[int] = None):
        self._auto_first_line = AutoFirstLine
        self._first_line = FirstLine
        self._left = Left
        self._right = Right
        self._scale_first_line = ScaleFirstLine
        self._scale_left = ScaleLeft
        self._scale_right = ScaleRight
        self._text_left = TextLeft

    @property
    def AutoFirstLine(self) -> bool:
        """
        specifies if the automatic calculation of the first line indent occurs.
        """
        return self._auto_first_line
    
    @AutoFirstLine.setter
    def AutoFirstLine(self, value: bool) -> None:
        self._auto_first_line = value

    @property
    def FirstLine(self) -> int:
        """
        specifies a first line indent relative to TextLeft in 1/100th mm.
        """
        return self._first_line
    
    @FirstLine.setter
    def FirstLine(self, value: int) -> None:
        self._first_line = value

    @property
    def Left(self) -> int:
        """
        specifies a left margin in 1/100th mm.
        """
        return self._left
    
    @Left.setter
    def Left(self, value: int) -> None:
        self._left = value

    @property
    def Right(self) -> int:
        """
        specifies a right margin in 1/100th mm.
        """
        return self._right
    
    @Right.setter
    def Right(self, value: int) -> None:
        self._right = value

    @property
    def ScaleFirstLine(self) -> int:
        """
        specifies a scale value for the first line margin in percent.
        """
        return self._scale_first_line
    
    @ScaleFirstLine.setter
    def ScaleFirstLine(self, value: int) -> None:
        self._scale_first_line = value

    @property
    def ScaleLeft(self) -> int:
        """
        specifies a scale value for the left margin in percent.
        """
        return self._scale_left
    
    @ScaleLeft.setter
    def ScaleLeft(self, value: int) -> None:
        self._scale_left = value

    @property
    def ScaleRight(self) -> int:
        """
        specifies a scale value for the right margin in percent.
        """
        return self._scale_right
    
    @ScaleRight.setter
    def ScaleRight(self, value: int) -> None:
        self._scale_right = value

    @property
    def TextLeft(self) -> int:
        """
        specifies a left text margin in 1/100th mm.
        """
        return self._text_left
    
    @TextLeft.setter
    def TextLeft(self, value: int) -> None:
        self._text_left = value

def _dynamic_struct() -> None:
    # Dynamically create uno struct using uno
    global LeftRightMarginScale
    ignore = os.environ.get('ooouno_ignore_runtime', 'False')
    if ignore == 'True':
        return
    if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
        order = ('AutoFirstLine', 'FirstLine', 'Left', 'Right', 'ScaleFirstLine', 'ScaleLeft', 'ScaleRight', 'TextLeft')
        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('com.sun.star.frame.status.LeftRightMarginScale')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        LeftRightMarginScale = _struct_init

if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
    _dynamic_struct()

__all__ = ['LeftRightMarginScale']
