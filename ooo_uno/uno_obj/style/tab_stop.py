# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.style
# Libre Office Version: 7.2
import os
import typing
if typing.TYPE_CHECKING:
    from .tab_align import TabAlign as TabAlign_8fc90a3b
from ooo_uno.oenv import UNO_ENVIRONMENT
if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
    from ooo_uno.helper import uno_helper


class TabStop(object):
    """
    Struct Class

    This structure is used to specify a single tabulator stop.

    See Also:
        `API TabStop <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1style_1_1TabStop.html>`_


    Note:
        | At runtime TabStop will be an actual uno struct however can seamlessly be treated as a regualr class.
        | At design time a class is presumed. This allows for better typings.
        | TabStop is a callable and can be treatead as a class and create instances.
    """

    def __init__(self, Alignment: 'typing.Optional[TabAlign_8fc90a3b]' = None, DecimalChar: typing.Optional[str] = None, FillChar: typing.Optional[str] = None, Position: typing.Optional[int] = None):
        self._alignment = Alignment
        self._decimal_char = DecimalChar
        self._fill_char = FillChar
        self._position = Position

    @property
    def Alignment(self) -> 'TabAlign_8fc90a3b':
        """
        This field specifies the alignment of the text range before the tabulator.
        """
        return self._alignment
    
    @Alignment.setter
    def Alignment(self, value: 'TabAlign_8fc90a3b') -> None:
        self._alignment = value

    @property
    def DecimalChar(self) -> str:
        """
        This field specifies which delimiter is used for the decimal.
        """
        return self._decimal_char
    
    @DecimalChar.setter
    def DecimalChar(self, value: str) -> None:
        self._decimal_char = value

    @property
    def FillChar(self) -> str:
        """
        This field specifies the character that is used to fill up the space between the text in the text range and the tabulators.
        """
        return self._fill_char
    
    @FillChar.setter
    def FillChar(self, value: str) -> None:
        self._fill_char = value

    @property
    def Position(self) -> int:
        """
        This field specifies the position of the tabulator in relation to the left border.
        """
        return self._position
    
    @Position.setter
    def Position(self, value: int) -> None:
        self._position = value

def _dynamic_struct() -> None:
    # Dynamically create uno struct using uno
    global TabStop
    ignore = os.environ.get('ooouno_ignore_runtime', 'False')
    if ignore == 'True':
        return
    if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
        order = ('Alignment', 'DecimalChar', 'FillChar', 'Position')
        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('com.sun.star.style.TabStop')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        TabStop = _struct_init

if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
    _dynamic_struct()

__all__ = ['TabStop']
