# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.ucb
# Libre Office Version: 7.2
import os
import typing
if typing.TYPE_CHECKING:
    from ..beans.property import Property as Property_8f4e0a76
    from ..uno.x_interface import XInterface as XInterface_8f010a43
from ooo_uno.oenv import UNO_ENVIRONMENT
if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
    from ooo_uno.helper import uno_helper


class OpenCommandArgument(object):
    """
    Struct Class

    The argument for commands like \"open\", \"update\", and \"synchronize\".

    See Also:
        `API OpenCommandArgument <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1ucb_1_1OpenCommandArgument.html>`_


    Note:
        | At runtime OpenCommandArgument will be an actual uno struct however can seamlessly be treated as a regualr class.
        | At design time a class is presumed. This allows for better typings.
        | OpenCommandArgument is a callable and can be treatead as a class and create instances.
    """

    def __init__(self, Mode: typing.Optional[int] = None, Priority: typing.Optional[int] = None, Properties: 'typing.Optional[typing.List[Property_8f4e0a76]]' = None, Sink: 'typing.Optional[XInterface_8f010a43]' = None):
        self._mode = Mode
        self._priority = Priority
        self._properties = Properties
        self._sink = Sink

    @property
    def Mode(self) -> int:
        """
        A mode.
        
        The value can be one of the OpenMode constants.
        """
        return self._mode
    
    @Mode.setter
    def Mode(self, value: int) -> None:
        self._mode = value

    @property
    def Priority(self) -> int:
        """
        The command's priority, in the range 0 (highest) to 65535 (lowest).
        """
        return self._priority
    
    @Priority.setter
    def Priority(self, value: int) -> None:
        self._priority = value

    @property
    def Properties(self) -> 'typing.List[Property_8f4e0a76]':
        """
        The properties, for that the values shall be provided by the DynamicResultSet returned by the command).
        """
        return self._properties
    
    @Properties.setter
    def Properties(self, value: 'typing.List[Property_8f4e0a76]') -> None:
        self._properties = value

    @property
    def Sink(self) -> 'XInterface_8f010a43':
        """
        The data sink to write the contents into (supporting either com.sun.star.io.XActiveDataSink, com.sun.star.io.XOutputStream or com.sun.star.io.XActiveDataStreamer).
        
        XActiveDataSink and XOutputStream give the caller read-only access to the contents. XActiveDataStreamer offers both read and write access to the contents.
        
        If an XActiveDataSink is supplied, the implementation of the command needs to provide an implementation of an object implementing the interface com.sun.star.io.XInputStream. It is highly recommended that this object also implements the interface com.sun.star.io.XSeekable, if this can be done without wasting resources (i.e. allocating huge memory buffers). The implementation object has to be supplied to the data sink.
        """
        return self._sink
    
    @Sink.setter
    def Sink(self, value: 'XInterface_8f010a43') -> None:
        self._sink = value

def _dynamic_struct() -> None:
    # Dynamically create uno struct using uno
    global OpenCommandArgument
    ignore = os.environ.get('ooouno_ignore_runtime', 'False')
    if ignore == 'True':
        return
    if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
        order = ('Mode', 'Priority', 'Properties', 'Sink')
        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('com.sun.star.ucb.OpenCommandArgument')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        OpenCommandArgument = _struct_init

if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
    _dynamic_struct()

__all__ = ['OpenCommandArgument']
