# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.util
# Libre Office Version: 7.2
import typing
if typing.TYPE_CHECKING:
    from .time import Time as Time_604e0855
from ooo_uno.oenv import UNO_ENVIRONMENT, UNO_RUNTIME
_DYNAMIC = False
if (not typing.TYPE_CHECKING) and UNO_RUNTIME and UNO_ENVIRONMENT:
    _DYNAMIC = True
    from ooo_uno.helper import uno_helper

if typing.TYPE_CHECKING or _DYNAMIC is False:


    class TimeWithTimezone(object):
        """
        Struct Class

        represents a combined time value with time zone.
        
        **since**
        
            LibreOffice 4.1

        See Also:
            `API TimeWithTimezone <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1util_1_1TimeWithTimezone.html>`_


        Note:
            | At runtime TimeWithTimezone will be an actual uno struct however can seamlessly be treated as a regualr class.
            | At design time a class is presumed. This allows for better typings.
            | TimeWithTimezone is a callable and can be treatead as a class and create instances.
        """

        def __init__(self, TimeInTZ: 'typing.Optional[Time_604e0855]' = None, Timezone: typing.Optional[int] = None):
            self._time_in_tz = TimeInTZ
            self._timezone = Timezone

        @property
        def TimeInTZ(self) -> 'Time_604e0855':
            """
            the time (in TimeZone)
            """
            return self._time_in_tz
        
        @TimeInTZ.setter
        def TimeInTZ(self, value: 'Time_604e0855') -> None:
            self._time_in_tz = value

        @property
        def Timezone(self) -> int:
            """
            contains the time zone, as signed offset in minutes from UTC, that is east of UTC, that is the amount of minutes that should be added to UTC time to obtain the time in that timezone.
            
            To obtain UTC time from TimeInTZ, you need to subtract TimeZone minutes.
            """
            return self._timezone
        
        @Timezone.setter
        def Timezone(self, value: int) -> None:
            self._timezone = value

if not typing.TYPE_CHECKING and _DYNAMIC:
    def _dynamic_struct() -> None:
        # Dynamically create uno struct using uno
        global TimeWithTimezone
        order = ('TimeInTZ', 'Timezone')

        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('com.sun.star.util.TimeWithTimezone')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        TimeWithTimezone = _struct_init

    _dynamic_struct()

__all__ = ['TimeWithTimezone']
