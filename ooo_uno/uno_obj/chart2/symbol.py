# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.chart2
# Libre Office Version: 7.2
import typing
if typing.TYPE_CHECKING:
    from ..awt.size import Size as Size_576707ef
    from .symbol_style import SymbolStyle as SymbolStyle_baa20bd3
    from ..drawing.poly_polygon_bezier_coords import PolyPolygonBezierCoords as PolyPolygonBezierCoords_7ec5114b
    from ..graphic.x_graphic import XGraphic as XGraphic_a4da0afc
from ooo_uno.oenv import UNO_ENVIRONMENT, UNO_RUNTIME
_DYNAMIC = False
if (not typing.TYPE_CHECKING) and UNO_RUNTIME and UNO_ENVIRONMENT:
    _DYNAMIC = True
    from ooo_uno.helper import uno_helper

if typing.TYPE_CHECKING or _DYNAMIC is False:


    class Symbol(object):
        """
        Struct Class

        properties that are used for DataSeries that display symbols.

        See Also:
            `API Symbol <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1chart2_1_1Symbol.html>`_


        Note:
            | At runtime Symbol will be an actual uno struct however can seamlessly be treated as a regualr class.
            | At design time a class is presumed. This allows for better typings.
            | Symbol is a callable and can be treatead as a class and create instances.
        """

        def __init__(self, BorderColor: typing.Optional[int] = None, FillColor: typing.Optional[int] = None, Graphic: 'typing.Optional[XGraphic_a4da0afc]' = None, PolygonCoords: 'typing.Optional[PolyPolygonBezierCoords_7ec5114b]' = None, Size: 'typing.Optional[Size_576707ef]' = None, StandardSymbol: typing.Optional[int] = None, Style: 'typing.Optional[SymbolStyle_baa20bd3]' = None):
            self._border_color = BorderColor
            self._fill_color = FillColor
            self._graphic = Graphic
            self._polygon_coords = PolygonCoords
            self._size = Size
            self._standard_symbol = StandardSymbol
            self._style = Style

        @property
        def BorderColor(self) -> int:
            """
            The color used for drawing the border of symbols.
            
            Only effective if Style is SymbolStyle.AUTO, SymbolStyle.STANDARD or SymbolStyle.POLYGON.
            """
            return self._border_color
        
        @BorderColor.setter
        def BorderColor(self, value: int) -> None:
            self._border_color = value

        @property
        def FillColor(self) -> int:
            """
            The color used for filling symbols that contain closed polygons.
            
            Only effective if Style is SymbolStyle.AUTO, SymbolStyle.STANDARD or SymbolStyle.POLYGON.
            """
            return self._fill_color
        
        @FillColor.setter
        def FillColor(self, value: int) -> None:
            self._fill_color = value

        @property
        def Graphic(self) -> 'XGraphic_a4da0afc':
            """
            use this graphic as symbol
            """
            return self._graphic
        
        @Graphic.setter
        def Graphic(self, value: 'XGraphic_a4da0afc') -> None:
            self._graphic = value

        @property
        def PolygonCoords(self) -> 'PolyPolygonBezierCoords_7ec5114b':
            """
            The given polygon is used as symbol.
            """
            return self._polygon_coords
        
        @PolygonCoords.setter
        def PolygonCoords(self, value: 'PolyPolygonBezierCoords_7ec5114b') -> None:
            self._polygon_coords = value

        @property
        def Size(self) -> 'Size_576707ef':
            """
            The size of the symbol in 100th of a mm.
            """
            return self._size
        
        @Size.setter
        def Size(self, value: 'Size_576707ef') -> None:
            self._size = value

        @property
        def StandardSymbol(self) -> int:
            """
            Use the nth standard symbol, if Style is set to SymbolStyle.STANDARD.
            
            If n is the number of standard symbols available in an implementation, the symbol number is StandardSymbol modulo n.
            
            The default implementation for example currently uses 8 different standard symbols that are matched to the numbers 0 to 7.
            """
            return self._standard_symbol
        
        @StandardSymbol.setter
        def StandardSymbol(self, value: int) -> None:
            self._standard_symbol = value

        @property
        def Style(self) -> 'SymbolStyle_baa20bd3':
            """
            determines which of the following members determines the appearance of the symbol.
            """
            return self._style
        
        @Style.setter
        def Style(self, value: 'SymbolStyle_baa20bd3') -> None:
            self._style = value

if not typing.TYPE_CHECKING and _DYNAMIC:
    def _dynamic_struct() -> None:
        # Dynamically create uno struct using uno
        global Symbol
        order = ('BorderColor', 'FillColor', 'Graphic', 'PolygonCoords', 'Size', 'StandardSymbol', 'Style')

        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('com.sun.star.chart2.Symbol')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        Symbol = _struct_init

    _dynamic_struct()

__all__ = ['Symbol']
