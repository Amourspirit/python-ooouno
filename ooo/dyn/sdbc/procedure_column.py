# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Const Class
# this is a auto generated file generated by Cheetah
# Libre Office Version: 7.2
# Namespace: com.sun.star.sdbc
from enum import IntEnum
from typing import TYPE_CHECKING
from ooo.oenv import UNO_ENVIRONMENT, UNO_RUNTIME
_DYNAMIC = False
if (not TYPE_CHECKING) and UNO_RUNTIME and UNO_ENVIRONMENT:
    _DYNAMIC = True

if not TYPE_CHECKING and _DYNAMIC:
    from com.sun.star.sdbc import ProcedureColumn as ProcedureColumn
    if hasattr(ProcedureColumn, '_constants') and isinstance(ProcedureColumn._constants, dict):
        ProcedureColumn._constants['__ooo_ns__'] = 'com.sun.star.sdbc'
        ProcedureColumn._constants['__ooo_full_ns__'] = 'com.sun.star.sdbc.ProcedureColumn'
        ProcedureColumn._constants['__ooo_type_name__'] = 'const'
    def build_enum():
        global ProcedureColumnEnum
        ls = [f for f in dir(ProcedureColumn) if not callable(getattr(ProcedureColumn, f)) and not f.startswith('__')]
        _dict = {}
        for name in ls:
            _dict[name] = getattr(ProcedureColumn, name)
        ProcedureColumnEnum = IntEnum('ProcedureColumnEnum', _dict)
    build_enum()
else:
    from ...lo.sdbc.procedure_column import ProcedureColumn as ProcedureColumn

    class ProcedureColumnEnum(IntEnum):
        """
        Enum of Const Class ProcedureColumn

        indicates the type of a procedure column.
        """
        UNKNOWN = ProcedureColumn.UNKNOWN
        """
        indicates that the type of the column is unknown.
        
        A possible value for the column COLUMN_TYPE in the com.sun.star.sdbc.XResultSet returned by the method com.sun.star.sdbc.XDatabaseMetaData.getProcedureColumns().
        """
        IN = ProcedureColumn.IN
        """
        indicates that the column stores IN parameters.
        
        A possible value for the column COLUMN_TYPE in the com.sun.star.sdbc.XResultSet returned by the method com.sun.star.sdbc.XDatabaseMetaData.getProcedureColumns().
        """
        INOUT = ProcedureColumn.INOUT
        """
        indicates that the column stores INOUT parameters.
        
        A possible value for the column COLUMN_TYPE in the com.sun.star.sdbc.XResultSet returned by the method com.sun.star.sdbc.XDatabaseMetaData.getProcedureColumns().
        """
        RESULT = ProcedureColumn.RESULT
        """
        indicates that the column stores results.
        
        A possible value for the column COLUMN_TYPE in the com.sun.star.sdbc.XResultSet returned by the method com.sun.star.sdbc.XDatabaseMetaData.getProcedureColumns().
        """
        OUT = ProcedureColumn.OUT
        """
        indicates that the column stores OUT parameters.
        
        A possible value for the column COLUMN_TYPE in the com.sun.star.sdbc.XResultSet returned by the method com.sun.star.sdbc.XDatabaseMetaData.getProcedureColumns().
        """
        RETURN = ProcedureColumn.RETURN
        """
        Indicates that the column stores return values.
        
        A possible value for the column COLUMN_TYPE in the com.sun.star.sdbc.XResultSet returned by the method com.sun.star.sdbc.XDatabaseMetaData.getProcedureColumns().
        """

__all__ = ['ProcedureColumn', 'ProcedureColumnEnum']
