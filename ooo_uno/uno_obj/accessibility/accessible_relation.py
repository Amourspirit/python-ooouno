# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.accessibility
# Libre Office Version: 7.2
import os
import typing
if typing.TYPE_CHECKING:
    from ..uno.x_interface import XInterface as XInterface_8f010a43
from ooo_uno.oenv import UNO_ENVIRONMENT
if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
    from ooo_uno.helper import uno_helper


class AccessibleRelation(object):
    """
    Struct Class

    An AccessibleRelation object defines a one-to-many relation.
    
    The represented relation points from the implementing object to a set of target objects.
    
    **since**
    
        OOo 1.1.2

    See Also:
        `API AccessibleRelation <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1accessibility_1_1AccessibleRelation.html>`_


    Note:
        | At runtime AccessibleRelation will be an actual uno struct however can seamlessly be treated as a regualr class.
        | At design time a class is presumed. This allows for better typings.
        | AccessibleRelation is a callable and can be treatead as a class and create instances.
    """

    def __init__(self, RelationType: typing.Optional[int] = None, TargetSet: 'typing.Optional[typing.List[XInterface_8f010a43]]' = None):
        self._relation_type = RelationType
        self._target_set = TargetSet

    @property
    def RelationType(self) -> int:
        """
        Type of the relation.
        
        Its value has to be one of the constants defined by AccessibleRelationType. If that value is INVALID then the whole relation is regarded as invalid. The content of the TargetSet is then undefined.
        """
        return self._relation_type
    
    @RelationType.setter
    def RelationType(self, value: int) -> None:
        self._relation_type = value

    @property
    def TargetSet(self) -> 'typing.List[XInterface_8f010a43]':
        """
        Set of objects that are the relation's targets.
        
        The content of this set is undefined if the relation's type is INVALID. The set must not contain references to one object more than once.
        """
        return self._target_set
    
    @TargetSet.setter
    def TargetSet(self, value: 'typing.List[XInterface_8f010a43]') -> None:
        self._target_set = value

def _dynamic_struct() -> None:
    # Dynamically create uno struct using uno
    global AccessibleRelation
    ignore = os.environ.get('ooouno_ignore_runtime', 'False')
    if ignore == 'True':
        return
    if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
        order = ('RelationType', 'TargetSet')
        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('com.sun.star.accessibility.AccessibleRelation')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        AccessibleRelation = _struct_init

if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
    _dynamic_struct()

__all__ = ['AccessibleRelation']
