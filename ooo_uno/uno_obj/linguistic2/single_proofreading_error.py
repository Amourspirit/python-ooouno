# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.linguistic2
# Libre Office Version: 7.2
import typing
if typing.TYPE_CHECKING:
    from ..beans.property_value import PropertyValue as PropertyValue_c9610c73
from ooo_uno.oenv import UNO_ENVIRONMENT, UNO_RUNTIME
_DYNAMIC = False
if (not typing.TYPE_CHECKING) and UNO_RUNTIME and UNO_ENVIRONMENT:
    _DYNAMIC = True
    from ooo_uno.helper import uno_helper

if typing.TYPE_CHECKING or _DYNAMIC is False:


    class SingleProofreadingError(object):
        """
        Struct Class

        holds a single error found by the proofreader.
        
        **since**
        
            OOo 3.0.1

        See Also:
            `API SingleProofreadingError <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1linguistic2_1_1SingleProofreadingError.html>`_


        Note:
            | At runtime SingleProofreadingError will be an actual uno struct however can seamlessly be treated as a regualr class.
            | At design time a class is presumed. This allows for better typings.
            | SingleProofreadingError is a callable and can be treatead as a class and create instances.
        """

        def __init__(self, aFullComment: typing.Optional[str] = None, aProperties: 'typing.Optional[typing.List[PropertyValue_c9610c73]]' = None, aRuleIdentifier: typing.Optional[str] = None, aShortComment: typing.Optional[str] = None, aSuggestions: 'typing.Optional[typing.List[str]]' = None, nErrorLength: typing.Optional[int] = None, nErrorStart: typing.Optional[int] = None, nErrorType: typing.Optional[int] = None):
            self._a_full_comment = aFullComment
            self._a_properties = aProperties
            self._a_rule_identifier = aRuleIdentifier
            self._a_short_comment = aShortComment
            self._a_suggestions = aSuggestions
            self._n_error_length = nErrorLength
            self._n_error_start = nErrorStart
            self._n_error_type = nErrorType

        @property
        def aFullComment(self) -> str:
            return self._a_full_comment
        
        @aFullComment.setter
        def aFullComment(self, value: str) -> None:
            self._a_full_comment = value

        @property
        def aProperties(self) -> 'typing.List[PropertyValue_c9610c73]':
            return self._a_properties
        
        @aProperties.setter
        def aProperties(self, value: 'typing.List[PropertyValue_c9610c73]') -> None:
            self._a_properties = value

        @property
        def aRuleIdentifier(self) -> str:
            return self._a_rule_identifier
        
        @aRuleIdentifier.setter
        def aRuleIdentifier(self, value: str) -> None:
            self._a_rule_identifier = value

        @property
        def aShortComment(self) -> str:
            return self._a_short_comment
        
        @aShortComment.setter
        def aShortComment(self, value: str) -> None:
            self._a_short_comment = value

        @property
        def aSuggestions(self) -> 'typing.List[str]':
            return self._a_suggestions
        
        @aSuggestions.setter
        def aSuggestions(self, value: 'typing.List[str]') -> None:
            self._a_suggestions = value

        @property
        def nErrorLength(self) -> int:
            return self._n_error_length
        
        @nErrorLength.setter
        def nErrorLength(self, value: int) -> None:
            self._n_error_length = value

        @property
        def nErrorStart(self) -> int:
            return self._n_error_start
        
        @nErrorStart.setter
        def nErrorStart(self, value: int) -> None:
            self._n_error_start = value

        @property
        def nErrorType(self) -> int:
            return self._n_error_type
        
        @nErrorType.setter
        def nErrorType(self, value: int) -> None:
            self._n_error_type = value

if not typing.TYPE_CHECKING and _DYNAMIC:
    def _dynamic_struct() -> None:
        # Dynamically create uno struct using uno
        global SingleProofreadingError
        order = ('aFullComment', 'aProperties', 'aRuleIdentifier', 'aShortComment', 'aSuggestions', 'nErrorLength', 'nErrorStart', 'nErrorType')

        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('com.sun.star.linguistic2.SingleProofreadingError')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        SingleProofreadingError = _struct_init

    _dynamic_struct()

__all__ = ['SingleProofreadingError']
