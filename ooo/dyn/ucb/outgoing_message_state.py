# coding: utf-8
#
# Copyright 2023 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Enum Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.ucb
# Libre Office Version: 7.4
import uno
from typing import TYPE_CHECKING
from ooo.oenv.env_const import UNO_ENVIRONMENT, UNO_RUNTIME
_DYNAMIC = False
if (not TYPE_CHECKING) and UNO_RUNTIME and UNO_ENVIRONMENT:
    _DYNAMIC = True

if not TYPE_CHECKING and _DYNAMIC:
    from ooo.helper.enum_helper import UnoEnumMeta
    class OutgoingMessageState(metaclass=UnoEnumMeta, type_name="com.sun.star.ucb.OutgoingMessageState", name_space="com.sun.star.ucb"):
        """Dynamically created class that represents ``com.sun.star.ucb.OutgoingMessageState`` Enum. Class loosly mimics Enum"""
        pass
else:
    from com.sun.star.ucb.OutgoingMessageState import COMPLETELY_LOCALLY_SENT as OUTGOING_MESSAGE_STATE_COMPLETELY_LOCALLY_SENT
    from com.sun.star.ucb.OutgoingMessageState import CONFIRMED as OUTGOING_MESSAGE_STATE_CONFIRMED
    from com.sun.star.ucb.OutgoingMessageState import EXTERNAL_ERROR as OUTGOING_MESSAGE_STATE_EXTERNAL_ERROR
    from com.sun.star.ucb.OutgoingMessageState import NONRECOVERABLE_LOCAL_ERROR as OUTGOING_MESSAGE_STATE_NONRECOVERABLE_LOCAL_ERROR
    from com.sun.star.ucb.OutgoingMessageState import PARTIALLY_LOCALLY_SENT as OUTGOING_MESSAGE_STATE_PARTIALLY_LOCALLY_SENT
    from com.sun.star.ucb.OutgoingMessageState import RECOVERABLE_LOCAL_ERROR as OUTGOING_MESSAGE_STATE_RECOVERABLE_LOCAL_ERROR
    from com.sun.star.ucb.OutgoingMessageState import WAITING_CONFIRMATION as OUTGOING_MESSAGE_STATE_WAITING_CONFIRMATION
    from com.sun.star.ucb.OutgoingMessageState import WRITTEN as OUTGOING_MESSAGE_STATE_WRITTEN


    class OutgoingMessageState(uno.Enum):
        """
        Enum Class


        See Also:
            `API OutgoingMessageState <https://api.libreoffice.org/docs/idl/ref/namespacecom_1_1sun_1_1star_1_1ucb.html#a8dec3ee1933cc93724b3764b124b8cc1>`_
        """
        __ooo_ns__: str = 'com.sun.star.ucb'
        __ooo_full_ns__: str = 'com.sun.star.ucb.OutgoingMessageState'
        __ooo_type_name__: str = 'enum'

        @property
        def typeName(self) -> str:
            return 'com.sun.star.ucb.OutgoingMessageState'

        COMPLETELY_LOCALLY_SENT = OUTGOING_MESSAGE_STATE_COMPLETELY_LOCALLY_SENT
        """
        Message has been sent upstream to all recipients.
        """
        CONFIRMED = OUTGOING_MESSAGE_STATE_CONFIRMED
        """
        Recipient confirmed reading.
        """
        EXTERNAL_ERROR = OUTGOING_MESSAGE_STATE_EXTERNAL_ERROR
        """
        Global fatal error (e.g.
        
        last member in SMTP chain could not deliver the message).
        """
        NONRECOVERABLE_LOCAL_ERROR = OUTGOING_MESSAGE_STATE_NONRECOVERABLE_LOCAL_ERROR
        """
        Local fatal error (e.g.
        
        first SMTP server upstream did not accept the message).
        """
        PARTIALLY_LOCALLY_SENT = OUTGOING_MESSAGE_STATE_PARTIALLY_LOCALLY_SENT
        """
        Message has been sent upstream to some recipients.
        """
        RECOVERABLE_LOCAL_ERROR = OUTGOING_MESSAGE_STATE_RECOVERABLE_LOCAL_ERROR
        """
        Local, non-fatal error (e.g.
        
        network temporarily not available).
        """
        WAITING_CONFIRMATION = OUTGOING_MESSAGE_STATE_WAITING_CONFIRMATION
        """
        Message was sent; we are waiting for confirmation.
        """
        WRITTEN = OUTGOING_MESSAGE_STATE_WRITTEN
        """
        Message has just been placed into the out tray.
        """

__all__ = ['OutgoingMessageState']

