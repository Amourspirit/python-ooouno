# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.util
# Libre Office Version: 7.2
import typing
from ooo_uno.oenv import UNO_ENVIRONMENT, UNO_RUNTIME
_DYNAMIC = False
if (not typing.TYPE_CHECKING) and UNO_RUNTIME and UNO_ENVIRONMENT:
    _DYNAMIC = True
    from ooo_uno.helper import uno_helper

if typing.TYPE_CHECKING or _DYNAMIC is False:


    class Duration(object):
        """
        Struct Class

        represents a duration.
        
        A duration is the difference of 2 DateTimes.
        
        Note that there are no constraints on the ranges of the members, except that every member must be non-negative: for example, a Duration of 400 Days is valid.
        
        **since**
        
            OOo 3.3

        See Also:
            `API Duration <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1util_1_1Duration.html>`_


        Note:
            | At runtime Duration will be an actual uno struct however can seamlessly be treated as a regualr class.
            | At design time a class is presumed. This allows for better typings.
            | Duration is a callable and can be treatead as a class and create instances.
        """

        def __init__(self, Days: typing.Optional[int] = None, Hours: typing.Optional[int] = None, Minutes: typing.Optional[int] = None, Months: typing.Optional[int] = None, NanoSeconds: typing.Optional[int] = None, Negative: typing.Optional[bool] = None, Seconds: typing.Optional[int] = None, Years: typing.Optional[int] = None):
            self._days = Days
            self._hours = Hours
            self._minutes = Minutes
            self._months = Months
            self._nano_seconds = NanoSeconds
            self._negative = Negative
            self._seconds = Seconds
            self._years = Years

        @property
        def Days(self) -> int:
            """
            contains the days.
            """
            return self._days
        
        @Days.setter
        def Days(self, value: int) -> None:
            self._days = value

        @property
        def Hours(self) -> int:
            """
            contains the hours.
            """
            return self._hours
        
        @Hours.setter
        def Hours(self, value: int) -> None:
            self._hours = value

        @property
        def Minutes(self) -> int:
            """
            contains the minutes.
            """
            return self._minutes
        
        @Minutes.setter
        def Minutes(self, value: int) -> None:
            self._minutes = value

        @property
        def Months(self) -> int:
            """
            contains the months.
            """
            return self._months
        
        @Months.setter
        def Months(self, value: int) -> None:
            self._months = value

        @property
        def NanoSeconds(self) -> int:
            """
            contains the nanoseconds.
            """
            return self._nano_seconds
        
        @NanoSeconds.setter
        def NanoSeconds(self, value: int) -> None:
            self._nano_seconds = value

        @property
        def Negative(self) -> bool:
            """
            explicit sign bit.
            """
            return self._negative
        
        @Negative.setter
        def Negative(self, value: bool) -> None:
            self._negative = value

        @property
        def Seconds(self) -> int:
            """
            contains the seconds.
            """
            return self._seconds
        
        @Seconds.setter
        def Seconds(self, value: int) -> None:
            self._seconds = value

        @property
        def Years(self) -> int:
            """
            contains the years.
            """
            return self._years
        
        @Years.setter
        def Years(self, value: int) -> None:
            self._years = value

if not typing.TYPE_CHECKING and _DYNAMIC:
    def _dynamic_struct() -> None:
        # Dynamically create uno struct using uno
        global Duration
        order = ('Days', 'Hours', 'Minutes', 'Months', 'NanoSeconds', 'Negative', 'Seconds', 'Years')

        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('com.sun.star.util.Duration')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        Duration = _struct_init

    _dynamic_struct()

__all__ = ['Duration']
