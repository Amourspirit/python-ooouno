# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.rendering
# Libre Office Version: 7.2
from ooo.oenv import UNO_NONE
import typing


class Panose(object):
    """
    Struct Class


    See Also:
        `API Panose <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1rendering_1_1Panose.html>`_
    """
    __ooo_ns__: str = 'com.sun.star.rendering'
    __ooo_full_ns__: str = 'com.sun.star.rendering.Panose'
    __ooo_type_name__: str = 'struct'
    typeName: str = 'com.sun.star.rendering.Panose'
    """Literal Constant ``com.sun.star.rendering.Panose``"""

    def __init__(self, FamilyType: int = 0, SerifStyle: int = 0, Weight: int = 0, Proportion: int = 0, Contrast: int = 0, StrokeVariation: int = 0, ArmStyle: int = 0, Letterform: int = 0, Midline: int = 0, XHeight: int = 0) -> None:
        """
        Constructor

        Other Arguments:
            ``FamilyType`` can be another ``Panose`` instance,
                in which case other named args are ignored.

        Arguments:
            FamilyType (int, optional): FamilyType value
            SerifStyle (int, optional): SerifStyle value
            Weight (int, optional): Weight value
            Proportion (int, optional): Proportion value
            Contrast (int, optional): Contrast value
            StrokeVariation (int, optional): StrokeVariation value
            ArmStyle (int, optional): ArmStyle value
            Letterform (int, optional): Letterform value
            Midline (int, optional): Midline value
            XHeight (int, optional): XHeight value
        """
        if isinstance(FamilyType, Panose):
            oth: Panose = FamilyType
            self._family_type = oth.FamilyType
            self._serif_style = oth.SerifStyle
            self._weight = oth.Weight
            self._proportion = oth.Proportion
            self._contrast = oth.Contrast
            self._stroke_variation = oth.StrokeVariation
            self._arm_style = oth.ArmStyle
            self._letterform = oth.Letterform
            self._midline = oth.Midline
            self._x_height = oth.XHeight
            return
        else:
            self._family_type = FamilyType
            self._serif_style = SerifStyle
            self._weight = Weight
            self._proportion = Proportion
            self._contrast = Contrast
            self._stroke_variation = StrokeVariation
            self._arm_style = ArmStyle
            self._letterform = Letterform
            self._midline = Midline
            self._x_height = XHeight



    @property
    def FamilyType(self) -> int:
        """
        PanoseFamilyTypes.
        """
        return self._family_type
    
    @FamilyType.setter
    def FamilyType(self, value: int) -> None:
        self._family_type = value

    @property
    def SerifStyle(self) -> int:
        """
        PanoseSerifStyle.
        """
        return self._serif_style
    
    @SerifStyle.setter
    def SerifStyle(self, value: int) -> None:
        self._serif_style = value

    @property
    def Weight(self) -> int:
        """
        PanoseWeight.
        """
        return self._weight
    
    @Weight.setter
    def Weight(self, value: int) -> None:
        self._weight = value

    @property
    def Proportion(self) -> int:
        """
        PanoseProportion.
        """
        return self._proportion
    
    @Proportion.setter
    def Proportion(self, value: int) -> None:
        self._proportion = value

    @property
    def Contrast(self) -> int:
        """
        PanoseContrast.
        """
        return self._contrast
    
    @Contrast.setter
    def Contrast(self, value: int) -> None:
        self._contrast = value

    @property
    def StrokeVariation(self) -> int:
        """
        PanoseStrokeVariation.
        """
        return self._stroke_variation
    
    @StrokeVariation.setter
    def StrokeVariation(self, value: int) -> None:
        self._stroke_variation = value

    @property
    def ArmStyle(self) -> int:
        """
        PanoseArmStyle.
        """
        return self._arm_style
    
    @ArmStyle.setter
    def ArmStyle(self, value: int) -> None:
        self._arm_style = value

    @property
    def Letterform(self) -> int:
        """
        PanoseLetterForm.
        """
        return self._letterform
    
    @Letterform.setter
    def Letterform(self, value: int) -> None:
        self._letterform = value

    @property
    def Midline(self) -> int:
        """
        PanoseMidline.
        """
        return self._midline
    
    @Midline.setter
    def Midline(self, value: int) -> None:
        self._midline = value

    @property
    def XHeight(self) -> int:
        """
        PanoseXHeight.
        """
        return self._x_height
    
    @XHeight.setter
    def XHeight(self, value: int) -> None:
        self._x_height = value


__all__ = ['Panose']
