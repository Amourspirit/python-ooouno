# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.i18n
# Libre Office Version: 7.2
import os
import typing
if typing.TYPE_CHECKING:
    from ..linguistic2.x_hyphenated_word import XHyphenatedWord as XHyphenatedWord_3a880f73
from ooo_uno.oenv import UNO_ENVIRONMENT
if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
    from ooo_uno.helper import uno_helper


class LineBreakResults(object):
    """
    Struct Class

    Results of method XBreakIterator.getLineBreak().

    See Also:
        `API LineBreakResults <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1i18n_1_1LineBreakResults.html>`_


    Note:
        | At runtime LineBreakResults will be an actual uno struct however can seamlessly be treated as a regualr class.
        | At design time a class is presumed. This allows for better typings.
        | LineBreakResults is a callable and can be treatead as a class and create instances.
    """

    def __init__(self, breakIndex: typing.Optional[int] = None, breakType: typing.Optional[int] = None, rHyphenatedWord: 'typing.Optional[XHyphenatedWord_3a880f73]' = None):
        self._break_index = breakIndex
        self._break_type = breakType
        self._r_hyphenated_word = rHyphenatedWord

    @property
    def breakIndex(self) -> int:
        """
        Position of the calculated line break.
        """
        return self._break_index
    
    @breakIndex.setter
    def breakIndex(self, value: int) -> None:
        self._break_index = value

    @property
    def breakType(self) -> int:
        """
        Type of line break, see BreakType.
        """
        return self._break_type
    
    @breakType.setter
    def breakType(self, value: int) -> None:
        self._break_type = value

    @property
    def rHyphenatedWord(self) -> 'XHyphenatedWord_3a880f73':
        """
        Return value of the hyphenator.
        """
        return self._r_hyphenated_word
    
    @rHyphenatedWord.setter
    def rHyphenatedWord(self, value: 'XHyphenatedWord_3a880f73') -> None:
        self._r_hyphenated_word = value

def _dynamic_struct() -> None:
    # Dynamically create uno struct using uno
    global LineBreakResults
    ignore = os.environ.get('ooouno_ignore_runtime', 'False')
    if ignore == 'True':
        return
    if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
        order = ('breakIndex', 'breakType', 'rHyphenatedWord')
        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('com.sun.star.i18n.LineBreakResults')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        LineBreakResults = _struct_init

if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
    _dynamic_struct()

__all__ = ['LineBreakResults']
