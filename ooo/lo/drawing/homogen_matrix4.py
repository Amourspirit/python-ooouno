# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.drawing
# Libre Office Version: 7.2
import typing
if typing.TYPE_CHECKING:
    from .homogen_matrix_line4 import HomogenMatrixLine4 as HomogenMatrixLine4_2b170ef2


class HomogenMatrix4(object):
    """
    Struct Class

    specifies a homogeneous matrix by four homogeneous lines.

    See Also:
        `API HomogenMatrix4 <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1drawing_1_1HomogenMatrix4.html>`_
    """
    __ooo_ns__: str = 'com.sun.star.drawing'
    __ooo_full_ns__: str = 'com.sun.star.drawing.HomogenMatrix4'
    __ooo_type_name__: str = 'struct'
    typeName: str = 'com.sun.star.drawing.HomogenMatrix4'
    """Literal Constant ``com.sun.star.drawing.HomogenMatrix4``"""

    def __init__(self, *args, **kwargs):
        """
        Constructor

        Other Arguments:
            First positinal arg can be another ``HomogenMatrix4`` instance,
                if it is the only argument passed to contructor;
                Otherwise, postitional arguments are treated as ``HomogenMatrix4``
                values. Following the order of ``Keyword Arguments``.

        Keyword Arguments:
            Line1 (HomogenMatrixLine4, optional): Line1 value
            Line2 (HomogenMatrixLine4, optional): Line2 value
            Line3 (HomogenMatrixLine4, optional): Line3 value
            Line4 (HomogenMatrixLine4, optional): Line4 value
        """
        self._line1 = None
        self._line2 = None
        self._line3 = None
        self._line4 = None

        key_order = ('Line1', 'Line2', 'Line3', 'Line4')
        arg_len = len(args)
        if arg_len == 1:
            if isinstance(args[0], HomogenMatrix4):
                oth = args[0]
                for key in key_order:
                    setattr(self, key, getattr(oth, key))
                return

        if  arg_len > len(key_order):
            raise ValueError("HomogenMatrix4.__init__() To many parameters")
        for i, arg in enumerate(args):
            setattr(self, key_order[i], arg)
        for k, v in kwargs.items():
            if k in key_order:
                setattr(self, k, v)


    @property
    def Line1(self) -> 'HomogenMatrixLine4_2b170ef2':
        return self._line1
    
    @Line1.setter
    def Line1(self, value: 'HomogenMatrixLine4_2b170ef2') -> None:
        self._line1 = value

    @property
    def Line2(self) -> 'HomogenMatrixLine4_2b170ef2':
        return self._line2
    
    @Line2.setter
    def Line2(self, value: 'HomogenMatrixLine4_2b170ef2') -> None:
        self._line2 = value

    @property
    def Line3(self) -> 'HomogenMatrixLine4_2b170ef2':
        return self._line3
    
    @Line3.setter
    def Line3(self, value: 'HomogenMatrixLine4_2b170ef2') -> None:
        self._line3 = value

    @property
    def Line4(self) -> 'HomogenMatrixLine4_2b170ef2':
        return self._line4
    
    @Line4.setter
    def Line4(self, value: 'HomogenMatrixLine4_2b170ef2') -> None:
        self._line4 = value


__all__ = ['HomogenMatrix4']
