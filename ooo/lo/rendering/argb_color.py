# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.rendering
# Libre Office Version: 7.2
import typing
if typing.TYPE_CHECKING:
    from .color_component import ColorComponent as ColorComponent_e4c0e78


class ARGBColor(object):
    """
    Struct Class

    ARGB color quad.

    See Also:
        `API ARGBColor <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1rendering_1_1ARGBColor.html>`_
    """
    __ooo_ns__: str = 'com.sun.star.rendering'
    __ooo_full_ns__: str = 'com.sun.star.rendering.ARGBColor'
    __ooo_type_name__: str = 'struct'
    typeName: str = 'com.sun.star.rendering.ARGBColor'
    """Literal Constant ``com.sun.star.rendering.ARGBColor``"""

    def __init__(self, *args, **kwargs):
        """
        Constructor

        Other Arguments:
            First positinal arg can be another ``ARGBColor`` instance,
                if it is the only argument passed to contructor;
                Otherwise, postitional arguments are treated as ``ARGBColor``
                values. Following the order of ``Keyword Arguments``.

        Keyword Arguments:
            Alpha (ColorComponent, optional): Alpha value
            Red (ColorComponent, optional): Red value
            Green (ColorComponent, optional): Green value
            Blue (ColorComponent, optional): Blue value
        """
        self._alpha = None
        self._red = None
        self._green = None
        self._blue = None

        key_order = ('Alpha', 'Red', 'Green', 'Blue')
        arg_len = len(args)
        if arg_len == 1:
            if isinstance(args[0], ARGBColor):
                oth = args[0]
                for key in key_order:
                    setattr(self, key, getattr(oth, key))
                return

        if  arg_len > len(key_order):
            raise ValueError("ARGBColor.__init__() To many parameters")
        for i, arg in enumerate(args):
            setattr(self, key_order[i], arg)
        for k, v in kwargs.items():
            if k in key_order:
                setattr(self, k, v)


    @property
    def Alpha(self) -> 'ColorComponent_e4c0e78':
        """
        Alpha component.
        
        Valid range is [0,1.0], with 0.0 denoting fully transparent, and 1.0 fully opaque.
        """
        return self._alpha
    
    @Alpha.setter
    def Alpha(self, value: 'ColorComponent_e4c0e78') -> None:
        self._alpha = value

    @property
    def Red(self) -> 'ColorComponent_e4c0e78':
        """
        Red component. Valid range is [0,1.0].
        """
        return self._red
    
    @Red.setter
    def Red(self, value: 'ColorComponent_e4c0e78') -> None:
        self._red = value

    @property
    def Green(self) -> 'ColorComponent_e4c0e78':
        """
        Green component. Valid range is [0,1.0].
        """
        return self._green
    
    @Green.setter
    def Green(self, value: 'ColorComponent_e4c0e78') -> None:
        self._green = value

    @property
    def Blue(self) -> 'ColorComponent_e4c0e78':
        """
        Blue component. Valid range is [0,1.0].
        """
        return self._blue
    
    @Blue.setter
    def Blue(self, value: 'ColorComponent_e4c0e78') -> None:
        self._blue = value


__all__ = ['ARGBColor']
