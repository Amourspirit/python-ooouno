# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.document
# Libre Office Version: 7.2
import typing
from ..lang.event_object import EventObject as EventObject_a3d70b03
if typing.TYPE_CHECKING:
    from ..frame.x_controller2 import XController2 as XController2_bbcf0bc1


class DocumentEvent(EventObject_a3d70b03):
    """
    Struct Class

    describes an event happening in an OfficeDocument
    
    The com.sun.star.lang.EventObject.Source member of the base type refers to the document which broadcasts the event.
    
    This type is the successor of the EventObject type, which should not be used anymore.
    
    **since**
    
        OOo 3.1

    See Also:
        `API DocumentEvent <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1document_1_1DocumentEvent.html>`_
    """
    __ooo_ns__: str = 'com.sun.star.document'
    __ooo_full_ns__: str = 'com.sun.star.document.DocumentEvent'
    __ooo_type_name__: str = 'struct'
    typeName: str = 'com.sun.star.document.DocumentEvent'
    """Literal Constant ``com.sun.star.document.DocumentEvent``"""


    def __init__(self, *args, **kwargs):
        """
        Constructor

        Other Arguments:
            First positinal arg can be another ``DocumentEvent`` instance,
                if it is the only argument passed to contructor;
                Otherwise, postitional arguments are treated as ``DocumentEvent``
                values. Following the order of ``Keyword Arguments``.

        Keyword Arguments:
            EventName (str, optional): EventName value
            ViewController (XController2, optional): ViewController value
            Supplement (object, optional): Supplement value
        """
        self._event_name = None
        self._view_controller = None
        self._supplement = None

        key_order = ('EventName', 'ViewController', 'Supplement')
        arg_len = len(args)
        if arg_len == 1:
            if isinstance(args[0], DocumentEvent):
                oth = args[0]
                for key in key_order:
                    setattr(self, key, getattr(oth, key))
                return

        if  arg_len > len(key_order):
            raise ValueError("DocumentEvent.__init__() To many parameters")
        for i, arg in enumerate(args):
            setattr(self, key_order[i], arg)
        for k, v in kwargs.items():
            if k in key_order:
                setattr(self, k, v)

    @property
    def EventName(self) -> str:
        """
        specifies the name of the event.
        
        It's the responsibility of the component supporting the XDocumentEventBroadcaster interface to specify which events it supports.
        """
        return self._event_name
    
    @EventName.setter
    def EventName(self, value: str) -> None:
        self._event_name = value

    @property
    def ViewController(self) -> 'XController2_bbcf0bc1':
        """
        denotes the view respectively controller which the event applies to.
        
        Might be NULL if the event is not related to a concrete view of the document.
        """
        return self._view_controller
    
    @ViewController.setter
    def ViewController(self, value: 'XController2_bbcf0bc1') -> None:
        self._view_controller = value

    @property
    def Supplement(self) -> object:
        """
        contains supplemental information about the event which is being notified
        
        The semantics of this additional information needs to be specified by the broadcaster of the event.
        """
        return self._supplement
    
    @Supplement.setter
    def Supplement(self, value: object) -> None:
        self._supplement = value


__all__ = ['DocumentEvent']
