# coding: utf-8
#
# Copyright 2023 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.ucb
# Libre Office Version: 7.4
from ooo.oenv.env_const import UNO_NONE
import typing
from .rule_term import RuleTerm as RuleTerm_7a4b0972


class SearchCriterium(object):
    """
    Struct Class

    a criterion describing how an object must match some rules that specify (part of) a search.

    See Also:
        `API SearchCriterium <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1ucb_1_1SearchCriterium.html>`_
    """
    __ooo_ns__: str = 'com.sun.star.ucb'
    __ooo_full_ns__: str = 'com.sun.star.ucb.SearchCriterium'
    __ooo_type_name__: str = 'struct'
    typeName: str = 'com.sun.star.ucb.SearchCriterium'
    """Literal Constant ``com.sun.star.ucb.SearchCriterium``"""

    def __init__(self, Terms: typing.Optional[typing.Tuple[RuleTerm_7a4b0972, ...]] = ()) -> None:
        """
        Constructor

        Arguments:
            Terms (typing.Tuple[RuleTerm, ...], optional): Terms value.
        """
        super().__init__()

        if isinstance(Terms, SearchCriterium):
            oth: SearchCriterium = Terms
            self.Terms = oth.Terms
            return

        kargs = {
            "Terms": Terms,
        }
        self._init(**kargs)

    def _init(self, **kwargs) -> None:
        self._terms = kwargs["Terms"]


    @property
    def Terms(self) -> typing.Tuple[RuleTerm_7a4b0972, ...]:
        """
        a number of rule terms.
        """
        return self._terms

    @Terms.setter
    def Terms(self, value: typing.Tuple[RuleTerm_7a4b0972, ...]) -> None:
        self._terms = value


__all__ = ['SearchCriterium']
