# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Const Class
# this is a auto generated file generated by Cheetah
# Libre Office Version: 7.2
# Namespace: com.sun.star.awt
from enum import IntEnum
from typing import TYPE_CHECKING
from ooo.oenv import UNO_ENVIRONMENT, UNO_RUNTIME
_DYNAMIC = False
if (not TYPE_CHECKING) and UNO_RUNTIME and UNO_ENVIRONMENT:
    _DYNAMIC = True

if not TYPE_CHECKING and _DYNAMIC:
    from com.sun.star.awt import KeyGroup as KeyGroup
    if hasattr(KeyGroup, '_constants') and isinstance(KeyGroup._constants, dict):
        KeyGroup._constants['__ooo_ns__'] = 'com.sun.star.awt'
        KeyGroup._constants['__ooo_full_ns__'] = 'com.sun.star.awt.KeyGroup'
        KeyGroup._constants['__ooo_type_name__'] = 'const'
    def build_enum():
        global KeyGroupEnum
        ls = [f for f in dir(KeyGroup) if not callable(getattr(KeyGroup, f)) and not f.startswith('__')]
        _dict = {}
        for name in ls:
            _dict[name] = getattr(KeyGroup, name)
        KeyGroupEnum = IntEnum('KeyGroupEnum', _dict)
    build_enum()
else:
    from ...lo.awt.key_group import KeyGroup as KeyGroup

    class KeyGroupEnum(IntEnum):
        """
        Enum of Const Class KeyGroup

        These values are used to specify functional groups of keys.
        
        .. deprecated::
        
            Class is deprecated.
        """
        NUM = KeyGroup.NUM
        """
        specifies a numeric key.
        """
        ALPHA = KeyGroup.ALPHA
        """
        specifies an alphabetic key.
        """
        FKEYS = KeyGroup.FKEYS
        """
        specifies a function key.
        """
        CURSOR = KeyGroup.CURSOR
        """
        specifies a cursor key.
        """
        MISC = KeyGroup.MISC
        """
        specifies other keys.
        """
        TYPE = KeyGroup.TYPE
        """
        specifies the group mask.
        """

__all__ = ['KeyGroup', 'KeyGroupEnum']
