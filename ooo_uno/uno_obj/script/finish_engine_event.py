# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.script
# Libre Office Version: 7.2
from ..lang.event_object import EventObject as EventObject_a3d70b03
import typing
if typing.TYPE_CHECKING:
    from .finish_reason import FinishReason as FinishReason_ca230c66
from ooo_uno.oenv import UNO_ENVIRONMENT, UNO_RUNTIME
_DYNAMIC = False
if (not typing.TYPE_CHECKING) and UNO_RUNTIME and UNO_ENVIRONMENT:
    _DYNAMIC = True
    from ooo_uno.helper import uno_helper

if typing.TYPE_CHECKING or _DYNAMIC is False:


    class FinishEngineEvent(EventObject_a3d70b03):
        """
        Struct Class

        event contains the reasons and the data for the XEngineListener.finished() method.
        
        .. deprecated::
        
            Class is deprecated.

        See Also:
            `API FinishEngineEvent <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1script_1_1FinishEngineEvent.html>`_


        Note:
            | At runtime FinishEngineEvent will be an actual uno struct however can seamlessly be treated as a regualr class.
            | At design time a class is presumed. This allows for better typings.
            | FinishEngineEvent is a callable and can be treatead as a class and create instances.
        """

        def __init__(self, ErrorMessage: typing.Optional[str] = None, Finish: 'typing.Optional[FinishReason_ca230c66]' = None, Return: typing.Optional[object] = None):
            self._error_message = ErrorMessage
            self._finish = Finish
            self._return = Return

        @property
        def ErrorMessage(self) -> str:
            """
            error message.
            
            Only valid if Reason is RuntimeError or CompileError.
            """
            return self._error_message
        
        @ErrorMessage.setter
        def ErrorMessage(self, value: str) -> None:
            self._error_message = value

        @property
        def Finish(self) -> 'FinishReason_ca230c66':
            """
            specifies why the script terminates.
            """
            return self._finish
        
        @Finish.setter
        def Finish(self, value: 'FinishReason_ca230c66') -> None:
            self._finish = value

        @property
        def Return(self) -> object:
            """
            contains the return value.
            
            This field is only valid if FinishEngineEvent.Finish is FinishReason.OK.
            """
            return self._return
        
        @Return.setter
        def Return(self, value: object) -> None:
            self._return = value

if not typing.TYPE_CHECKING and _DYNAMIC:
    def _dynamic_struct() -> None:
        # Dynamically create uno struct using uno
        global FinishEngineEvent
        order = ('ErrorMessage', 'Finish', 'Return')

        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('com.sun.star.script.FinishEngineEvent')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        FinishEngineEvent = _struct_init

    _dynamic_struct()

__all__ = ['FinishEngineEvent']
