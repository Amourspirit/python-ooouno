# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.awt
# Libre Office Version: 7.2
import typing
if typing.TYPE_CHECKING:
    from .rectangle import Rectangle as Rectangle_84b109e9
    from .window_class import WindowClass as WindowClass_99f60ac2
    from .x_window_peer import XWindowPeer as XWindowPeer_99760ab0
from ooo_uno.oenv import UNO_ENVIRONMENT, UNO_RUNTIME
_DYNAMIC = False
if (not typing.TYPE_CHECKING) and UNO_RUNTIME and UNO_ENVIRONMENT:
    _DYNAMIC = True
    from ooo_uno.helper import uno_helper

if typing.TYPE_CHECKING or _DYNAMIC is False:


    class WindowDescriptor(object):
        """
        Struct Class

        describes a window.

        See Also:
            `API WindowDescriptor <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1awt_1_1WindowDescriptor.html>`_


        Note:
            | At runtime WindowDescriptor will be an actual uno struct however can seamlessly be treated as a regualr class.
            | At design time a class is presumed. This allows for better typings.
            | WindowDescriptor is a callable and can be treatead as a class and create instances.
        """

        def __init__(self, Bounds: 'typing.Optional[Rectangle_84b109e9]' = None, Parent: 'typing.Optional[XWindowPeer_99760ab0]' = None, ParentIndex: typing.Optional[int] = None, Type: 'typing.Optional[WindowClass_99f60ac2]' = None, WindowAttributes: typing.Optional[int] = None, WindowServiceName: typing.Optional[str] = None):
            self._bounds = Bounds
            self._parent = Parent
            self._parent_index = ParentIndex
            self._type = Type
            self._window_attributes = WindowAttributes
            self._window_service_name = WindowServiceName

        @property
        def Bounds(self) -> 'Rectangle_84b109e9':
            """
            specifies the position and size of the window.
            
            This member is ignored if the window attribute is com.sun.star.awt.WindowAttribute.FULLSIZE.
            """
            return self._bounds
        
        @Bounds.setter
        def Bounds(self, value: 'Rectangle_84b109e9') -> None:
            self._bounds = value

        @property
        def Parent(self) -> 'XWindowPeer_99760ab0':
            """
            specifies the parent of the component.
            
            If Parent == 0 && ParentIndex == -1, then the window is on the desktop.
            """
            return self._parent
        
        @Parent.setter
        def Parent(self, value: 'XWindowPeer_99760ab0') -> None:
            self._parent = value

        @property
        def ParentIndex(self) -> int:
            """
            specifies the index of the parent window, if available.
            
            If Parent == 0 and this struct is a member of an array, then this is the offset from the beginning of the array to the parent. A value of -1 means desktop.
            """
            return self._parent_index
        
        @ParentIndex.setter
        def ParentIndex(self, value: int) -> None:
            self._parent_index = value

        @property
        def Type(self) -> 'WindowClass_99f60ac2':
            """
            specifies the type of window.
            """
            return self._type
        
        @Type.setter
        def Type(self, value: 'WindowClass_99f60ac2') -> None:
            self._type = value

        @property
        def WindowAttributes(self) -> int:
            """
            specifies the window attributes.
            
            Use one value out of the constant group com.sun.star.awt.WindowAttribute.
            """
            return self._window_attributes
        
        @WindowAttributes.setter
        def WindowAttributes(self, value: int) -> None:
            self._window_attributes = value

        @property
        def WindowServiceName(self) -> str:
            """
            specifies the name of the component service.
            
            A zero length name means that the VCL creates a blank top, a container, or a simple window. The following service names are defined:
            """
            return self._window_service_name
        
        @WindowServiceName.setter
        def WindowServiceName(self, value: str) -> None:
            self._window_service_name = value

if not typing.TYPE_CHECKING and _DYNAMIC:
    def _dynamic_struct() -> None:
        # Dynamically create uno struct using uno
        global WindowDescriptor
        order = ('Bounds', 'Parent', 'ParentIndex', 'Type', 'WindowAttributes', 'WindowServiceName')

        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('com.sun.star.awt.WindowDescriptor')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        WindowDescriptor = _struct_init

    _dynamic_struct()

__all__ = ['WindowDescriptor']
