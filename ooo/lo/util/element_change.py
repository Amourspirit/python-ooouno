# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.util
# Libre Office Version: 7.2


class ElementChange(object):
    """
    Struct Class

    This structure describes a single change that is part of a batch of changes.

    See Also:
        `API ElementChange <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1util_1_1ElementChange.html>`_
    """
    __ooo_ns__: str = 'com.sun.star.util'
    __ooo_full_ns__: str = 'com.sun.star.util.ElementChange'
    __ooo_type_name__: str = 'struct'
    typeName: str = 'com.sun.star.util.ElementChange'
    """Literal Constant ``com.sun.star.util.ElementChange``"""

    def __init__(self, *args, **kwargs):
        """
        Constructor

        Other Arguments:
            First positinal arg can be another ``ElementChange`` instance,
                if it is the only argument passed to contructor;
                Otherwise, postitional arguments are treated as ``ElementChange``
                values. Following the order of ``Keyword Arguments``.

        Keyword Arguments:
            Accessor (object, optional): Accessor value
            Element (object, optional): Element value
            ReplacedElement (object, optional): ReplacedElement value
        """
        self._accessor = None
        self._element = None
        self._replaced_element = None

        key_order = ('Accessor', 'Element', 'ReplacedElement')
        arg_len = len(args)
        if arg_len == 1:
            if isinstance(args[0], ElementChange):
                oth = args[0]
                for key in key_order:
                    setattr(self, key, getattr(oth, key))
                return

        if  arg_len > len(key_order):
            raise ValueError("ElementChange.__init__() To many parameters")
        for i, arg in enumerate(args):
            setattr(self, key_order[i], arg)
        for k, v in kwargs.items():
            if k in key_order:
                setattr(self, k, v)


    @property
    def Accessor(self) -> object:
        """
        This contains the accessor to the element which changed.
        
        The type and the value of the accessor depends on the service.
        """
        return self._accessor
    
    @Accessor.setter
    def Accessor(self, value: object) -> None:
        self._accessor = value

    @property
    def Element(self) -> object:
        """
        This contains the element that was inserted or changed.
        """
        return self._element
    
    @Element.setter
    def Element(self, value: object) -> None:
        self._element = value

    @property
    def ReplacedElement(self) -> object:
        """
        This contains the element that was replaced or removed.
        """
        return self._replaced_element
    
    @ReplacedElement.setter
    def ReplacedElement(self, value: object) -> None:
        self._replaced_element = value


__all__ = ['ElementChange']
