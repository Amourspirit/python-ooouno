# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.sheet
# Libre Office Version: 7.2


class SingleReference(object):
    """
    Struct Class

    contains a reference to a single cell.

    See Also:
        `API SingleReference <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1sheet_1_1SingleReference.html>`_
    """
    __ooo_ns__: str = 'com.sun.star.sheet'
    __ooo_full_ns__: str = 'com.sun.star.sheet.SingleReference'
    __ooo_type_name__: str = 'struct'
    typeName: str = 'com.sun.star.sheet.SingleReference'
    """Literal Constant ``com.sun.star.sheet.SingleReference``"""

    def __init__(self, *args, **kwargs):
        """
        Constructor

        Other Arguments:
            First positinal arg can be another ``SingleReference`` instance,
                if it is the only argument passed to contructor;
                Otherwise, postitional arguments are treated as ``SingleReference``
                values. Following the order of ``Keyword Arguments``.

        Keyword Arguments:
            Column (int, optional): Column value
            RelativeColumn (int, optional): RelativeColumn value
            Row (int, optional): Row value
            RelativeRow (int, optional): RelativeRow value
            Sheet (int, optional): Sheet value
            RelativeSheet (int, optional): RelativeSheet value
            Flags (int, optional): Flags value
        """
        self._column = None
        self._relative_column = None
        self._row = None
        self._relative_row = None
        self._sheet = None
        self._relative_sheet = None
        self._flags = None

        key_order = ('Column', 'RelativeColumn', 'Row', 'RelativeRow', 'Sheet', 'RelativeSheet', 'Flags')
        arg_len = len(args)
        if arg_len == 1:
            if isinstance(args[0], SingleReference):
                oth = args[0]
                for key in key_order:
                    setattr(self, key, getattr(oth, key))
                return

        if  arg_len > len(key_order):
            raise ValueError("SingleReference.__init__() To many parameters")
        for i, arg in enumerate(args):
            setattr(self, key_order[i], arg)
        for k, v in kwargs.items():
            if k in key_order:
                setattr(self, k, v)


    @property
    def Column(self) -> int:
        """
        is the absolute column number.
        """
        return self._column
    
    @Column.setter
    def Column(self, value: int) -> None:
        self._column = value

    @property
    def RelativeColumn(self) -> int:
        """
        is the relative column number.
        """
        return self._relative_column
    
    @RelativeColumn.setter
    def RelativeColumn(self, value: int) -> None:
        self._relative_column = value

    @property
    def Row(self) -> int:
        """
        is the absolute row number.
        """
        return self._row
    
    @Row.setter
    def Row(self, value: int) -> None:
        self._row = value

    @property
    def RelativeRow(self) -> int:
        """
        is the relative row number.
        """
        return self._relative_row
    
    @RelativeRow.setter
    def RelativeRow(self, value: int) -> None:
        self._relative_row = value

    @property
    def Sheet(self) -> int:
        """
        is the absolute sheet number.
        """
        return self._sheet
    
    @Sheet.setter
    def Sheet(self, value: int) -> None:
        self._sheet = value

    @property
    def RelativeSheet(self) -> int:
        """
        is the relative sheet number.
        """
        return self._relative_sheet
    
    @RelativeSheet.setter
    def RelativeSheet(self, value: int) -> None:
        self._relative_sheet = value

    @property
    def Flags(self) -> int:
        """
        contains flags.
        """
        return self._flags
    
    @Flags.setter
    def Flags(self, value: int) -> None:
        self._flags = value


__all__ = ['SingleReference']
