# coding: utf-8
# this is a auto generated file generated by Cheetah
import os
from collections import namedtuple
from typing import TYPE_CHECKING
from .tab_align import TabAlign


class TabStop(object):
    """
    This struct describes drop caps at a paragraph object.

    See Also:
        `API TabStop <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1style_1_1TabStop.html>`_

    Note:
        | At runtime this will be a `namedtuple <https://docs.python.org/3/library/collections.html#collections.namedtuple>`_ and not a class.
        | At design time a class is presumed. This allows for better typings.
        | Effectively functionallity is the same and namedtuple is more efficient than a class.
    """

    def __init__(self, Alignment: TabAlign, DecimalChar: str, FillChar: str, Position: int):
        self._Alignment = Alignment
        self._DecimalChar = DecimalChar
        self._FillChar = FillChar
        self._Position = Position

    @property
    def Alignment(self) -> TabAlign:
        """
        This field specifies the alignment of the text range before the tabulator.

        **Libre Office Type:** ``com.sun.star.style.TabAlign``
        """
        return self._Alignment

    @property
    def DecimalChar(self) -> str:
        """
        This field specifies which delimiter is used for the decimal.

        **Libre Office Type:** ``char``
        """
        return self._DecimalChar

    @property
    def FillChar(self) -> str:
        """
        This field specifies the character that is used to fill up the
        space between the text in the text range and the tabulators.

        **Libre Office Type:** ``char``
        """
        return self._FillChar

    @property
    def Position(self) -> int:
        """
        This field specifies the position of the tabulator in relation to the left border.

        **Libre Office Type:** ``long``
        """
        return self._Position


def _dynamic_struct():
    # Dynamically create nametuple that is more efficient as stand in for struct

    global TabStop
    ignore = os.environ.get('ooouno_ignore_runtime', 'False')
    if ignore == 'True':
        return
    # if statment is to stop VS Code from reporting errors
    if not TYPE_CHECKING:
        TabStop = namedtuple(
            'TabStop', ['Alignment', 'DecimalChar', 'FillChar', 'Position'])


if not TYPE_CHECKING:
    _dynamic_struct()

__all__ = ['TabStop']
