# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.i18n
# Libre Office Version: 7.2
import typing
if typing.TYPE_CHECKING:
    from .calendar_item2 import CalendarItem2 as CalendarItem2_b38f0b23
from ooo_uno.oenv import UNO_ENVIRONMENT, UNO_RUNTIME
_DYNAMIC = False
if (not typing.TYPE_CHECKING) and UNO_RUNTIME and UNO_ENVIRONMENT:
    _DYNAMIC = True
    from ooo_uno.helper import uno_helper

if typing.TYPE_CHECKING or _DYNAMIC is False:


    class Calendar2(object):
        """
        Struct Class

        Calendar items as returned in a sequence by XLocaleData3.getAllCalendars2().
        
        Similar to com.sun.star.i18n.Calendar this provides additional members with a sequence of possessive (genitive case) and partitive case month names for locales that use them, for example Slavic locales. If a locale does not provide the possessive form in GenitiveMonths, the names are identical to the nominative case nouns in Calendar.Months. If a locale does not provide the partitive case in PartitiveMonths, the names are identical to GenitiveMonths.
        
        The sequences are of type com.sun.star.i18n.CalendarItem2 instead of com.sun.star.i18n.CalendarItem, with the additional NarrowName member.
        
        **since**
        
            LibreOffice 3.5

        See Also:
            `API Calendar2 <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1i18n_1_1Calendar2.html>`_


        Note:
            | At runtime Calendar2 will be an actual uno struct however can seamlessly be treated as a regualr class.
            | At design time a class is presumed. This allows for better typings.
            | Calendar2 is a callable and can be treatead as a class and create instances.
        """

        def __init__(self, Days: 'typing.Optional[typing.List[CalendarItem2_b38f0b23]]' = None, Default: typing.Optional[bool] = None, Eras: 'typing.Optional[typing.List[CalendarItem2_b38f0b23]]' = None, GenitiveMonths: 'typing.Optional[typing.List[CalendarItem2_b38f0b23]]' = None, MinimumNumberOfDaysForFirstWeek: typing.Optional[int] = None, Months: 'typing.Optional[typing.List[CalendarItem2_b38f0b23]]' = None, Name: typing.Optional[str] = None, PartitiveMonths: 'typing.Optional[typing.List[CalendarItem2_b38f0b23]]' = None, StartOfWeek: typing.Optional[str] = None):
            self._days = Days
            self._default = Default
            self._eras = Eras
            self._genitive_months = GenitiveMonths
            self._minimum_number_of_days_for_first_week = MinimumNumberOfDaysForFirstWeek
            self._months = Months
            self._name = Name
            self._partitive_months = PartitiveMonths
            self._start_of_week = StartOfWeek

        @property
        def Days(self) -> 'typing.List[CalendarItem2_b38f0b23]':
            """
            The days of the week.
            """
            return self._days
        
        @Days.setter
        def Days(self, value: 'typing.List[CalendarItem2_b38f0b23]') -> None:
            self._days = value

        @property
        def Default(self) -> bool:
            """
            If this is the default calendar for a given locale.
            """
            return self._default
        
        @Default.setter
        def Default(self, value: bool) -> None:
            self._default = value

        @property
        def Eras(self) -> 'typing.List[CalendarItem2_b38f0b23]':
            """
            The possible eras.
            """
            return self._eras
        
        @Eras.setter
        def Eras(self, value: 'typing.List[CalendarItem2_b38f0b23]') -> None:
            self._eras = value

        @property
        def GenitiveMonths(self) -> 'typing.List[CalendarItem2_b38f0b23]':
            """
            The months of the year in possessive genitive case.
            """
            return self._genitive_months
        
        @GenitiveMonths.setter
        def GenitiveMonths(self, value: 'typing.List[CalendarItem2_b38f0b23]') -> None:
            self._genitive_months = value

        @property
        def MinimumNumberOfDaysForFirstWeek(self) -> int:
            """
            How many days must reside in the first week of a year.
            """
            return self._minimum_number_of_days_for_first_week
        
        @MinimumNumberOfDaysForFirstWeek.setter
        def MinimumNumberOfDaysForFirstWeek(self, value: int) -> None:
            self._minimum_number_of_days_for_first_week = value

        @property
        def Months(self) -> 'typing.List[CalendarItem2_b38f0b23]':
            """
            The months of the year.
            """
            return self._months
        
        @Months.setter
        def Months(self, value: 'typing.List[CalendarItem2_b38f0b23]') -> None:
            self._months = value

        @property
        def Name(self) -> str:
            """
            The name of the calendar, for example, Gregorian.
            """
            return self._name
        
        @Name.setter
        def Name(self, value: str) -> None:
            self._name = value

        @property
        def PartitiveMonths(self) -> 'typing.List[CalendarItem2_b38f0b23]':
            """
            The months of the year in partitive case.
            """
            return self._partitive_months
        
        @PartitiveMonths.setter
        def PartitiveMonths(self, value: 'typing.List[CalendarItem2_b38f0b23]') -> None:
            self._partitive_months = value

        @property
        def StartOfWeek(self) -> str:
            """
            The ID of the day with which the week begins.
            """
            return self._start_of_week
        
        @StartOfWeek.setter
        def StartOfWeek(self, value: str) -> None:
            self._start_of_week = value

if not typing.TYPE_CHECKING and _DYNAMIC:
    def _dynamic_struct() -> None:
        # Dynamically create uno struct using uno
        global Calendar2
        order = ('Days', 'Default', 'Eras', 'GenitiveMonths', 'MinimumNumberOfDaysForFirstWeek', 'Months', 'Name', 'PartitiveMonths', 'StartOfWeek')

        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('com.sun.star.i18n.Calendar2')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        Calendar2 = _struct_init

    _dynamic_struct()

__all__ = ['Calendar2']
