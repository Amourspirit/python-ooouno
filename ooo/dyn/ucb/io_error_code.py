# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Enum Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.ucb
# Libre Office Version: 7.2
from typing import TYPE_CHECKING
from enum import Enum
from ooo.oenv import UNO_ENVIRONMENT, UNO_RUNTIME
_DYNAMIC = False
if (not TYPE_CHECKING) and UNO_RUNTIME and UNO_ENVIRONMENT:
    _DYNAMIC = True

if not TYPE_CHECKING and _DYNAMIC:
    from ooo.helper.enum_helper import uno_enum_class_new
    from com.sun.star.ucb.IOErrorCode import (ABORT, ACCESS_DENIED, ALREADY_EXISTING, BAD_CRC, CANT_CREATE, CANT_READ, CANT_SEEK, CANT_TELL, CANT_WRITE, CURRENT_DIRECTORY, DEVICE_NOT_READY, DIFFERENT_DEVICES, GENERAL, INVALID_ACCESS, INVALID_CHARACTER, INVALID_DEVICE, INVALID_LENGTH, INVALID_PARAMETER, IS_WILDCARD, LOCKING_VIOLATION, MISPLACED_CHARACTER, NAME_TOO_LONG, NOT_EXISTING, NOT_EXISTING_PATH, NOT_SUPPORTED, NO_DIRECTORY, NO_FILE, OUT_OF_DISK_SPACE, OUT_OF_FILE_HANDLES, OUT_OF_MEMORY, PENDING, RECURSIVE, UNKNOWN, WRITE_PROTECTED, WRONG_FORMAT, WRONG_VERSION)

    def _get_enum():
        # Dynamically create class that actually contains UNO enum instances
        _dict = {
            "__doc__": "Dynamically created class that represents com.sun.star.ucb.IOErrorCode Enum. Class loosly mimics Enum",
            "__new__": uno_enum_class_new,
            "__ooo_ns__": "com.sun.star.ucb",
            "__ooo_full_ns__": "com.sun.star.ucb.IOErrorCode",
            "__ooo_type_name__": "enum",
            "ABORT": ABORT,
            "ACCESS_DENIED": ACCESS_DENIED,
            "ALREADY_EXISTING": ALREADY_EXISTING,
            "BAD_CRC": BAD_CRC,
            "CANT_CREATE": CANT_CREATE,
            "CANT_READ": CANT_READ,
            "CANT_SEEK": CANT_SEEK,
            "CANT_TELL": CANT_TELL,
            "CANT_WRITE": CANT_WRITE,
            "CURRENT_DIRECTORY": CURRENT_DIRECTORY,
            "DEVICE_NOT_READY": DEVICE_NOT_READY,
            "DIFFERENT_DEVICES": DIFFERENT_DEVICES,
            "GENERAL": GENERAL,
            "INVALID_ACCESS": INVALID_ACCESS,
            "INVALID_CHARACTER": INVALID_CHARACTER,
            "INVALID_DEVICE": INVALID_DEVICE,
            "INVALID_LENGTH": INVALID_LENGTH,
            "INVALID_PARAMETER": INVALID_PARAMETER,
            "IS_WILDCARD": IS_WILDCARD,
            "LOCKING_VIOLATION": LOCKING_VIOLATION,
            "MISPLACED_CHARACTER": MISPLACED_CHARACTER,
            "NAME_TOO_LONG": NAME_TOO_LONG,
            "NOT_EXISTING": NOT_EXISTING,
            "NOT_EXISTING_PATH": NOT_EXISTING_PATH,
            "NOT_SUPPORTED": NOT_SUPPORTED,
            "NO_DIRECTORY": NO_DIRECTORY,
            "NO_FILE": NO_FILE,
            "OUT_OF_DISK_SPACE": OUT_OF_DISK_SPACE,
            "OUT_OF_FILE_HANDLES": OUT_OF_FILE_HANDLES,
            "OUT_OF_MEMORY": OUT_OF_MEMORY,
            "PENDING": PENDING,
            "RECURSIVE": RECURSIVE,
            "UNKNOWN": UNKNOWN,
            "WRITE_PROTECTED": WRITE_PROTECTED,
            "WRONG_FORMAT": WRONG_FORMAT,
            "WRONG_VERSION": WRONG_VERSION,
        }
        result = type('IOErrorCode', (object,), _dict)
        return result

    IOErrorCode = _get_enum()
else:
    from ...lo.ucb.io_error_code import IOErrorCode as IOErrorCode

__all__ = ['IOErrorCode']

