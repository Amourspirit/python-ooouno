# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.bridge.oleautomation
# Libre Office Version: 7.2
import os
import typing
from ooo_uno.oenv import UNO_ENVIRONMENT
if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
    from ooo_uno.helper import uno_helper


class Decimal(object):
    """
    Struct Class

    is the UNO representation of the Automation type DECIMAL.
    
    **since**
    
        OOo 1.1.2

    See Also:
        `API Decimal <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1bridge_1_1oleautomation_1_1Decimal.html>`_


    Note:
        | At runtime Decimal will be an actual uno struct however can seamlessly be treated as a regualr class.
        | At design time a class is presumed. This allows for better typings.
        | Decimal is a callable and can be treatead as a class and create instances.
    """

    def __init__(self, HighValue: typing.Optional[int] = None, LowValue: typing.Optional[int] = None, MiddleValue: typing.Optional[int] = None, Scale: typing.Optional[int] = None, Sign: typing.Optional[int] = None):
        self._high_value = HighValue
        self._low_value = LowValue
        self._middle_value = MiddleValue
        self._scale = Scale
        self._sign = Sign

    @property
    def HighValue(self) -> int:
        """
        corresponds to DECIMAL.Hi32.
        """
        return self._high_value
    
    @HighValue.setter
    def HighValue(self, value: int) -> None:
        self._high_value = value

    @property
    def LowValue(self) -> int:
        """
        corresponds to DECIMAL.Lo32.
        """
        return self._low_value
    
    @LowValue.setter
    def LowValue(self, value: int) -> None:
        self._low_value = value

    @property
    def MiddleValue(self) -> int:
        """
        corresponds to DECIMAL.Mid32.
        """
        return self._middle_value
    
    @MiddleValue.setter
    def MiddleValue(self, value: int) -> None:
        self._middle_value = value

    @property
    def Scale(self) -> int:
        """
        corresponds to DECIMAL.scale.
        """
        return self._scale
    
    @Scale.setter
    def Scale(self, value: int) -> None:
        self._scale = value

    @property
    def Sign(self) -> int:
        """
        corresponds to DECIMAL.sign.
        """
        return self._sign
    
    @Sign.setter
    def Sign(self, value: int) -> None:
        self._sign = value

def _dynamic_struct() -> None:
    # Dynamically create uno struct using uno
    global Decimal
    ignore = os.environ.get('ooouno_ignore_runtime', 'False')
    if ignore == 'True':
        return
    if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
        order = ('HighValue', 'LowValue', 'MiddleValue', 'Scale', 'Sign')
        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('com.sun.star.bridge.oleautomation.Decimal')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        Decimal = _struct_init

if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
    _dynamic_struct()

__all__ = ['Decimal']
