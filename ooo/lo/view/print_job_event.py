# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.view
# Libre Office Version: 7.2
from ooo.oenv import UNO_NONE
from ..lang.event_object import EventObject as EventObject_a3d70b03
import typing
from .printable_state import PrintableState as PrintableState_c9fb0c65


class PrintJobEvent(EventObject_a3d70b03):
    """
    Struct Class

    specifies the print progress of an XPrintJob.
    
    com.sun.star.lang.EventObject.Source contains the XPrintJob having changed its state
    
    .
    
    **since**
    
        OOo 1.1.2

    See Also:
        `API PrintJobEvent <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1view_1_1PrintJobEvent.html>`_
    """
    __ooo_ns__: str = 'com.sun.star.view'
    __ooo_full_ns__: str = 'com.sun.star.view.PrintJobEvent'
    __ooo_type_name__: str = 'struct'
    typeName: str = 'com.sun.star.view.PrintJobEvent'
    """Literal Constant ``com.sun.star.view.PrintJobEvent``"""

    def __init__(self, State: PrintableState_c9fb0c65 = PrintableState_c9fb0c65.JOB_STARTED, **kwargs) -> None:
        """
        Constructor

        Other Arguments:
            ``State`` can be another ``PrintJobEvent`` instance,
                in which case other named args are ignored.
                However ``**kwargs`` are still passed so parent class.

        Arguments:
            State (PrintableState, optional): State value
        """
        super().__init__(**kwargs)
        if isinstance(State, PrintJobEvent):
            oth: PrintJobEvent = State
            self._state = oth.State
            return
        else:
            self._state = State



    @property
    def State(self) -> PrintableState_c9fb0c65:
        """
        contains the current state.
        """
        return self._state
    
    @State.setter
    def State(self, value: PrintableState_c9fb0c65) -> None:
        self._state = value


__all__ = ['PrintJobEvent']
