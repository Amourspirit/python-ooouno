# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.datatransfer.dnd
# Libre Office Version: 7.2
import typing
from ...lang.event_object import EventObject as EventObject_a3d70b03
if typing.TYPE_CHECKING:
    from .x_drag_source import XDragSource as XDragSource_49900fb2


class DragGestureEvent(EventObject_a3d70b03):
    """
    Struct Class

    A DragGestureEvent is passed to the method XDragGestureListener.dragGestureRecognized() when a particular XDragGestureRecognizer detects that a platform dependent drag initiating gesture has occurred on the component that it is tracking.

    See Also:
        `API DragGestureEvent <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1datatransfer_1_1dnd_1_1DragGestureEvent.html>`_
    """
    __ooo_ns__: str = 'com.sun.star.datatransfer.dnd'
    __ooo_full_ns__: str = 'com.sun.star.datatransfer.dnd.DragGestureEvent'
    __ooo_type_name__: str = 'struct'
    typeName: str = 'com.sun.star.datatransfer.dnd.DragGestureEvent'
    """Literal Constant ``com.sun.star.datatransfer.dnd.DragGestureEvent``"""


    def __init__(self, *args, **kwargs):
        """
        Constructor

        Other Arguments:
            First positinal arg can be another ``DragGestureEvent`` instance,
                if it is the only argument passed to contructor;
                Otherwise, postitional arguments are treated as ``DragGestureEvent``
                values. Following the order of ``Keyword Arguments``.

        Keyword Arguments:
            DragAction (int, optional): DragAction value
            DragOriginX (int, optional): DragOriginX value
            DragOriginY (int, optional): DragOriginY value
            DragSource (XDragSource, optional): DragSource value
            Event (object, optional): Event value
        """
        self._drag_action = None
        self._drag_origin_x = None
        self._drag_origin_y = None
        self._drag_source = None
        self._event = None

        key_order = ('DragAction', 'DragOriginX', 'DragOriginY', 'DragSource', 'Event')
        arg_len = len(args)
        if arg_len == 1:
            if isinstance(args[0], DragGestureEvent):
                oth = args[0]
                for key in key_order:
                    setattr(self, key, getattr(oth, key))
                return

        if  arg_len > len(key_order):
            raise ValueError("DragGestureEvent.__init__() To many parameters")
        for i, arg in enumerate(args):
            setattr(self, key_order[i], arg)
        for k, v in kwargs.items():
            if k in key_order:
                setattr(self, k, v)

    @property
    def DragAction(self) -> int:
        """
        The action selected by the user.
        
        Different constants may be combined using a logical OR.
        
        It's further possible to combine the ACTION_DEFAULT with one of the other actions defined in com.sun.star.datatransfer.dnd.DNDConstants. This means the user did not press any key during the Drag and Drop operation and the action that was combined with ACTION_DEFAULT is the system default action.
        """
        return self._drag_action
    
    @DragAction.setter
    def DragAction(self, value: int) -> None:
        self._drag_action = value

    @property
    def DragOriginX(self) -> int:
        """
        The x coordinate where the drag originated in component coordinates.
        """
        return self._drag_origin_x
    
    @DragOriginX.setter
    def DragOriginX(self, value: int) -> None:
        self._drag_origin_x = value

    @property
    def DragOriginY(self) -> int:
        """
        The y coordinate where the drag originated in component coordinates.
        """
        return self._drag_origin_y
    
    @DragOriginY.setter
    def DragOriginY(self, value: int) -> None:
        self._drag_origin_y = value

    @property
    def DragSource(self) -> 'XDragSource_49900fb2':
        """
        The DragSource associated with this drag action.
        """
        return self._drag_source
    
    @DragSource.setter
    def DragSource(self, value: 'XDragSource_49900fb2') -> None:
        self._drag_source = value

    @property
    def Event(self) -> object:
        """
        The last event comprising the gesture.
        
        The initial trigger event will presumably be a com.sun.star.awt.MouseEvent event. If it is not, the implementation should either react accordingly or presume that the left mouse button was clicked.
        """
        return self._event
    
    @Event.setter
    def Event(self, value: object) -> None:
        self._event = value


__all__ = ['DragGestureEvent']
