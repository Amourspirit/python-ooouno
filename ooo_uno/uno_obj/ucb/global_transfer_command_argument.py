# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.ucb
# Libre Office Version: 7.2
import os
import typing
if typing.TYPE_CHECKING:
    from .transfer_command_operation import TransferCommandOperation as TransferCommandOperation_486a0ff7
from ooo_uno.oenv import UNO_ENVIRONMENT
if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
    from ooo_uno.helper import uno_helper


class GlobalTransferCommandArgument(object):
    """
    Struct Class

    This struct contains information needed to transfer objects from one location to another.

    See Also:
        `API GlobalTransferCommandArgument <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1ucb_1_1GlobalTransferCommandArgument.html>`_


    Note:
        | At runtime GlobalTransferCommandArgument will be an actual uno struct however can seamlessly be treated as a regualr class.
        | At design time a class is presumed. This allows for better typings.
        | GlobalTransferCommandArgument is a callable and can be treatead as a class and create instances.
    """

    def __init__(self, NameClash: typing.Optional[int] = None, NewTitle: typing.Optional[str] = None, Operation: 'typing.Optional[TransferCommandOperation_486a0ff7]' = None, SourceURL: typing.Optional[str] = None, TargetURL: typing.Optional[str] = None):
        self._name_clash = NameClash
        self._new_title = NewTitle
        self._operation = Operation
        self._source_url = SourceURL
        self._target_url = TargetURL

    @property
    def NameClash(self) -> int:
        """
        describes how to act in case of title clashes while transferring the data.
        
        A title clash for instance occurs, if a file named \"foo.txt\" is to be transferred to a folder already containing another file named \"foo.txt\". Refer to NameClash for possible values for this field.
        """
        return self._name_clash
    
    @NameClash.setter
    def NameClash(self, value: int) -> None:
        self._name_clash = value

    @property
    def NewTitle(self) -> str:
        """
        contains the title of the transferred object, if it is different from the original one.
        
        If this field is filled, for example, a file will be renamed while it is being transferred.
        """
        return self._new_title
    
    @NewTitle.setter
    def NewTitle(self, value: str) -> None:
        self._new_title = value

    @property
    def Operation(self) -> 'TransferCommandOperation_486a0ff7':
        """
        contains the action to perform ( COPY, MOVE, LINK ).
        """
        return self._operation
    
    @Operation.setter
    def Operation(self, value: 'TransferCommandOperation_486a0ff7') -> None:
        self._operation = value

    @property
    def SourceURL(self) -> str:
        """
        contains the URL of the source object.
        """
        return self._source_url
    
    @SourceURL.setter
    def SourceURL(self, value: str) -> None:
        self._source_url = value

    @property
    def TargetURL(self) -> str:
        """
        contains the URL of the target folder.
        """
        return self._target_url
    
    @TargetURL.setter
    def TargetURL(self, value: str) -> None:
        self._target_url = value

def _dynamic_struct() -> None:
    # Dynamically create uno struct using uno
    global GlobalTransferCommandArgument
    ignore = os.environ.get('ooouno_ignore_runtime', 'False')
    if ignore == 'True':
        return
    if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
        order = ('NameClash', 'NewTitle', 'Operation', 'SourceURL', 'TargetURL')
        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('com.sun.star.ucb.GlobalTransferCommandArgument')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        GlobalTransferCommandArgument = _struct_init

if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
    _dynamic_struct()

__all__ = ['GlobalTransferCommandArgument']
