# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.awt
# Libre Office Version: 7.2
from ooo.oenv import UNO_NONE
from ..lang.event_object import EventObject as EventObject_a3d70b03
import typing
from .point import Point as Point_5fb2085e
from .rectangle import Rectangle as Rectangle_84b109e9


class DockingEvent(EventObject_a3d70b03):
    """
    Struct Class

    specifies a docking event.

    See Also:
        `API DockingEvent <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1awt_1_1DockingEvent.html>`_
    """
    __ooo_ns__: str = 'com.sun.star.awt'
    __ooo_full_ns__: str = 'com.sun.star.awt.DockingEvent'
    __ooo_type_name__: str = 'struct'
    typeName: str = 'com.sun.star.awt.DockingEvent'
    """Literal Constant ``com.sun.star.awt.DockingEvent``"""

    def __init__(self, TrackingRectangle: Rectangle_84b109e9 = UNO_NONE, MousePos: Point_5fb2085e = UNO_NONE, bLiveMode: bool = False, bInteractive: bool = False, **kwargs) -> None:
        """
        Constructor

        Other Arguments:
            ``TrackingRectangle`` can be another ``DockingEvent`` instance,
                in which case other named args are ignored.
                However ``**kwargs`` are still passed so parent class.

        Arguments:
            TrackingRectangle (Rectangle, optional): TrackingRectangle value
            MousePos (Point, optional): MousePos value
            bLiveMode (bool, optional): bLiveMode value
            bInteractive (bool, optional): bInteractive value
        """
        super().__init__(**kwargs)
        if isinstance(TrackingRectangle, DockingEvent):
            oth: DockingEvent = TrackingRectangle
            self._tracking_rectangle = oth.TrackingRectangle
            self._mouse_pos = oth.MousePos
            self._b_live_mode = oth.bLiveMode
            self._b_interactive = oth.bInteractive
            return
        else:
            if TrackingRectangle is UNO_NONE:
                self._tracking_rectangle = Rectangle_84b109e9()
            else:
                self._tracking_rectangle = TrackingRectangle
            if MousePos is UNO_NONE:
                self._mouse_pos = Point_5fb2085e()
            else:
                self._mouse_pos = MousePos
            self._b_live_mode = bLiveMode
            self._b_interactive = bInteractive



    @property
    def TrackingRectangle(self) -> Rectangle_84b109e9:
        """
        specifies the current tracking rectangle
        """
        return self._tracking_rectangle
    
    @TrackingRectangle.setter
    def TrackingRectangle(self, value: Rectangle_84b109e9) -> None:
        self._tracking_rectangle = value

    @property
    def MousePos(self) -> Point_5fb2085e:
        """
        specifies the current mouse position in frame coordinates
        """
        return self._mouse_pos
    
    @MousePos.setter
    def MousePos(self, value: Point_5fb2085e) -> None:
        self._mouse_pos = value

    @property
    def bLiveMode(self) -> bool:
        """
        specifies if the layout should be adjusted immediately
        """
        return self._b_live_mode
    
    @bLiveMode.setter
    def bLiveMode(self, value: bool) -> None:
        self._b_live_mode = value

    @property
    def bInteractive(self) -> bool:
        """
        specifies if the docking procedure is interactive which means that the user is currently dragging the window to a new position if this member is FALSE the window will be docked or undocked immediately using the returned tracking rectangle
        """
        return self._b_interactive
    
    @bInteractive.setter
    def bInteractive(self, value: bool) -> None:
        self._b_interactive = value


__all__ = ['DockingEvent']
