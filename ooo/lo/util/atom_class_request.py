# coding: utf-8
#
# Copyright 2023-2024 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.util
# Libre Office Version: 2024.2
from ooo.oenv.env_const import UNO_NONE
import typing


class AtomClassRequest(object):
    """
    Struct Class

    is used to describe which atoms the user wants to know about.

    See Also:
        `API AtomClassRequest <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1util_1_1AtomClassRequest.html>`_
    """
    __ooo_ns__: str = 'com.sun.star.util'
    __ooo_full_ns__: str = 'com.sun.star.util.AtomClassRequest'
    __ooo_type_name__: str = 'struct'
    typeName: str = 'com.sun.star.util.AtomClassRequest'
    """Literal Constant ``com.sun.star.util.AtomClassRequest``"""

    def __init__(self, atomClass: typing.Optional[int] = 0, atoms: typing.Optional[typing.Tuple[int, ...]] = ()) -> None:
        """
        Constructor

        Arguments:
            atomClass (int, optional): atomClass value.
            atoms (typing.Tuple[int, ...], optional): atoms value.
        """
        super().__init__()

        if isinstance(atomClass, AtomClassRequest):
            oth: AtomClassRequest = atomClass
            self.atomClass = oth.atomClass
            self.atoms = oth.atoms
            return

        kargs = {
            "atomClass": atomClass,
            "atoms": atoms,
        }
        self._init(**kargs)

    def _init(self, **kwargs) -> None:
        self._atom_class = kwargs["atomClass"]
        self._atoms = kwargs["atoms"]


    @property
    def atomClass(self) -> int:
        """
        the class of the atoms described in member AtomClassRequest.atoms().
        """
        return self._atom_class

    @atomClass.setter
    def atomClass(self, value: int) -> None:
        self._atom_class = value

    @property
    def atoms(self) -> typing.Tuple[int, ...]:
        """
        the atoms requested from class AtomClassRequest.atomClass().
        """
        return self._atoms

    @atoms.setter
    def atoms(self, value: typing.Tuple[int, ...]) -> None:
        self._atoms = value


__all__ = ['AtomClassRequest']
