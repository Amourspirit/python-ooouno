# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.frame
# Libre Office Version: 7.2
import typing
if typing.TYPE_CHECKING:
    from ..util.url import URL as URL_57ad07b9


class DispatchDescriptor(object):
    """
    Struct Class

    describes a feature to be retrieved by a URL that has to be loaded into a specified frame
    
    For a normal dispatch calls all needed parameters are separated. For optimized remote functionality XDispatch.queryDispatches() it's necessary to pack these parameters in a flat structure which can be used in a simple manner.

    See Also:
        `API DispatchDescriptor <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1frame_1_1DispatchDescriptor.html>`_
    """
    __ooo_ns__: str = 'com.sun.star.frame'
    __ooo_full_ns__: str = 'com.sun.star.frame.DispatchDescriptor'
    __ooo_type_name__: str = 'struct'
    typeName: str = 'com.sun.star.frame.DispatchDescriptor'
    """Literal Constant ``com.sun.star.frame.DispatchDescriptor``"""


    def __init__(self, *args, **kwargs):
        """
        Constructor

        Other Arguments:
            First positinal arg can be another ``DispatchDescriptor`` instance,
                if it is the only argument passed to contructor;
                Otherwise, postitional arguments are treated as ``DispatchDescriptor``
                values. Following the order of ``Keyword Arguments``.

        Keyword Arguments:
            FeatureURL (URL, optional): FeatureURL value
            FrameName (str, optional): FrameName value
            SearchFlags (int, optional): SearchFlags value
        """
        self._feature_url = None
        self._frame_name = None
        self._search_flags = None

        key_order = ('FeatureURL', 'FrameName', 'SearchFlags')
        arg_len = len(args)
        if arg_len == 1:
            if isinstance(args[0], DispatchDescriptor):
                oth = args[0]
                for key in key_order:
                    setattr(self, key, getattr(oth, key))
                return

        if  arg_len > len(key_order):
            raise ValueError("DispatchDescriptor.__init__() To many parameters")
        for i, arg in enumerate(args):
            setattr(self, key_order[i], arg)
        for k, v in kwargs.items():
            if k in key_order:
                setattr(self, k, v)

    @property
    def FeatureURL(self) -> 'URL_57ad07b9':
        """
        specifies the URL of the resource/function
        
        Must be a full parsed URL. Use service com.sun.star.util.URLTransformer for that.
        """
        return self._feature_url
    
    @FeatureURL.setter
    def FeatureURL(self, value: 'URL_57ad07b9') -> None:
        self._feature_url = value

    @property
    def FrameName(self) -> str:
        """
        name of the target frame
        
        Special targets (e.g. \"_blank\", \"_self\") or really existing target names can be used.
        """
        return self._frame_name
    
    @FrameName.setter
    def FrameName(self, value: str) -> None:
        self._frame_name = value

    @property
    def SearchFlags(self) -> int:
        """
        describes how the target frame is to be searched
        
        This optional parameter is used if FrameName isn't a special target only.
        """
        return self._search_flags
    
    @SearchFlags.setter
    def SearchFlags(self, value: int) -> None:
        self._search_flags = value


__all__ = ['DispatchDescriptor']
