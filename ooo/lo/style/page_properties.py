# coding: utf-8
#
# Copyright 2023-2024 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Service Class
# this is a auto generated file generated by Cheetah
# Libre Office Version: 2024.2
# Namespace: com.sun.star.style
from __future__ import annotations
import typing
from abc import abstractmethod, ABC
if typing.TYPE_CHECKING:
    from ..awt.size import Size as Size_576707ef
    from ..container.x_name_container import XNameContainer as XNameContainer_cb90e47
    from ..graphic.x_graphic import XGraphic as XGraphic_a4da0afc
    from ..table.border_line import BorderLine as BorderLine_a3f80af6
    from ..table.shadow_format import ShadowFormat as ShadowFormat_bb840bdf
    from ..text.x_text import XText as XText_690408ca
    from ..text.x_text_columns import XTextColumns as XTextColumns_b17f0bab
    from ..util.color import Color as Color_68e908c5
    from com.sun.star.style.GraphicLocation import GraphicLocationProto  # type: ignore
    from com.sun.star.style.PageStyleLayout import PageStyleLayoutProto  # type: ignore

class PageProperties(ABC):
    """
    Service Class

    describes the style of pages.
    
    **since**
    
        LibreOffice 6.1

    See Also:
        `API PageProperties <https://api.libreoffice.org/docs/idl/ref/servicecom_1_1sun_1_1star_1_1style_1_1PageProperties.html>`_
    """
    __ooo_ns__: str = 'com.sun.star.style'
    __ooo_full_ns__: str = 'com.sun.star.style.PageProperties'
    __ooo_type_name__: str = 'service'

    @property
    @abstractmethod
    def BackColor(self) -> Color_68e908c5:
        """
        contains the background color of the page.
        """
        ...

    @property
    @abstractmethod
    def BackGraphic(self) -> XGraphic_a4da0afc:
        """
        contains the graphic of the background.
        
        **since**
        
            LibreOffice 6.1
        """
        ...

    @property
    @abstractmethod
    def BackGraphicFilter(self) -> str:
        """
        contains the filter name of the background graphic.
        """
        ...

    @property
    @abstractmethod
    def BackGraphicLocation(self) -> GraphicLocationProto:
        """
        determines the location of the background graphic.
        """
        ...

    @property
    @abstractmethod
    def BackGraphicURL(self) -> str:
        """
        contains the URL of the background graphic.
        
        Note the new behaviour since it this was deprecated: This property can only be set and only external URLs are supported (no more vnd.sun.star.GraphicObject scheme). When an URL is set, then it will load the graphic and set the BackGraphic property.
        """
        ...

    @property
    @abstractmethod
    def BackTransparent(self) -> bool:
        """
        determines if the background color is transparent.
        
        If this property is set to TRUE, PageStyle.BackColor will not be used.
        """
        ...

    @property
    @abstractmethod
    def BackgroundFullSize(self) -> bool:
        """
        does the background cover the full page or only inside the margins?
        
        **since**
        
            LibreOffice 7.2
        """
        ...

    @property
    @abstractmethod
    def BorderDistance(self) -> int:
        """
        determines the distance of all borders of the page.
        """
        ...

    @property
    @abstractmethod
    def BottomBorder(self) -> BorderLine_a3f80af6:
        """
        determines the style of the bottom border line of the page.
        """
        ...

    @property
    @abstractmethod
    def BottomBorderDistance(self) -> int:
        """
        determines the bottom border distance of the page.
        """
        ...

    @property
    @abstractmethod
    def BottomMargin(self) -> int:
        """
        determines the bottom margin of the page.
        """
        ...

    @property
    @abstractmethod
    def FirstIsShared(self) -> bool:
        """
        determines if the header/footer content on the first page and remaining pages is the same.
        
        **since**
        
            LibreOffice 4.0
        """
        ...

    @property
    @abstractmethod
    def FooterBackColor(self) -> Color_68e908c5:
        """
        contains the color of the background of the footer.
        """
        ...

    @property
    @abstractmethod
    def FooterBackGraphic(self) -> XGraphic_a4da0afc:
        """
        contains the graphic of the background of the footer.
        
        **since**
        
            LibreOffice 6.1
        """
        ...

    @property
    @abstractmethod
    def FooterBackGraphicFilter(self) -> str:
        """
        contains the filter name of the background graphic in the footer.
        """
        ...

    @property
    @abstractmethod
    def FooterBackGraphicLocation(self) -> GraphicLocationProto:
        """
        determines the location of the background graphic in the footer.
        """
        ...

    @property
    @abstractmethod
    def FooterBackGraphicURL(self) -> str:
        """
        contains the URL of the background graphic in the footer.
        
        Note the new behaviour since it this was deprecated: This property can only be set and only external URLs are supported (no more vnd.sun.star.GraphicObject scheme). When an URL is set, then it will load the graphic and set the FooterBackGraphic property.
        """
        ...

    @property
    @abstractmethod
    def FooterBackTransparent(self) -> bool:
        """
        determines if the background of the footer is transparent.
        """
        ...

    @property
    @abstractmethod
    def FooterBodyDistance(self) -> int:
        """
        determines the distance between the footer and the body text area.
        """
        ...

    @property
    @abstractmethod
    def FooterBorderDistance(self) -> int:
        """
        contains the distance of all borders of the footer.
        """
        ...

    @property
    @abstractmethod
    def FooterBottomBorder(self) -> BorderLine_a3f80af6:
        """
        contains the style of the bottom border line of the footer.
        """
        ...

    @property
    @abstractmethod
    def FooterBottomBorderDistance(self) -> int:
        """
        contains the bottom border distance of the footer.
        """
        ...

    @property
    @abstractmethod
    def FooterDynamicSpacing(self) -> bool:
        """
        determines whether to use dynamic spacing in footer or not.
        """
        ...

    @property
    @abstractmethod
    def FooterHeight(self) -> int:
        """
        determines the height of the footer.
        """
        ...

    @property
    @abstractmethod
    def FooterIsDynamicHeight(self) -> bool:
        """
        determines if the height of the footer depends on the content.
        """
        ...

    @property
    @abstractmethod
    def FooterIsOn(self) -> bool:
        """
        determines if a footer is used on the page.
        """
        ...

    @property
    @abstractmethod
    def FooterIsShared(self) -> bool:
        """
        determines if the footer content on left and right pages is the same.
        """
        ...

    @property
    @abstractmethod
    def FooterLeftBorder(self) -> BorderLine_a3f80af6:
        """
        contains the style of the left border line of the footer.
        """
        ...

    @property
    @abstractmethod
    def FooterLeftBorderDistance(self) -> int:
        """
        contains the left border distance of the footer.
        """
        ...

    @property
    @abstractmethod
    def FooterLeftMargin(self) -> int:
        """
        determines the left margin of the footer.
        """
        ...

    @property
    @abstractmethod
    def FooterRightBorder(self) -> BorderLine_a3f80af6:
        """
        contains the style of the right border line of the footer.
        """
        ...

    @property
    @abstractmethod
    def FooterRightBorderDistance(self) -> int:
        """
        contains the right border distance of the footer.
        """
        ...

    @property
    @abstractmethod
    def FooterRightMargin(self) -> int:
        """
        determines the right margin of the footer.
        """
        ...

    @property
    @abstractmethod
    def FooterShadowFormat(self) -> ShadowFormat_bb840bdf:
        """
        determines the shadow of the footer.
        """
        ...

    @property
    @abstractmethod
    def FooterText(self) -> XText_690408ca:
        """
        contains the interface to the text of the footer.
        """
        ...

    @property
    @abstractmethod
    def FooterTextLeft(self) -> XText_690408ca:
        """
        contains the interface to the text of the footer of a left page.
        """
        ...

    @property
    @abstractmethod
    def FooterTextRight(self) -> XText_690408ca:
        """
        contains the interface to the text of the footer of a right page.
        """
        ...

    @property
    @abstractmethod
    def FooterTopBorder(self) -> BorderLine_a3f80af6:
        """
        contains the style of the top border line of the footer.
        """
        ...

    @property
    @abstractmethod
    def FooterTopBorderDistance(self) -> int:
        """
        contains the top border distance of the footer.
        """
        ...

    @property
    @abstractmethod
    def FootnoteHeight(self) -> int:
        """
        contains the maximum height of the footnote area.
        
        If set to zero then the height of the current page is used as limit.
        """
        ...

    @property
    @abstractmethod
    def FootnoteLineAdjust(self) -> int:
        """
        contains the adjustment of the separator line between the text and the footnote area.
        
        com.sun.star.text.HorizontalAdjusts.
        """
        ...

    @property
    @abstractmethod
    def FootnoteLineColor(self) -> Color_68e908c5:
        """
        contains the color of the separator line between the text and the footnote area.
        """
        ...

    @property
    @abstractmethod
    def FootnoteLineDistance(self) -> int:
        """
        contains the distance between the footnote area and the separator line between the text and the footnote area.
        """
        ...

    @property
    @abstractmethod
    def FootnoteLineRelativeWidth(self) -> int:
        """
        contains the relative width of the separator line between the text and the footnote area.
        """
        ...

    @property
    @abstractmethod
    def FootnoteLineStyle(self) -> int:
        """
        contains the style of the separator line between the text and the footnote area.
        """
        ...

    @property
    @abstractmethod
    def FootnoteLineTextDistance(self) -> int:
        """
        contains the distance between the text and the separator line between the text and the footnote area.
        """
        ...

    @property
    @abstractmethod
    def FootnoteLineWeight(self) -> int:
        """
        contains the weight of the separator line between the text and the footnote area.
        """
        ...

    @property
    @abstractmethod
    def GridBaseHeight(self) -> int:
        """
        contains the height of the base text line inside the text grid
        """
        ...

    @property
    @abstractmethod
    def GridColor(self) -> Color_68e908c5:
        """
        contains the display color of the text grid
        """
        ...

    @property
    @abstractmethod
    def GridDisplay(self) -> bool:
        """
        determines whether the text grid lines are visible or not
        """
        ...

    @property
    @abstractmethod
    def GridLines(self) -> int:
        """
        contains the number of lines in the text grid
        """
        ...

    @property
    @abstractmethod
    def GridMode(self) -> int:
        """
        contains the mode of the text grid (none, lines, ...), as represented by com.sun.star.text.TextGridMode constants
        """
        ...

    @property
    @abstractmethod
    def GridPrint(self) -> bool:
        """
        determines whether the text grid lines are printed
        """
        ...

    @property
    @abstractmethod
    def GridRubyBelow(self) -> bool:
        """
        determines whether the text grid's ruby line is located below or above the base line
        """
        ...

    @property
    @abstractmethod
    def GridRubyHeight(self) -> int:
        """
        contains the height of the ruby text line inside the text grid
        """
        ...

    @property
    @abstractmethod
    def GutterMargin(self) -> int:
        """
        determines the gutter margin of the page.
        
        **since**
        
            LibreOffice 7.2
        """
        ...

    @property
    @abstractmethod
    def HeaderBackColor(self) -> Color_68e908c5:
        """
        contains the color of the background of the header.
        """
        ...

    @property
    @abstractmethod
    def HeaderBackGraphic(self) -> XGraphic_a4da0afc:
        """
        contains the graphic of the background of the header.
        
        **since**
        
            LibreOffice 6.1
        """
        ...

    @property
    @abstractmethod
    def HeaderBackGraphicFilter(self) -> str:
        """
        contains the filter name of the background graphic of the header.
        """
        ...

    @property
    @abstractmethod
    def HeaderBackGraphicLocation(self) -> GraphicLocationProto:
        """
        determines the location of the background graphic of the header.
        """
        ...

    @property
    @abstractmethod
    def HeaderBackGraphicURL(self) -> str:
        """
        contains the URL of the background graphic of the header.
        
        Note the new behaviour since it this was deprecated: This property can only be set and only external URLs are supported (no more vnd.sun.star.GraphicObject scheme). When an URL is set, then it will load the graphic and set the HeaderBackGraphic property.
        """
        ...

    @property
    @abstractmethod
    def HeaderBackTransparent(self) -> bool:
        """
        determines if the background color of the header is transparent.
        
        If this property is set to TRUE, PageStyle.HeaderBackColor will not be used.
        """
        ...

    @property
    @abstractmethod
    def HeaderBodyDistance(self) -> int:
        """
        determines the distance between the header and the body text area.
        """
        ...

    @property
    @abstractmethod
    def HeaderBorderDistance(self) -> int:
        """
        determines the distance of all borders of the header.
        """
        ...

    @property
    @abstractmethod
    def HeaderBottomBorder(self) -> BorderLine_a3f80af6:
        """
        determines the style of the bottom border line of the header.
        """
        ...

    @property
    @abstractmethod
    def HeaderBottomBorderDistance(self) -> int:
        """
        determines the bottom border distance of the header.
        """
        ...

    @property
    @abstractmethod
    def HeaderDynamicSpacing(self) -> bool:
        """
        determines whether to use dynamic spacing in header or not.
        """
        ...

    @property
    @abstractmethod
    def HeaderHeight(self) -> int:
        """
        contains the height of the header.
        """
        ...

    @property
    @abstractmethod
    def HeaderIsDynamicHeight(self) -> bool:
        """
        determines if the height of the header depends on the content.
        """
        ...

    @property
    @abstractmethod
    def HeaderIsOn(self) -> bool:
        """
        determines if a header is used on the page.
        """
        ...

    @property
    @abstractmethod
    def HeaderIsShared(self) -> bool:
        """
        determines if the header content on left and right pages is the same.
        """
        ...

    @property
    @abstractmethod
    def HeaderLeftBorder(self) -> BorderLine_a3f80af6:
        """
        determines the style of the left border line of the header.
        """
        ...

    @property
    @abstractmethod
    def HeaderLeftBorderDistance(self) -> int:
        """
        determines the left border distance of the header.
        """
        ...

    @property
    @abstractmethod
    def HeaderLeftMargin(self) -> int:
        """
        contains the left margin of the header.
        """
        ...

    @property
    @abstractmethod
    def HeaderRightBorder(self) -> BorderLine_a3f80af6:
        """
        determines the style of the right border line of the header.
        """
        ...

    @property
    @abstractmethod
    def HeaderRightBorderDistance(self) -> int:
        """
        determines the right border distance of the header.
        """
        ...

    @property
    @abstractmethod
    def HeaderRightMargin(self) -> int:
        """
        contains the right margin of the header.
        """
        ...

    @property
    @abstractmethod
    def HeaderShadowFormat(self) -> ShadowFormat_bb840bdf:
        """
        determines the shadow of the header.
        """
        ...

    @property
    @abstractmethod
    def HeaderText(self) -> XText_690408ca:
        """
        contains the interface to the text of the header.
        """
        ...

    @property
    @abstractmethod
    def HeaderTextLeft(self) -> XText_690408ca:
        """
        contains the interface to the text of the header of left pages.
        """
        ...

    @property
    @abstractmethod
    def HeaderTextRight(self) -> XText_690408ca:
        """
        contains the interface to the text of the header of right pages.
        """
        ...

    @property
    @abstractmethod
    def HeaderTopBorder(self) -> BorderLine_a3f80af6:
        """
        determines the style of the top border line of the header.
        """
        ...

    @property
    @abstractmethod
    def HeaderTopBorderDistance(self) -> int:
        """
        determines the top border distance of the header.
        """
        ...

    @property
    @abstractmethod
    def Height(self) -> int:
        """
        contains the height of the page.
        """
        ...

    @property
    @abstractmethod
    def IsLandscape(self) -> bool:
        """
        determines if the page format is landscape.
        """
        ...

    @property
    @abstractmethod
    def LeftBorder(self) -> BorderLine_a3f80af6:
        """
        determines the style of the left border line of the page.
        """
        ...

    @property
    @abstractmethod
    def LeftBorderDistance(self) -> int:
        """
        determines the left border distance of the page.
        """
        ...

    @property
    @abstractmethod
    def LeftMargin(self) -> int:
        """
        determines the left margin of the page.
        """
        ...

    @property
    @abstractmethod
    def NumberingType(self) -> int:
        """
        determines the default numbering type for this page.
        """
        ...

    @property
    @abstractmethod
    def PageStyleLayout(self) -> PageStyleLayoutProto:
        """
        determines the layout of the page.
        """
        ...

    @property
    @abstractmethod
    def PrinterPaperTray(self) -> str:
        """
        contains the name of a paper tray of the selected printer.
        """
        ...

    @property
    @abstractmethod
    def RegisterModeActive(self) -> bool:
        """
        determines if the register mode is active on that page.
        """
        ...

    @property
    @abstractmethod
    def RegisterParagraphStyle(self) -> str:
        """
        contains the name of the paragraph style that is used as reference of the register mode.
        """
        ...

    @property
    @abstractmethod
    def RightBorder(self) -> BorderLine_a3f80af6:
        """
        determines the style of the right border line of the page.
        """
        ...

    @property
    @abstractmethod
    def RightBorderDistance(self) -> int:
        """
        determines the right border distance of the page.
        """
        ...

    @property
    @abstractmethod
    def RightMargin(self) -> int:
        """
        determines the right margin of the page.
        """
        ...

    @property
    @abstractmethod
    def RtlGutter(self) -> bool:
        """
        specifies that the page gutter shall be placed on the right side of the page.
        
        **since**
        
            LibreOffice 7.2
        """
        ...

    @property
    @abstractmethod
    def ShadowFormat(self) -> ShadowFormat_bb840bdf:
        """
        determines the shadow of the page.
        """
        ...

    @property
    @abstractmethod
    def Size(self) -> Size_576707ef:
        """
        contains the paper size of the page.
        """
        ...

    @property
    @abstractmethod
    def TextColumns(self) -> XTextColumns_b17f0bab:
        """
        contains the column settings of the page.
        """
        ...

    @property
    @abstractmethod
    def TopBorder(self) -> BorderLine_a3f80af6:
        """
        determines the style of the top border line of the page.
        """
        ...

    @property
    @abstractmethod
    def TopBorderDistance(self) -> int:
        """
        determines the top border distance of the page.
        """
        ...

    @property
    @abstractmethod
    def TopMargin(self) -> int:
        """
        determines the top margin of the page.
        """
        ...

    @property
    @abstractmethod
    def UserDefinedAttributes(self) -> XNameContainer_cb90e47:
        """
        contains user defined attributes.
        
        This com.sun.star.container.XNameContainer supports the service com.sun.star.xml.AttributeContainer.
        """
        ...

    @property
    @abstractmethod
    def Width(self) -> int:
        """
        contains the width of the page.
        """
        ...

    @property
    @abstractmethod
    def WritingMode(self) -> int:
        """
        contains the writing direction, as represented by the com.sun.star.text.WritingMode2 constants
        """
        ...


__all__ = ['PageProperties']