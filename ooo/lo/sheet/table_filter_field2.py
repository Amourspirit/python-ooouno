# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.sheet
# Libre Office Version: 7.2
from ooo.oenv import UNO_NONE
import typing
from .filter_connection import FilterConnection as FilterConnection_f01f0d97


class TableFilterField2(object):
    """
    Struct Class

    describes a single condition in a filter descriptor.
    
    This struct has the FilterOperator2 constants group as member, whereas the TableFilterField struct uses the FilterOperator enum.
    
    **since**
    
        OOo 3.2

    See Also:
        `API TableFilterField2 <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1sheet_1_1TableFilterField2.html>`_
    """
    __ooo_ns__: str = 'com.sun.star.sheet'
    __ooo_full_ns__: str = 'com.sun.star.sheet.TableFilterField2'
    __ooo_type_name__: str = 'struct'
    typeName: str = 'com.sun.star.sheet.TableFilterField2'
    """Literal Constant ``com.sun.star.sheet.TableFilterField2``"""

    def __init__(self, Connection: FilterConnection_f01f0d97 = FilterConnection_f01f0d97.AND, Field: int = 0, Operator: int = 0, IsNumeric: bool = False, NumericValue: float = 0.0, StringValue: str = '') -> None:
        """
        Constructor

        Other Arguments:
            ``Connection`` can be another ``TableFilterField2`` instance,
                in which case other named args are ignored.

        Arguments:
            Connection (FilterConnection, optional): Connection value
            Field (int, optional): Field value
            Operator (int, optional): Operator value
            IsNumeric (bool, optional): IsNumeric value
            NumericValue (float, optional): NumericValue value
            StringValue (str, optional): StringValue value
        """
        if isinstance(Connection, TableFilterField2):
            oth: TableFilterField2 = Connection
            self._connection = oth.Connection
            self._field = oth.Field
            self._operator = oth.Operator
            self._is_numeric = oth.IsNumeric
            self._numeric_value = oth.NumericValue
            self._string_value = oth.StringValue
            return
        else:
            self._connection = Connection
            self._field = Field
            self._operator = Operator
            self._is_numeric = IsNumeric
            self._numeric_value = NumericValue
            self._string_value = StringValue



    @property
    def Connection(self) -> FilterConnection_f01f0d97:
        """
        specifies how the condition is connected to the previous condition.
        """
        return self._connection
    
    @Connection.setter
    def Connection(self, value: FilterConnection_f01f0d97) -> None:
        self._connection = value

    @property
    def Field(self) -> int:
        """
        specifies which field (column) is used for the condition.
        """
        return self._field
    
    @Field.setter
    def Field(self, value: int) -> None:
        self._field = value

    @property
    def Operator(self) -> int:
        """
        specifies the type of the condition as defined in FilterOperator2.
        """
        return self._operator
    
    @Operator.setter
    def Operator(self, value: int) -> None:
        self._operator = value

    @property
    def IsNumeric(self) -> bool:
        """
        selects whether the TableFilterField2.NumericValue or the TableFilterField2.StringValue is used.
        """
        return self._is_numeric
    
    @IsNumeric.setter
    def IsNumeric(self, value: bool) -> None:
        self._is_numeric = value

    @property
    def NumericValue(self) -> float:
        """
        specifies a numeric value for the condition.
        """
        return self._numeric_value
    
    @NumericValue.setter
    def NumericValue(self, value: float) -> None:
        self._numeric_value = value

    @property
    def StringValue(self) -> str:
        """
        specifies a string value for the condition.
        """
        return self._string_value
    
    @StringValue.setter
    def StringValue(self, value: str) -> None:
        self._string_value = value


__all__ = ['TableFilterField2']
