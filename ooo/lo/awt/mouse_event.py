# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.awt
# Libre Office Version: 7.2
from .input_event import InputEvent as InputEvent_8f520a66


class MouseEvent(InputEvent_8f520a66):
    """
    Struct Class

    specifies an event from the mouse.
    
    This event is also used for pop-up menu requests on objects. See PopupTrigger for details.

    See Also:
        `API MouseEvent <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1awt_1_1MouseEvent.html>`_
    """
    __ooo_ns__: str = 'com.sun.star.awt'
    __ooo_full_ns__: str = 'com.sun.star.awt.MouseEvent'
    __ooo_type_name__: str = 'struct'
    typeName: str = 'com.sun.star.awt.MouseEvent'
    """Literal Constant ``com.sun.star.awt.MouseEvent``"""


    def __init__(self, *args, **kwargs):
        """
        Constructor

        Other Arguments:
            First positinal arg can be another ``MouseEvent`` instance,
                if it is the only argument passed to contructor;
                Otherwise, postitional arguments are treated as ``MouseEvent``
                values. Following the order of ``Keyword Arguments``.

        Keyword Arguments:
            Buttons (int, optional): Buttons value
            X (int, optional): X value
            Y (int, optional): Y value
            ClickCount (int, optional): ClickCount value
            PopupTrigger (bool, optional): PopupTrigger value
        """
        self._buttons = None
        self._x = None
        self._y = None
        self._click_count = None
        self._popup_trigger = None

        key_order = ('Buttons', 'X', 'Y', 'ClickCount', 'PopupTrigger')
        arg_len = len(args)
        if arg_len == 1:
            if isinstance(args[0], MouseEvent):
                oth = args[0]
                for key in key_order:
                    setattr(self, key, getattr(oth, key))
                return

        if  arg_len > len(key_order):
            raise ValueError("MouseEvent.__init__() To many parameters")
        for i, arg in enumerate(args):
            setattr(self, key_order[i], arg)
        for k, v in kwargs.items():
            if k in key_order:
                setattr(self, k, v)

    @property
    def Buttons(self) -> int:
        """
        contains the pressed mouse buttons.
        
        Zero ore more constants from the com.sun.star.awt.MouseButton group.
        """
        return self._buttons
    
    @Buttons.setter
    def Buttons(self, value: int) -> None:
        self._buttons = value

    @property
    def X(self) -> int:
        """
        contains the x coordinate location of the mouse.
        """
        return self._x
    
    @X.setter
    def X(self, value: int) -> None:
        self._x = value

    @property
    def Y(self) -> int:
        """
        contains the y coordinate location of the mouse.
        """
        return self._y
    
    @Y.setter
    def Y(self, value: int) -> None:
        self._y = value

    @property
    def ClickCount(self) -> int:
        """
        contains the number of mouse clicks associated with event.
        """
        return self._click_count
    
    @ClickCount.setter
    def ClickCount(self, value: int) -> None:
        self._click_count = value

    @property
    def PopupTrigger(self) -> bool:
        """
        specifies if this event is a pop-up menu trigger event.
        
        If this member is TRUE, the event describes a request for a pop-up menu, also known as context menu, on an object.
        
        In this case, X and Y describe the position where the request was issued. If those members are -1, then the request was issued using the keyboard, by pressing the operating-system dependent key combination for this purpose.
        """
        return self._popup_trigger
    
    @PopupTrigger.setter
    def PopupTrigger(self, value: bool) -> None:
        self._popup_trigger = value


__all__ = ['MouseEvent']
