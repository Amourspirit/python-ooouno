# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.text
# Libre Office Version: 7.2
import os
import typing
from ooo_uno.oenv import UNO_ENVIRONMENT
if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
    from ooo_uno.helper import uno_helper


class HoriOrientationFormat(object):
    """
    Struct Class

    describes the horizontal orientation of an object.
    
    If HorizontalOrientation == HORI_NONE, then the value \"XPos\" describes the distance from the left border of the context. Otherwise \"XPos\" is ignored.
    
    The following flags are used to adapt the position of the object to odd and even pages. If \"PositionToggle\" is set, then the horizontal position is mirrored.

    See Also:
        `API HoriOrientationFormat <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1text_1_1HoriOrientationFormat.html>`_


    Note:
        | At runtime HoriOrientationFormat will be an actual uno struct however can seamlessly be treated as a regualr class.
        | At design time a class is presumed. This allows for better typings.
        | HoriOrientationFormat is a callable and can be treatead as a class and create instances.
    """

    def __init__(self, HorizontalOrientation: typing.Optional[int] = None, HorizontalRelation: typing.Optional[int] = None, PositionToggle: typing.Optional[bool] = None, XPos: typing.Optional[int] = None):
        self._horizontal_orientation = HorizontalOrientation
        self._horizontal_relation = HorizontalRelation
        self._position_toggle = PositionToggle
        self._x_pos = XPos

    @property
    def HorizontalOrientation(self) -> int:
        """
        determines the horizontal alignment of an object.
        
        The values refer to com.sun.star.HoriOrientation.
        """
        return self._horizontal_orientation
    
    @HorizontalOrientation.setter
    def HorizontalOrientation(self, value: int) -> None:
        self._horizontal_orientation = value

    @property
    def HorizontalRelation(self) -> int:
        """
        determines the reference position of the horizontal alignment.
        """
        return self._horizontal_relation
    
    @HorizontalRelation.setter
    def HorizontalRelation(self, value: int) -> None:
        self._horizontal_relation = value

    @property
    def PositionToggle(self) -> bool:
        """
        determines if the orientation toggles between left and right pages.
        """
        return self._position_toggle
    
    @PositionToggle.setter
    def PositionToggle(self, value: bool) -> None:
        self._position_toggle = value

    @property
    def XPos(self) -> int:
        """
        contains the distance from the left border.
        
        Only valid if the property HorizontalOrientation contains the value HORI_NONE.
        """
        return self._x_pos
    
    @XPos.setter
    def XPos(self, value: int) -> None:
        self._x_pos = value

def _dynamic_struct() -> None:
    # Dynamically create uno struct using uno
    global HoriOrientationFormat
    ignore = os.environ.get('ooouno_ignore_runtime', 'False')
    if ignore == 'True':
        return
    if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
        order = ('HorizontalOrientation', 'HorizontalRelation', 'PositionToggle', 'XPos')
        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('com.sun.star.text.HoriOrientationFormat')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        HoriOrientationFormat = _struct_init

if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
    _dynamic_struct()

__all__ = ['HoriOrientationFormat']
