# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.sheet
# Libre Office Version: 7.2
import typing
if typing.TYPE_CHECKING:
    from .dde_item_info import DDEItemInfo as DDEItemInfo_ac870b09
from ooo_uno.oenv import UNO_ENVIRONMENT, UNO_RUNTIME
_DYNAMIC = False
if (not typing.TYPE_CHECKING) and UNO_RUNTIME and UNO_ENVIRONMENT:
    _DYNAMIC = True
    from ooo_uno.helper import uno_helper

if typing.TYPE_CHECKING or _DYNAMIC is False:


    class DDELinkInfo(object):
        """
        Struct Class

        describes all items of a DDE connection used in formulas.
        
        A DDE connection consists of the DDE service name, the DDE topic and a list of DDE items which may contain results cached from the last update.
        
        The formula that would need this information for example would contain =[1]!'R1C1' or =[2]!'Sheet1.A1' where [1] is an external link with DDE service name \"excel\" and the topic \"X:\\PATH\\[FILE.XLSX]Sheet1\", and [2] contains service \"soffice\" and topic \"file:///X:/PATH/FILE.ODS\". The service name is stored in DDELinkInfo.Service, the topic is stored in DDELinkInfo.Topic. Note that if the DDE item contains single quotes they are escaped by doubling them, as usual, for example =[2]!'''Sheet name''.A1' in a \"soffice\" service.
        
        **since**
        
            OOo 3.1

        See Also:
            `API DDELinkInfo <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1sheet_1_1DDELinkInfo.html>`_


        Note:
            | At runtime DDELinkInfo will be an actual uno struct however can seamlessly be treated as a regualr class.
            | At design time a class is presumed. This allows for better typings.
            | DDELinkInfo is a callable and can be treatead as a class and create instances.
        """

        def __init__(self, Items: 'typing.Optional[typing.List[DDEItemInfo_ac870b09]]' = None, Service: typing.Optional[str] = None, Topic: typing.Optional[str] = None):
            self._items = Items
            self._service = Service
            self._topic = Topic

        @property
        def Items(self) -> 'typing.List[DDEItemInfo_ac870b09]':
            """
            A list of DDE items.
            
            Each item may contain its results from the last update.
            """
            return self._items
        
        @Items.setter
        def Items(self, value: 'typing.List[DDEItemInfo_ac870b09]') -> None:
            self._items = value

        @property
        def Service(self) -> str:
            """
            The DDE service name.
            """
            return self._service
        
        @Service.setter
        def Service(self, value: str) -> None:
            self._service = value

        @property
        def Topic(self) -> str:
            """
            The DDE topic.
            """
            return self._topic
        
        @Topic.setter
        def Topic(self, value: str) -> None:
            self._topic = value

if not typing.TYPE_CHECKING and _DYNAMIC:
    def _dynamic_struct() -> None:
        # Dynamically create uno struct using uno
        global DDELinkInfo
        order = ('Items', 'Service', 'Topic')

        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('com.sun.star.sheet.DDELinkInfo')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        DDELinkInfo = _struct_init

    _dynamic_struct()

__all__ = ['DDELinkInfo']
