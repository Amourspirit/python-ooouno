# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.ucb
# Libre Office Version: 7.2
import typing
if typing.TYPE_CHECKING:
    from .search_criterium import SearchCriterium as SearchCriterium_c6d30c4c
    from .search_recursion import SearchRecursion as SearchRecursion_c7080c52
from ooo_uno.oenv import UNO_ENVIRONMENT, UNO_RUNTIME
_DYNAMIC = False
if (not typing.TYPE_CHECKING) and UNO_RUNTIME and UNO_ENVIRONMENT:
    _DYNAMIC = True
    from ooo_uno.helper import uno_helper

if typing.TYPE_CHECKING or _DYNAMIC is False:


    class SearchInfo(object):
        """
        Struct Class

        information needed to (recursively) search an object.

        See Also:
            `API SearchInfo <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1ucb_1_1SearchInfo.html>`_


        Note:
            | At runtime SearchInfo will be an actual uno struct however can seamlessly be treated as a regualr class.
            | At design time a class is presumed. This allows for better typings.
            | SearchInfo is a callable and can be treatead as a class and create instances.
        """

        def __init__(self, Criteria: 'typing.Optional[typing.List[SearchCriterium_c6d30c4c]]' = None, FollowIndirections: typing.Optional[bool] = None, IncludeBase: typing.Optional[bool] = None, Recursion: 'typing.Optional[SearchRecursion_c7080c52]' = None, RespectDocViewRestrictions: typing.Optional[bool] = None, RespectFolderViewRestrictions: typing.Optional[bool] = None):
            self._criteria = Criteria
            self._follow_indirections = FollowIndirections
            self._include_base = IncludeBase
            self._recursion = Recursion
            self._respect_doc_view_restrictions = RespectDocViewRestrictions
            self._respect_folder_view_restrictions = RespectFolderViewRestrictions

        @property
        def Criteria(self) -> 'typing.List[SearchCriterium_c6d30c4c]':
            """
            the search criteria.
            """
            return self._criteria
        
        @Criteria.setter
        def Criteria(self, value: 'typing.List[SearchCriterium_c6d30c4c]') -> None:
            self._criteria = value

        @property
        def FollowIndirections(self) -> bool:
            """
            whether to follow indirections (link objects) and search through their respective targets also.
            """
            return self._follow_indirections
        
        @FollowIndirections.setter
        def FollowIndirections(self, value: bool) -> None:
            self._follow_indirections = value

        @property
        def IncludeBase(self) -> bool:
            """
            whether to include the object itself in the search or only (some of) its sub-objects.
            """
            return self._include_base
        
        @IncludeBase.setter
        def IncludeBase(self, value: bool) -> None:
            self._include_base = value

        @property
        def Recursion(self) -> 'SearchRecursion_c7080c52':
            """
            the mode of recursion to use.
            """
            return self._recursion
        
        @Recursion.setter
        def Recursion(self, value: 'SearchRecursion_c7080c52') -> None:
            self._recursion = value

        @property
        def RespectDocViewRestrictions(self) -> bool:
            """
            whether to respect the \"view restrictions\" specified for the documents hierarchically contained within an object (e.g., only searches through marked documents).
            """
            return self._respect_doc_view_restrictions
        
        @RespectDocViewRestrictions.setter
        def RespectDocViewRestrictions(self, value: bool) -> None:
            self._respect_doc_view_restrictions = value

        @property
        def RespectFolderViewRestrictions(self) -> bool:
            """
            whether to respect the \"view restrictions\" specified for the folders hierarchically contained within an object (e.g., only searches through subscribed folders).
            """
            return self._respect_folder_view_restrictions
        
        @RespectFolderViewRestrictions.setter
        def RespectFolderViewRestrictions(self, value: bool) -> None:
            self._respect_folder_view_restrictions = value

if not typing.TYPE_CHECKING and _DYNAMIC:
    def _dynamic_struct() -> None:
        # Dynamically create uno struct using uno
        global SearchInfo
        order = ('Criteria', 'FollowIndirections', 'IncludeBase', 'Recursion', 'RespectDocViewRestrictions', 'RespectFolderViewRestrictions')

        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('com.sun.star.ucb.SearchInfo')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        SearchInfo = _struct_init

    _dynamic_struct()

__all__ = ['SearchInfo']
