# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.sheet
# Libre Office Version: 7.2
import os
import typing
from ooo_uno.oenv import UNO_ENVIRONMENT
if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
    from ooo_uno.helper import uno_helper


class MemberResult(object):
    """
    Struct Class

    describes a result of a DataPilot member.
    
    **since**
    
        LibreOffice 5.3

    See Also:
        `API MemberResult <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1sheet_1_1MemberResult.html>`_


    Note:
        | At runtime MemberResult will be an actual uno struct however can seamlessly be treated as a regualr class.
        | At design time a class is presumed. This allows for better typings.
        | MemberResult is a callable and can be treatead as a class and create instances.
    """

    def __init__(self, Caption: typing.Optional[str] = None, Flags: typing.Optional[int] = None, Name: typing.Optional[str] = None, Value: typing.Optional[float] = None):
        self._caption = Caption
        self._flags = Flags
        self._name = Name
        self._value = Value

    @property
    def Caption(self) -> str:
        """
        the visible name of the field.
        """
        return self._caption
    
    @Caption.setter
    def Caption(self, value: str) -> None:
        self._caption = value

    @property
    def Flags(self) -> int:
        """
        contains flags describing the result.
        """
        return self._flags
    
    @Flags.setter
    def Flags(self, value: int) -> None:
        self._flags = value

    @property
    def Name(self) -> str:
        """
        the internal name of the field.
        """
        return self._name
    
    @Name.setter
    def Name(self, value: str) -> None:
        self._name = value

    @property
    def Value(self) -> float:
        """
        the underlying numeric value of the field if Flags indicate so by having com.sun.star.sheet.MemberResultFlags.NUMERIC set.
        
        May be NaN if value is not available or unknown.
        
        **since**
        
            LibreOffice 5.3
        """
        return self._value
    
    @Value.setter
    def Value(self, value: float) -> None:
        self._value = value

def _dynamic_struct() -> None:
    # Dynamically create uno struct using uno
    global MemberResult
    ignore = os.environ.get('ooouno_ignore_runtime', 'False')
    if ignore == 'True':
        return
    if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
        order = ('Caption', 'Flags', 'Name', 'Value')
        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('com.sun.star.sheet.MemberResult')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        MemberResult = _struct_init

if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
    _dynamic_struct()

__all__ = ['MemberResult']
