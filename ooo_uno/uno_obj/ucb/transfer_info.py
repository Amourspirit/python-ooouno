# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.ucb
# Libre Office Version: 7.2
import typing
from ooo_uno.oenv import UNO_ENVIRONMENT, UNO_RUNTIME
_DYNAMIC = False
if (not typing.TYPE_CHECKING) and UNO_RUNTIME and UNO_ENVIRONMENT:
    _DYNAMIC = True
    from ooo_uno.helper import uno_helper

if typing.TYPE_CHECKING or _DYNAMIC is False:


    class TransferInfo(object):
        """
        Struct Class

        contains information needed to transfer objects from one location to another.
        
        The transfer command is always called on the target folder. For a details description of the transfer command refer to the documentation of service Content.

        See Also:
            `API TransferInfo <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1ucb_1_1TransferInfo.html>`_


        Note:
            | At runtime TransferInfo will be an actual uno struct however can seamlessly be treated as a regualr class.
            | At design time a class is presumed. This allows for better typings.
            | TransferInfo is a callable and can be treatead as a class and create instances.
        """

        def __init__(self, MoveData: typing.Optional[bool] = None, NameClash: typing.Optional[int] = None, NewTitle: typing.Optional[str] = None, SourceURL: typing.Optional[str] = None):
            self._move_data = MoveData
            self._name_clash = NameClash
            self._new_title = NewTitle
            self._source_url = SourceURL

        @property
        def MoveData(self) -> bool:
            """
            contains the flags describing whether the data shall be moved instead of copied.
            """
            return self._move_data
        
        @MoveData.setter
        def MoveData(self, value: bool) -> None:
            self._move_data = value

        @property
        def NameClash(self) -> int:
            """
            describes how to act in case of title clashes while transferring the data.
            
            A title clash for instance occurs, if a file named \"foo.txt\" is to be transferred to a folder already containing another file named \"foo.txt\".
            
            The value can be one of the NameClash constants.
            
            Implementations that are not able to detect whether there is a clashing resource may ignore NameClash.ERROR and NameClash.RENAME always write the new data.
            """
            return self._name_clash
        
        @NameClash.setter
        def NameClash(self, value: int) -> None:
            self._name_clash = value

        @property
        def NewTitle(self) -> str:
            """
            contains the title of the transferred object, if it is different from the original one.
            
            If this field is filled, for example, a file will be renamed while it is being transferred.
            """
            return self._new_title
        
        @NewTitle.setter
        def NewTitle(self, value: str) -> None:
            self._new_title = value

        @property
        def SourceURL(self) -> str:
            """
            contains the URL of the source of the action (e.g.
            
            the URL of a file to move).
            """
            return self._source_url
        
        @SourceURL.setter
        def SourceURL(self, value: str) -> None:
            self._source_url = value

if not typing.TYPE_CHECKING and _DYNAMIC:
    def _dynamic_struct() -> None:
        # Dynamically create uno struct using uno
        global TransferInfo
        order = ('MoveData', 'NameClash', 'NewTitle', 'SourceURL')

        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('com.sun.star.ucb.TransferInfo')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        TransferInfo = _struct_init

    _dynamic_struct()

__all__ = ['TransferInfo']
