# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.awt
# Libre Office Version: 7.2
import os
import typing
if typing.TYPE_CHECKING:
    from .font_slant import FontSlant as FontSlant_849509ed
from ooo_uno.oenv import UNO_ENVIRONMENT
if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
    from ooo_uno.helper import uno_helper


class FontDescriptor(object):
    """
    Struct Class

    describes the characteristics of a font.
    
    For example, this can be used to select a font.

    See Also:
        `API FontDescriptor <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1awt_1_1FontDescriptor.html>`_


    Note:
        | At runtime FontDescriptor will be an actual uno struct however can seamlessly be treated as a regualr class.
        | At design time a class is presumed. This allows for better typings.
        | FontDescriptor is a callable and can be treatead as a class and create instances.
    """

    def __init__(self, CharSet: typing.Optional[int] = None, CharacterWidth: typing.Optional[float] = None, Family: typing.Optional[int] = None, Height: typing.Optional[int] = None, Kerning: typing.Optional[bool] = None, Name: typing.Optional[str] = None, Orientation: typing.Optional[float] = None, Pitch: typing.Optional[int] = None, Slant: 'typing.Optional[FontSlant_849509ed]' = None, Strikeout: typing.Optional[int] = None, StyleName: typing.Optional[str] = None, Type: typing.Optional[int] = None, Underline: typing.Optional[int] = None, Weight: typing.Optional[float] = None, Width: typing.Optional[int] = None, WordLineMode: typing.Optional[bool] = None):
        self._char_set = CharSet
        self._character_width = CharacterWidth
        self._family = Family
        self._height = Height
        self._kerning = Kerning
        self._name = Name
        self._orientation = Orientation
        self._pitch = Pitch
        self._slant = Slant
        self._strikeout = Strikeout
        self._style_name = StyleName
        self._type = Type
        self._underline = Underline
        self._weight = Weight
        self._width = Width
        self._word_line_mode = WordLineMode

    @property
    def CharSet(self) -> int:
        """
        specifies the character set which is supported by the font.
        
        Use one value out of the constant group com.sun.star.awt.CharSet.
        """
        return self._char_set
    
    @CharSet.setter
    def CharSet(self, value: int) -> None:
        self._char_set = value

    @property
    def CharacterWidth(self) -> float:
        """
        specifies the character width.
        
        Depending on the specified width, a font that supports this width may be selected.
        
        The value is expressed as a percentage.
        """
        return self._character_width
    
    @CharacterWidth.setter
    def CharacterWidth(self, value: float) -> None:
        self._character_width = value

    @property
    def Family(self) -> int:
        """
        specifies the general style of the font.
        
        Use one value out of the constant group com.sun.star.awt.FontFamily.
        """
        return self._family
    
    @Family.setter
    def Family(self, value: int) -> None:
        self._family = value

    @property
    def Height(self) -> int:
        """
        specifies the height of the font in the measure of the destination.
        """
        return self._height
    
    @Height.setter
    def Height(self, value: int) -> None:
        self._height = value

    @property
    def Kerning(self) -> bool:
        """
        For requesting, it specifies if there is a kerning table available.
        
        For selecting, it specifies if the kerning table is to be used.
        """
        return self._kerning
    
    @Kerning.setter
    def Kerning(self, value: bool) -> None:
        self._kerning = value

    @property
    def Name(self) -> str:
        """
        specifies the exact name of the font.
        """
        return self._name
    
    @Name.setter
    def Name(self, value: str) -> None:
        self._name = value

    @property
    def Orientation(self) -> float:
        """
        specifies the rotation of the font.
        
        The unit of measure is degrees; 0 is the baseline.
        """
        return self._orientation
    
    @Orientation.setter
    def Orientation(self, value: float) -> None:
        self._orientation = value

    @property
    def Pitch(self) -> int:
        """
        specifies the pitch of the font.
        
        Use one value out of the constant group com.sun.star.awt.FontPitch.
        """
        return self._pitch
    
    @Pitch.setter
    def Pitch(self, value: int) -> None:
        self._pitch = value

    @property
    def Slant(self) -> 'FontSlant_849509ed':
        """
        specifies the slant of the font.
        """
        return self._slant
    
    @Slant.setter
    def Slant(self, value: 'FontSlant_849509ed') -> None:
        self._slant = value

    @property
    def Strikeout(self) -> int:
        """
        specifies the kind of strikeout.
        
        Use one value out of the constant group com.sun.star.awt.FontStrikeout.
        """
        return self._strikeout
    
    @Strikeout.setter
    def Strikeout(self, value: int) -> None:
        self._strikeout = value

    @property
    def StyleName(self) -> str:
        """
        specifies the style name of the font.
        """
        return self._style_name
    
    @StyleName.setter
    def StyleName(self, value: str) -> None:
        self._style_name = value

    @property
    def Type(self) -> int:
        """
        specifies the technology of the font representation.
        
        One or more values out of the constant group com.sun.star.awt.FontType can be combined by an arithmetical or-operation.
        """
        return self._type
    
    @Type.setter
    def Type(self, value: int) -> None:
        self._type = value

    @property
    def Underline(self) -> int:
        """
        specifies the kind of underlining.
        
        Use one value out of the constant group com.sun.star.awt.FontUnderline.
        """
        return self._underline
    
    @Underline.setter
    def Underline(self, value: int) -> None:
        self._underline = value

    @property
    def Weight(self) -> float:
        """
        specifies the thickness of the line.
        
        Depending on the specified weight, a font that supports this thickness may be selected.
        
        The value is expressed as a percentage.
        """
        return self._weight
    
    @Weight.setter
    def Weight(self, value: float) -> None:
        self._weight = value

    @property
    def Width(self) -> int:
        """
        specifies the width of the font in the measure of the destination.
        """
        return self._width
    
    @Width.setter
    def Width(self, value: int) -> None:
        self._width = value

    @property
    def WordLineMode(self) -> bool:
        """
        specifies if only words get underlined.
        
        TRUE means that only non-space characters get underlined, FALSE means that the spacing also gets underlined.
        
        This property is only valid if the property com.sun.star.awt.FontDescriptor.Underline is not FontUnderline.NONE.
        """
        return self._word_line_mode
    
    @WordLineMode.setter
    def WordLineMode(self, value: bool) -> None:
        self._word_line_mode = value

def _dynamic_struct() -> None:
    # Dynamically create uno struct using uno
    global FontDescriptor
    ignore = os.environ.get('ooouno_ignore_runtime', 'False')
    if ignore == 'True':
        return
    if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
        order = ('CharSet', 'CharacterWidth', 'Family', 'Height', 'Kerning', 'Name', 'Orientation', 'Pitch', 'Slant', 'Strikeout', 'StyleName', 'Type', 'Underline', 'Weight', 'Width', 'WordLineMode')
        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('com.sun.star.awt.FontDescriptor')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        FontDescriptor = _struct_init

if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
    _dynamic_struct()

__all__ = ['FontDescriptor']
