# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.util
# Libre Office Version: 7.2
from .search_options import SearchOptions as SearchOptions_bd140c08
import typing
from ooo_uno.oenv import UNO_ENVIRONMENT, UNO_RUNTIME
_DYNAMIC = False
if (not typing.TYPE_CHECKING) and UNO_RUNTIME and UNO_ENVIRONMENT:
    _DYNAMIC = True
    from ooo_uno.helper import uno_helper

if typing.TYPE_CHECKING or _DYNAMIC is False:


    class SearchOptions2(SearchOptions_bd140c08):
        """
        Struct Class

        This augments com.sun.star.util.SearchOptions to be able to specify additional search algorithms for use with com.sun.star.util.XTextSearch2.
        
        **since**
        
            LibreOffice 5.2

        See Also:
            `API SearchOptions2 <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1util_1_1SearchOptions2.html>`_


        Note:
            | At runtime SearchOptions2 will be an actual uno struct however can seamlessly be treated as a regualr class.
            | At design time a class is presumed. This allows for better typings.
            | SearchOptions2 is a callable and can be treatead as a class and create instances.
        """

        def __init__(self, AlgorithmType2: typing.Optional[int] = None, WildcardEscapeCharacter: typing.Optional[int] = None):
            self._algorithm_type2 = AlgorithmType2
            self._wildcard_escape_character = WildcardEscapeCharacter

        @property
        def AlgorithmType2(self) -> int:
            """
            Search type, one of com.sun.star.util.SearchAlgorithms2 constants.
            
            This is preferred over the content of the SearchAlgorithms SearchOptions.algorithmType enum field.
            """
            return self._algorithm_type2
        
        @AlgorithmType2.setter
        def AlgorithmType2(self, value: int) -> None:
            self._algorithm_type2 = value

        @property
        def WildcardEscapeCharacter(self) -> int:
            """
            The escape character to be used with a com.sun.star.util.SearchAlgorithms2.WILDCARD search.
            
            A Unicode character, if not 0 escapes the special meaning of a question mark, asterisk or escape character that follows immediately after the escape character. If 0 defines no escape character is used.
            
            Common values are '\\' (U+005C REVERSE SOLIDUS) aka backslash in text processing context, or '~' (U+007E TILDE) in spreadsheet processing context.
            """
            return self._wildcard_escape_character
        
        @WildcardEscapeCharacter.setter
        def WildcardEscapeCharacter(self, value: int) -> None:
            self._wildcard_escape_character = value

if not typing.TYPE_CHECKING and _DYNAMIC:
    def _dynamic_struct() -> None:
        # Dynamically create uno struct using uno
        global SearchOptions2
        order = ('AlgorithmType2', 'WildcardEscapeCharacter')

        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('com.sun.star.util.SearchOptions2')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        SearchOptions2 = _struct_init

    _dynamic_struct()

__all__ = ['SearchOptions2']
