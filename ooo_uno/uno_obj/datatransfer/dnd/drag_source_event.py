# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.datatransfer.dnd
# Libre Office Version: 7.2
from ...lang.event_object import EventObject as EventObject_a3d70b03
import typing
if typing.TYPE_CHECKING:
    from .x_drag_source import XDragSource as XDragSource_49900fb2
    from .x_drag_source_context import XDragSourceContext as XDragSourceContext_c2661297
from ooo_uno.oenv import UNO_ENVIRONMENT, UNO_RUNTIME
_DYNAMIC = False
if (not typing.TYPE_CHECKING) and UNO_RUNTIME and UNO_ENVIRONMENT:
    _DYNAMIC = True
    from ooo_uno.helper import uno_helper

if typing.TYPE_CHECKING or _DYNAMIC is False:


    class DragSourceEvent(EventObject_a3d70b03):
        """
        Struct Class

        This class is the base class for DragSourceDragEvent and DragSourceDropEvent.
        
        To access the XDragSource that originated this event, use the com.sun.star.lang.EventObject.Source member of this object.

        See Also:
            `API DragSourceEvent <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1datatransfer_1_1dnd_1_1DragSourceEvent.html>`_


        Note:
            | At runtime DragSourceEvent will be an actual uno struct however can seamlessly be treated as a regualr class.
            | At design time a class is presumed. This allows for better typings.
            | DragSourceEvent is a callable and can be treatead as a class and create instances.
        """

        def __init__(self, DragSource: 'typing.Optional[XDragSource_49900fb2]' = None, DragSourceContext: 'typing.Optional[XDragSourceContext_c2661297]' = None):
            self._drag_source = DragSource
            self._drag_source_context = DragSourceContext

        @property
        def DragSource(self) -> 'XDragSource_49900fb2':
            """
            The drag source on which the Drag and Drop operation was initiated.
            """
            return self._drag_source
        
        @DragSource.setter
        def DragSource(self, value: 'XDragSource_49900fb2') -> None:
            self._drag_source = value

        @property
        def DragSourceContext(self) -> 'XDragSourceContext_c2661297':
            """
            The drag source context of the current drag operation.
            """
            return self._drag_source_context
        
        @DragSourceContext.setter
        def DragSourceContext(self, value: 'XDragSourceContext_c2661297') -> None:
            self._drag_source_context = value

if not typing.TYPE_CHECKING and _DYNAMIC:
    def _dynamic_struct() -> None:
        # Dynamically create uno struct using uno
        global DragSourceEvent
        order = ('DragSource', 'DragSourceContext')

        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('com.sun.star.datatransfer.dnd.DragSourceEvent')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        DragSourceEvent = _struct_init

    _dynamic_struct()

__all__ = ['DragSourceEvent']
