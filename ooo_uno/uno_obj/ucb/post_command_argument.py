# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.ucb
# Libre Office Version: 7.2
import os
import typing
if typing.TYPE_CHECKING:
    from ..io.x_input_stream import XInputStream as XInputStream_98d40ab4
    from ..uno.x_interface import XInterface as XInterface_8f010a43
from ooo_uno.oenv import UNO_ENVIRONMENT
if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
    from ooo_uno.helper import uno_helper


class PostCommandArgument(object):
    """
    Struct Class

    The argument for the command \"post\".

    See Also:
        `API PostCommandArgument <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1ucb_1_1PostCommandArgument.html>`_


    Note:
        | At runtime PostCommandArgument will be an actual uno struct however can seamlessly be treated as a regualr class.
        | At design time a class is presumed. This allows for better typings.
        | PostCommandArgument is a callable and can be treatead as a class and create instances.
    """

    def __init__(self, Sink: 'typing.Optional[XInterface_8f010a43]' = None, Source: 'typing.Optional[XInputStream_98d40ab4]' = None):
        self._sink = Sink
        self._source = Source

    @property
    def Sink(self) -> 'XInterface_8f010a43':
        """
        The data sink receiving the returned contents (supporting either com.sun.star.io.XActiveDataSink or com.sun.star.io.XOutputStream).
        """
        return self._sink
    
    @Sink.setter
    def Sink(self, value: 'XInterface_8f010a43') -> None:
        self._sink = value

    @property
    def Source(self) -> 'XInputStream_98d40ab4':
        """
        The data source containing the data to post.
        """
        return self._source
    
    @Source.setter
    def Source(self, value: 'XInputStream_98d40ab4') -> None:
        self._source = value

def _dynamic_struct() -> None:
    # Dynamically create uno struct using uno
    global PostCommandArgument
    ignore = os.environ.get('ooouno_ignore_runtime', 'False')
    if ignore == 'True':
        return
    if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
        order = ('Sink', 'Source')
        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('com.sun.star.ucb.PostCommandArgument')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        PostCommandArgument = _struct_init

if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
    _dynamic_struct()

__all__ = ['PostCommandArgument']
