# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.ucb
# Libre Office Version: 7.2
import os
import typing
from ooo_uno.oenv import UNO_ENVIRONMENT
if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
    from ooo_uno.helper import uno_helper


class FolderListEntry(object):
    """
    Struct Class

    Information about a single folder in a FolderList.

    See Also:
        `API FolderListEntry <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1ucb_1_1FolderListEntry.html>`_


    Note:
        | At runtime FolderListEntry will be an actual uno struct however can seamlessly be treated as a regualr class.
        | At design time a class is presumed. This allows for better typings.
        | FolderListEntry is a callable and can be treatead as a class and create instances.
    """

    def __init__(self, ID: typing.Optional[str] = None, New: typing.Optional[bool] = None, Purge: typing.Optional[bool] = None, Removed: typing.Optional[bool] = None, Subscribed: typing.Optional[bool] = None, Title: typing.Optional[str] = None):
        self._id = ID
        self._new = New
        self._purge = Purge
        self._removed = Removed
        self._subscribed = Subscribed
        self._title = Title

    @property
    def ID(self) -> str:
        """
        A (unique) identifier for the folder (used by IMAP, where different folders with equal human-readable titles may exist; otherwise, it may be left empty).
        """
        return self._id
    
    @ID.setter
    def ID(self, value: str) -> None:
        self._id = value

    @property
    def New(self) -> bool:
        """
        The folder is new.
        """
        return self._new
    
    @New.setter
    def New(self, value: bool) -> None:
        self._new = value

    @property
    def Purge(self) -> bool:
        """
        The folder shall be purged (only used in conjunction with the FolderListCommand.SET).
        """
        return self._purge
    
    @Purge.setter
    def Purge(self, value: bool) -> None:
        self._purge = value

    @property
    def Removed(self) -> bool:
        """
        The folder has been removed.
        """
        return self._removed
    
    @Removed.setter
    def Removed(self, value: bool) -> None:
        self._removed = value

    @property
    def Subscribed(self) -> bool:
        """
        The folder is subscribed.
        """
        return self._subscribed
    
    @Subscribed.setter
    def Subscribed(self, value: bool) -> None:
        self._subscribed = value

    @property
    def Title(self) -> str:
        """
        The title of the folder.
        """
        return self._title
    
    @Title.setter
    def Title(self, value: str) -> None:
        self._title = value

def _dynamic_struct() -> None:
    # Dynamically create uno struct using uno
    global FolderListEntry
    ignore = os.environ.get('ooouno_ignore_runtime', 'False')
    if ignore == 'True':
        return
    if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
        order = ('ID', 'New', 'Purge', 'Removed', 'Subscribed', 'Title')
        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('com.sun.star.ucb.FolderListEntry')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        FolderListEntry = _struct_init

if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
    _dynamic_struct()

__all__ = ['FolderListEntry']
