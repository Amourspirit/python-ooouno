# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.util
# Libre Office Version: 7.2
import os
import typing
if typing.TYPE_CHECKING:
    from .date_time import DateTime as DateTime_84de09d3
from ooo_uno.oenv import UNO_ENVIRONMENT
if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
    from ooo_uno.helper import uno_helper


class RevisionTag(object):
    """
    Struct Class

    represents the information that describes a revision of something.

    See Also:
        `API RevisionTag <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1util_1_1RevisionTag.html>`_


    Note:
        | At runtime RevisionTag will be an actual uno struct however can seamlessly be treated as a regualr class.
        | At design time a class is presumed. This allows for better typings.
        | RevisionTag is a callable and can be treatead as a class and create instances.
    """

    def __init__(self, Author: typing.Optional[str] = None, Comment: typing.Optional[str] = None, Identifier: typing.Optional[str] = None, TimeStamp: 'typing.Optional[DateTime_84de09d3]' = None):
        self._author = Author
        self._comment = Comment
        self._identifier = Identifier
        self._time_stamp = TimeStamp

    @property
    def Author(self) -> str:
        """
        contains an identifier for the author that created the revision( can be empty )
        """
        return self._author
    
    @Author.setter
    def Author(self, value: str) -> None:
        self._author = value

    @property
    def Comment(self) -> str:
        """
        contains a comment that the author has left for this revision ( can be empty )
        """
        return self._comment
    
    @Comment.setter
    def Comment(self, value: str) -> None:
        self._comment = value

    @property
    def Identifier(self) -> str:
        """
        contains a unique identifier for the revision and must not be empty
        
        This identifier can have any form. It can be something like \"1.2.3\" or \"Version 1\" etc. It depends on the revision control system how it names the revisions.
        """
        return self._identifier
    
    @Identifier.setter
    def Identifier(self, value: str) -> None:
        self._identifier = value

    @property
    def TimeStamp(self) -> 'DateTime_84de09d3':
        """
        contains the time when the revision was created ( can be invalid )
        """
        return self._time_stamp
    
    @TimeStamp.setter
    def TimeStamp(self, value: 'DateTime_84de09d3') -> None:
        self._time_stamp = value

def _dynamic_struct() -> None:
    # Dynamically create uno struct using uno
    global RevisionTag
    ignore = os.environ.get('ooouno_ignore_runtime', 'False')
    if ignore == 'True':
        return
    if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
        order = ('Author', 'Comment', 'Identifier', 'TimeStamp')
        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('com.sun.star.util.RevisionTag')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        RevisionTag = _struct_init

if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
    _dynamic_struct()

__all__ = ['RevisionTag']
