# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.table
# Libre Office Version: 7.2
import os
import typing
if typing.TYPE_CHECKING:
    from .border_line2 import BorderLine2 as BorderLine2_af200b28
from ooo_uno.oenv import UNO_ENVIRONMENT
if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
    from ooo_uno.helper import uno_helper


class TableBorder2(object):
    """
    Struct Class

    contains the style settings of the border lines of all cells in a cell range.
    
    TableBorder2 is nearly identical to TableBorder, except that it has members of BorderLine2 instead of BorderLine.
    
    In a queried structure, the flags in TableBorder2.Is...LineValid indicate that not all lines of the boxes have the same values.
    
    In a structure which is used for setting, these flags determine if the corresponding line should be set or if the old value should be kept.
    
    **since**
    
        LibreOffice 3.6

    See Also:
        `API TableBorder2 <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1table_1_1TableBorder2.html>`_


    Note:
        | At runtime TableBorder2 will be an actual uno struct however can seamlessly be treated as a regualr class.
        | At design time a class is presumed. This allows for better typings.
        | TableBorder2 is a callable and can be treatead as a class and create instances.
    """

    def __init__(self, BottomLine: 'typing.Optional[BorderLine2_af200b28]' = None, Distance: typing.Optional[int] = None, HorizontalLine: 'typing.Optional[BorderLine2_af200b28]' = None, IsBottomLineValid: typing.Optional[bool] = None, IsDistanceValid: typing.Optional[bool] = None, IsHorizontalLineValid: typing.Optional[bool] = None, IsLeftLineValid: typing.Optional[bool] = None, IsRightLineValid: typing.Optional[bool] = None, IsTopLineValid: typing.Optional[bool] = None, IsVerticalLineValid: typing.Optional[bool] = None, LeftLine: 'typing.Optional[BorderLine2_af200b28]' = None, RightLine: 'typing.Optional[BorderLine2_af200b28]' = None, TopLine: 'typing.Optional[BorderLine2_af200b28]' = None, VerticalLine: 'typing.Optional[BorderLine2_af200b28]' = None):
        self._bottom_line = BottomLine
        self._distance = Distance
        self._horizontal_line = HorizontalLine
        self._is_bottom_line_valid = IsBottomLineValid
        self._is_distance_valid = IsDistanceValid
        self._is_horizontal_line_valid = IsHorizontalLineValid
        self._is_left_line_valid = IsLeftLineValid
        self._is_right_line_valid = IsRightLineValid
        self._is_top_line_valid = IsTopLineValid
        self._is_vertical_line_valid = IsVerticalLineValid
        self._left_line = LeftLine
        self._right_line = RightLine
        self._top_line = TopLine
        self._vertical_line = VerticalLine

    @property
    def BottomLine(self) -> 'BorderLine2_af200b28':
        """
        determines the line style at the bottom edge.
        """
        return self._bottom_line
    
    @BottomLine.setter
    def BottomLine(self, value: 'BorderLine2_af200b28') -> None:
        self._bottom_line = value

    @property
    def Distance(self) -> int:
        """
        contains the distance between the lines and other contents.
        """
        return self._distance
    
    @Distance.setter
    def Distance(self, value: int) -> None:
        self._distance = value

    @property
    def HorizontalLine(self) -> 'BorderLine2_af200b28':
        """
        determines the line style of horizontal lines for the inner part of a cell range.
        """
        return self._horizontal_line
    
    @HorizontalLine.setter
    def HorizontalLine(self, value: 'BorderLine2_af200b28') -> None:
        self._horizontal_line = value

    @property
    def IsBottomLineValid(self) -> bool:
        """
        specifies whether the value of TableBorder2.BottomLine is used.
        """
        return self._is_bottom_line_valid
    
    @IsBottomLineValid.setter
    def IsBottomLineValid(self, value: bool) -> None:
        self._is_bottom_line_valid = value

    @property
    def IsDistanceValid(self) -> bool:
        """
        specifies whether the value of TableBorder2.Distance is used.
        """
        return self._is_distance_valid
    
    @IsDistanceValid.setter
    def IsDistanceValid(self, value: bool) -> None:
        self._is_distance_valid = value

    @property
    def IsHorizontalLineValid(self) -> bool:
        """
        specifies whether the value of TableBorder2.HorizontalLine is used.
        """
        return self._is_horizontal_line_valid
    
    @IsHorizontalLineValid.setter
    def IsHorizontalLineValid(self, value: bool) -> None:
        self._is_horizontal_line_valid = value

    @property
    def IsLeftLineValid(self) -> bool:
        """
        specifies whether the value of TableBorder2.LeftLine is used.
        """
        return self._is_left_line_valid
    
    @IsLeftLineValid.setter
    def IsLeftLineValid(self, value: bool) -> None:
        self._is_left_line_valid = value

    @property
    def IsRightLineValid(self) -> bool:
        """
        specifies whether the value of TableBorder2.RightLine is used.
        """
        return self._is_right_line_valid
    
    @IsRightLineValid.setter
    def IsRightLineValid(self, value: bool) -> None:
        self._is_right_line_valid = value

    @property
    def IsTopLineValid(self) -> bool:
        """
        specifies whether the value of TableBorder2.TopLine is used.
        """
        return self._is_top_line_valid
    
    @IsTopLineValid.setter
    def IsTopLineValid(self, value: bool) -> None:
        self._is_top_line_valid = value

    @property
    def IsVerticalLineValid(self) -> bool:
        """
        specifies whether the value of TableBorder2.VerticalLine is used.
        """
        return self._is_vertical_line_valid
    
    @IsVerticalLineValid.setter
    def IsVerticalLineValid(self, value: bool) -> None:
        self._is_vertical_line_valid = value

    @property
    def LeftLine(self) -> 'BorderLine2_af200b28':
        """
        determines the line style at the left edge.
        """
        return self._left_line
    
    @LeftLine.setter
    def LeftLine(self, value: 'BorderLine2_af200b28') -> None:
        self._left_line = value

    @property
    def RightLine(self) -> 'BorderLine2_af200b28':
        """
        determines the line style at the right edge.
        """
        return self._right_line
    
    @RightLine.setter
    def RightLine(self, value: 'BorderLine2_af200b28') -> None:
        self._right_line = value

    @property
    def TopLine(self) -> 'BorderLine2_af200b28':
        """
        determines the line style at the top edge.
        """
        return self._top_line
    
    @TopLine.setter
    def TopLine(self, value: 'BorderLine2_af200b28') -> None:
        self._top_line = value

    @property
    def VerticalLine(self) -> 'BorderLine2_af200b28':
        """
        determines the line style of vertical lines for the inner part of a cell range.
        """
        return self._vertical_line
    
    @VerticalLine.setter
    def VerticalLine(self, value: 'BorderLine2_af200b28') -> None:
        self._vertical_line = value

def _dynamic_struct() -> None:
    # Dynamically create uno struct using uno
    global TableBorder2
    ignore = os.environ.get('ooouno_ignore_runtime', 'False')
    if ignore == 'True':
        return
    if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
        order = ('BottomLine', 'Distance', 'HorizontalLine', 'IsBottomLineValid', 'IsDistanceValid', 'IsHorizontalLineValid', 'IsLeftLineValid', 'IsRightLineValid', 'IsTopLineValid', 'IsVerticalLineValid', 'LeftLine', 'RightLine', 'TopLine', 'VerticalLine')
        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('com.sun.star.table.TableBorder2')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        TableBorder2 = _struct_init

if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
    _dynamic_struct()

__all__ = ['TableBorder2']
