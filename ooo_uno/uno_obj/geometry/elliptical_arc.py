# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.geometry
# Libre Office Version: 7.2
import os
import typing
if typing.TYPE_CHECKING:
    from .real_point2_d import RealPoint2D as RealPoint2D_d6e70c78
from ooo_uno.oenv import UNO_ENVIRONMENT
if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
    from ooo_uno.helper import uno_helper


class EllipticalArc(object):
    """
    Struct Class

    This structure specifies an arbitrary elliptical arc.
    
    This structure contains all parameters necessary to specify arbitrary elliptical arcs. The parameters are modeled closely after the SVG specification.
    
    As with the parameters below, there are mostly four different ellipses arcs (two different ellipses, on which four different arcs connect start and end point) which satisfy the given set of constrains. Thus, there are two flags indicating which one of those ellipses should be taken.
    
    **since**
    
        OOo 2.0

    See Also:
        `API EllipticalArc <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1geometry_1_1EllipticalArc.html>`_


    Note:
        | At runtime EllipticalArc will be an actual uno struct however can seamlessly be treated as a regualr class.
        | At design time a class is presumed. This allows for better typings.
        | EllipticalArc is a callable and can be treatead as a class and create instances.
    """

    def __init__(self, EndPosition: 'typing.Optional[RealPoint2D_d6e70c78]' = None, IsClockwiseSweep: typing.Optional[bool] = None, IsLargeArc: typing.Optional[bool] = None, RadiusX: typing.Optional[float] = None, RadiusY: typing.Optional[float] = None, StartPosition: 'typing.Optional[RealPoint2D_d6e70c78]' = None, XAxisRotation: typing.Optional[float] = None):
        self._end_position = EndPosition
        self._is_clockwise_sweep = IsClockwiseSweep
        self._is_large_arc = IsLargeArc
        self._radius_x = RadiusX
        self._radius_y = RadiusY
        self._start_position = StartPosition
        self._x_axis_rotation = XAxisRotation

    @property
    def EndPosition(self) -> 'RealPoint2D_d6e70c78':
        """
        End point of the arc.
        """
        return self._end_position
    
    @EndPosition.setter
    def EndPosition(self, value: 'RealPoint2D_d6e70c78') -> None:
        self._end_position = value

    @property
    def IsClockwiseSweep(self) -> bool:
        """
        If TRUE, and there's a choice, take the arc that goes clock-wise from start to end point.
        """
        return self._is_clockwise_sweep
    
    @IsClockwiseSweep.setter
    def IsClockwiseSweep(self, value: bool) -> None:
        self._is_clockwise_sweep = value

    @property
    def IsLargeArc(self) -> bool:
        """
        If TRUE, and there's a choice, take the longer one of two arcs connecting start and end point.
        """
        return self._is_large_arc
    
    @IsLargeArc.setter
    def IsLargeArc(self, value: bool) -> None:
        self._is_large_arc = value

    @property
    def RadiusX(self) -> float:
        """
        Main radius in x direction of the ellipse this arc is part of.
        """
        return self._radius_x
    
    @RadiusX.setter
    def RadiusX(self, value: float) -> None:
        self._radius_x = value

    @property
    def RadiusY(self) -> float:
        """
        Main radius in y direction of the ellipse this arc is part of.
        """
        return self._radius_y
    
    @RadiusY.setter
    def RadiusY(self, value: float) -> None:
        self._radius_y = value

    @property
    def StartPosition(self) -> 'RealPoint2D_d6e70c78':
        """
        Start point of the arc.
        """
        return self._start_position
    
    @StartPosition.setter
    def StartPosition(self, value: 'RealPoint2D_d6e70c78') -> None:
        self._start_position = value

    @property
    def XAxisRotation(self) -> float:
        """
        Rotation angle of the x axis of the ellipse relative to the x axis of the reference coordinate system.
        """
        return self._x_axis_rotation
    
    @XAxisRotation.setter
    def XAxisRotation(self, value: float) -> None:
        self._x_axis_rotation = value

def _dynamic_struct() -> None:
    # Dynamically create uno struct using uno
    global EllipticalArc
    ignore = os.environ.get('ooouno_ignore_runtime', 'False')
    if ignore == 'True':
        return
    if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
        order = ('EndPosition', 'IsClockwiseSweep', 'IsLargeArc', 'RadiusX', 'RadiusY', 'StartPosition', 'XAxisRotation')
        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('com.sun.star.geometry.EllipticalArc')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        EllipticalArc = _struct_init

if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
    _dynamic_struct()

__all__ = ['EllipticalArc']
