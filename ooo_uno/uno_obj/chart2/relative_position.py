# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.chart2
# Libre Office Version: 7.2
import typing
if typing.TYPE_CHECKING:
    from ..drawing.alignment import Alignment as Alignment_b1400b93
from ooo_uno.oenv import UNO_ENVIRONMENT, UNO_RUNTIME
_DYNAMIC = False
if (not typing.TYPE_CHECKING) and UNO_RUNTIME and UNO_ENVIRONMENT:
    _DYNAMIC = True
    from ooo_uno.helper import uno_helper

if typing.TYPE_CHECKING or _DYNAMIC is False:


    class RelativePosition(object):
        """
        Struct Class

        Determines a position of an object relative to a size defined by other means.
        
        Values from 0 to 1 cover the entire reference rectangle. Values may also be outside this range, especially negative.

        See Also:
            `API RelativePosition <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1chart2_1_1RelativePosition.html>`_


        Note:
            | At runtime RelativePosition will be an actual uno struct however can seamlessly be treated as a regualr class.
            | At design time a class is presumed. This allows for better typings.
            | RelativePosition is a callable and can be treatead as a class and create instances.
        """

        def __init__(self, Anchor: 'typing.Optional[Alignment_b1400b93]' = None, Primary: typing.Optional[float] = None, Secondary: typing.Optional[float] = None):
            self._anchor = Anchor
            self._primary = Primary
            self._secondary = Secondary

        @property
        def Anchor(self) -> 'Alignment_b1400b93':
            """
            This indicates how the object is placed at the relative position.
            
            The Anchor indicates which point of the placed object will be placed at the coordinates given within Primary and Secondary.
            
            For example if Anchor is TOP_LEFT the top left corner of an object will be placed at the given coordinates. If Anchor is RIGHT the right middle corner of the object will be placed at the given coordinates.
            """
            return self._anchor
        
        @Anchor.setter
        def Anchor(self, value: 'Alignment_b1400b93') -> None:
            self._anchor = value

        @property
        def Primary(self) -> float:
            """
            The position in the primary direction.
            
            The direction is defined by the object using this point.
            
            For example for western languages the primary direction may be the horizontal distance measured from left to right.
            
            The values are relative to a reference size (for example the page size). Values between 0 and 1 span the complete bounding rectangle.
            """
            return self._primary
        
        @Primary.setter
        def Primary(self, value: float) -> None:
            self._primary = value

        @property
        def Secondary(self) -> float:
            """
            The position in the secondary direction.
            
            The direction is defined by the object using this point.
            
            For example for western languages the secondary direction may be the vertical distance measured from top to bottom.
            
            The values are relative to a reference size (for example the page size). Values between 0 and 1 span the complete bounding rectangle.
            """
            return self._secondary
        
        @Secondary.setter
        def Secondary(self, value: float) -> None:
            self._secondary = value

if not typing.TYPE_CHECKING and _DYNAMIC:
    def _dynamic_struct() -> None:
        # Dynamically create uno struct using uno
        global RelativePosition
        order = ('Anchor', 'Primary', 'Secondary')

        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('com.sun.star.chart2.RelativePosition')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        RelativePosition = _struct_init

    _dynamic_struct()

__all__ = ['RelativePosition']
