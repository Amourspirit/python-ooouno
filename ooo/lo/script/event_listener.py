# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.script
# Libre Office Version: 7.2
import typing
if typing.TYPE_CHECKING:
    from .x_all_listener import XAllListener as XAllListener_c91b0c54


class EventListener(object):
    """
    Struct Class


    See Also:
        `API EventListener <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1script_1_1EventListener.html>`_
    """
    __ooo_ns__: str = 'com.sun.star.script'
    __ooo_full_ns__: str = 'com.sun.star.script.EventListener'
    __ooo_type_name__: str = 'struct'
    typeName: str = 'com.sun.star.script.EventListener'
    """Literal Constant ``com.sun.star.script.EventListener``"""


    def __init__(self, *args, **kwargs):
        """
        Constructor

        Other Arguments:
            First positinal arg can be another ``EventListener`` instance,
                if it is the only argument passed to contructor;
                Otherwise, postitional arguments are treated as ``EventListener``
                values. Following the order of ``Keyword Arguments``.

        Keyword Arguments:
            AllListener (XAllListener, optional): AllListener value
            Helper (object, optional): Helper value
            ListenerType (str, optional): ListenerType value
            AddListenerParam (str, optional): AddListenerParam value
            EventMethod (str, optional): EventMethod value
        """
        self._all_listener = None
        self._helper = None
        self._listener_type = None
        self._add_listener_param = None
        self._event_method = None

        key_order = ('AllListener', 'Helper', 'ListenerType', 'AddListenerParam', 'EventMethod')
        arg_len = len(args)
        if arg_len == 1:
            if isinstance(args[0], EventListener):
                oth = args[0]
                for key in key_order:
                    setattr(self, key, getattr(oth, key))
                return

        if  arg_len > len(key_order):
            raise ValueError("EventListener.__init__() To many parameters")
        for i, arg in enumerate(args):
            setattr(self, key_order[i], arg)
        for k, v in kwargs.items():
            if k in key_order:
                setattr(self, k, v)

    @property
    def AllListener(self) -> 'XAllListener_c91b0c54':
        """
        """
        return self._all_listener
    
    @AllListener.setter
    def AllListener(self, value: 'XAllListener_c91b0c54') -> None:
        self._all_listener = value

    @property
    def Helper(self) -> object:
        """
        """
        return self._helper
    
    @Helper.setter
    def Helper(self, value: object) -> None:
        self._helper = value

    @property
    def ListenerType(self) -> str:
        """
        """
        return self._listener_type
    
    @ListenerType.setter
    def ListenerType(self, value: str) -> None:
        self._listener_type = value

    @property
    def AddListenerParam(self) -> str:
        """
        """
        return self._add_listener_param
    
    @AddListenerParam.setter
    def AddListenerParam(self, value: str) -> None:
        self._add_listener_param = value

    @property
    def EventMethod(self) -> str:
        """
        """
        return self._event_method
    
    @EventMethod.setter
    def EventMethod(self, value: str) -> None:
        self._event_method = value


__all__ = ['EventListener']
