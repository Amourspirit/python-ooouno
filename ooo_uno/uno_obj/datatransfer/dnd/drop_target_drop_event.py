# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.datatransfer.dnd
# Libre Office Version: 7.2
import os
from .drop_target_event import DropTargetEvent as DropTargetEvent_8d651169
import typing
if typing.TYPE_CHECKING:
    from ..x_transferable import XTransferable as XTransferable_2d800f38
    from .x_drop_target_drop_context import XDropTargetDropContext as XDropTargetDropContext_10e81439
from ooo_uno.oenv import UNO_ENVIRONMENT
if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
    from ooo_uno.helper import uno_helper


class DropTargetDropEvent(DropTargetEvent_8d651169):
    """
    Struct Class

    The DropTargetDropEvent is delivered from the drop target to its currently registered drop target listener.
    
    It contains sufficient information for the originator of the operation to provide appropriate feedback to the end user when the operation completes.

    See Also:
        `API DropTargetDropEvent <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1datatransfer_1_1dnd_1_1DropTargetDropEvent.html>`_


    Note:
        | At runtime DropTargetDropEvent will be an actual uno struct however can seamlessly be treated as a regualr class.
        | At design time a class is presumed. This allows for better typings.
        | DropTargetDropEvent is a callable and can be treatead as a class and create instances.
    """

    def __init__(self, Context: 'typing.Optional[XDropTargetDropContext_10e81439]' = None, DropAction: typing.Optional[int] = None, LocationX: typing.Optional[int] = None, LocationY: typing.Optional[int] = None, SourceActions: typing.Optional[int] = None, Transferable: 'typing.Optional[XTransferable_2d800f38]' = None):
        self._context = Context
        self._drop_action = DropAction
        self._location_x = LocationX
        self._location_y = LocationY
        self._source_actions = SourceActions
        self._transferable = Transferable

    @property
    def Context(self) -> 'XDropTargetDropContext_10e81439':
        """
        The drop target context of the current drag operation.
        """
        return self._context
    
    @Context.setter
    def Context(self, value: 'XDropTargetDropContext_10e81439') -> None:
        self._context = value

    @property
    def DropAction(self) -> int:
        """
        This value represents the action or actions selected by the user at the time of the drop.
        
        If more than one action is specified, the XDropTargetListener should raise a dialog to ask the user which action to use.
        """
        return self._drop_action
    
    @DropAction.setter
    def DropAction(self, value: int) -> None:
        self._drop_action = value

    @property
    def LocationX(self) -> int:
        """
        The cursor's current x location within the window's coordinates.
        """
        return self._location_x
    
    @LocationX.setter
    def LocationX(self, value: int) -> None:
        self._location_x = value

    @property
    def LocationY(self) -> int:
        """
        The cursor's current y location within the window's coordinates.
        """
        return self._location_y
    
    @LocationY.setter
    def LocationY(self, value: int) -> None:
        self._location_y = value

    @property
    def SourceActions(self) -> int:
        """
        This value represents the action or actions supported by the source.
        """
        return self._source_actions
    
    @SourceActions.setter
    def SourceActions(self, value: int) -> None:
        self._source_actions = value

    @property
    def Transferable(self) -> 'XTransferable_2d800f38':
        """
        The transferable object associated with the drop.
        """
        return self._transferable
    
    @Transferable.setter
    def Transferable(self, value: 'XTransferable_2d800f38') -> None:
        self._transferable = value

def _dynamic_struct() -> None:
    # Dynamically create uno struct using uno
    global DropTargetDropEvent
    ignore = os.environ.get('ooouno_ignore_runtime', 'False')
    if ignore == 'True':
        return
    if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
        order = ('Context', 'DropAction', 'LocationX', 'LocationY', 'SourceActions', 'Transferable')
        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('com.sun.star.datatransfer.dnd.DropTargetDropEvent')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        DropTargetDropEvent = _struct_init

if (not typing.TYPE_CHECKING) and UNO_ENVIRONMENT:
    _dynamic_struct()

__all__ = ['DropTargetDropEvent']
