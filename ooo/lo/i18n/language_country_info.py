# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.i18n
# Libre Office Version: 7.2


class LanguageCountryInfo(object):
    """
    Struct Class

    The language and country identifiers and descriptive names of the loaded locale data returned by XLocaleData.getLanguageCountryInfo().

    See Also:
        `API LanguageCountryInfo <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1i18n_1_1LanguageCountryInfo.html>`_
    """
    __ooo_ns__: str = 'com.sun.star.i18n'
    __ooo_full_ns__: str = 'com.sun.star.i18n.LanguageCountryInfo'
    __ooo_type_name__: str = 'struct'
    typeName: str = 'com.sun.star.i18n.LanguageCountryInfo'
    """Literal Constant ``com.sun.star.i18n.LanguageCountryInfo``"""


    def __init__(self, *args, **kwargs):
        """
        Constructor

        Other Arguments:
            First positinal arg can be another ``LanguageCountryInfo`` instance,
                if it is the only argument passed to contructor;
                Otherwise, postitional arguments are treated as ``LanguageCountryInfo``
                values. Following the order of ``Keyword Arguments``.

        Keyword Arguments:
            Language (str, optional): Language value
            LanguageDefaultName (str, optional): LanguageDefaultName value
            Country (str, optional): Country value
            CountryDefaultName (str, optional): CountryDefaultName value
            Variant (str, optional): Variant value
        """
        self._language = None
        self._language_default_name = None
        self._country = None
        self._country_default_name = None
        self._variant = None

        key_order = ('Language', 'LanguageDefaultName', 'Country', 'CountryDefaultName', 'Variant')
        arg_len = len(args)
        if arg_len == 1:
            if isinstance(args[0], LanguageCountryInfo):
                oth = args[0]
                for key in key_order:
                    setattr(self, key, getattr(oth, key))
                return

        if  arg_len > len(key_order):
            raise ValueError("LanguageCountryInfo.__init__() To many parameters")
        for i, arg in enumerate(args):
            setattr(self, key_order[i], arg)
        for k, v in kwargs.items():
            if k in key_order:
                setattr(self, k, v)

    @property
    def Language(self) -> str:
        """
        ISO-639 language code, for example, \"en\" or \"de\".
        """
        return self._language
    
    @Language.setter
    def Language(self, value: str) -> None:
        self._language = value

    @property
    def LanguageDefaultName(self) -> str:
        """
        Descriptive language name, for example, \"English\" or \"German\".
        """
        return self._language_default_name
    
    @LanguageDefaultName.setter
    def LanguageDefaultName(self, value: str) -> None:
        self._language_default_name = value

    @property
    def Country(self) -> str:
        """
        ISO-3166 country code, for example, \"US\" or \"DE\".
        """
        return self._country
    
    @Country.setter
    def Country(self, value: str) -> None:
        self._country = value

    @property
    def CountryDefaultName(self) -> str:
        """
        Descriptive country name, for example, \"United States\" or \"Germany\".
        """
        return self._country_default_name
    
    @CountryDefaultName.setter
    def CountryDefaultName(self, value: str) -> None:
        self._country_default_name = value

    @property
    def Variant(self) -> str:
        """
        A variant name.
        """
        return self._variant
    
    @Variant.setter
    def Variant(self, value: str) -> None:
        self._variant = value


__all__ = ['LanguageCountryInfo']
