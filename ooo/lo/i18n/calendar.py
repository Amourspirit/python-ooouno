# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.i18n
# Libre Office Version: 7.2
import typing
if typing.TYPE_CHECKING:
    from .calendar_item import CalendarItem as CalendarItem_a86c0af1


class Calendar(object):
    """
    Struct Class

    A calendar as returned in a sequence by XLocaleData.getAllCalendars().

    See Also:
        `API Calendar <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1i18n_1_1Calendar.html>`_
    """
    __ooo_ns__: str = 'com.sun.star.i18n'
    __ooo_full_ns__: str = 'com.sun.star.i18n.Calendar'
    __ooo_type_name__: str = 'struct'
    typeName: str = 'com.sun.star.i18n.Calendar'
    """Literal Constant ``com.sun.star.i18n.Calendar``"""

    def __init__(self, *args, **kwargs):
        """
        Constructor

        Other Arguments:
            First positinal arg can be another ``Calendar`` instance,
                if it is the only argument passed to contructor;
                Otherwise, postitional arguments are treated as ``Calendar``
                values. Following the order of ``Keyword Arguments``.

        Keyword Arguments:
            StartOfWeek (str, optional): StartOfWeek value
            MinimumNumberOfDaysForFirstWeek (int, optional): MinimumNumberOfDaysForFirstWeek value
            Default (bool, optional): Default value
            Name (str, optional): Name value
            Days (Tuple[CalendarItem, ...], optional): Days value
            Months (Tuple[CalendarItem, ...], optional): Months value
            Eras (Tuple[CalendarItem, ...], optional): Eras value
        """
        self._start_of_week = None
        self._minimum_number_of_days_for_first_week = None
        self._default = None
        self._name = None
        self._days = None
        self._months = None
        self._eras = None

        key_order = ('StartOfWeek', 'MinimumNumberOfDaysForFirstWeek', 'Default', 'Name', 'Days', 'Months', 'Eras')
        arg_len = len(args)
        if arg_len == 1:
            if isinstance(args[0], Calendar):
                oth = args[0]
                for key in key_order:
                    setattr(self, key, getattr(oth, key))
                return

        if  arg_len > len(key_order):
            raise ValueError("Calendar.__init__() To many parameters")
        for i, arg in enumerate(args):
            setattr(self, key_order[i], arg)
        for k, v in kwargs.items():
            if k in key_order:
                setattr(self, k, v)


    @property
    def StartOfWeek(self) -> str:
        """
        the ID of the day with which the week begins.
        """
        return self._start_of_week
    
    @StartOfWeek.setter
    def StartOfWeek(self, value: str) -> None:
        self._start_of_week = value

    @property
    def MinimumNumberOfDaysForFirstWeek(self) -> int:
        """
        how many days must reside in the first week of a year.
        """
        return self._minimum_number_of_days_for_first_week
    
    @MinimumNumberOfDaysForFirstWeek.setter
    def MinimumNumberOfDaysForFirstWeek(self, value: int) -> None:
        self._minimum_number_of_days_for_first_week = value

    @property
    def Default(self) -> bool:
        """
        if this is the default calendar for a given locale.
        """
        return self._default
    
    @Default.setter
    def Default(self, value: bool) -> None:
        self._default = value

    @property
    def Name(self) -> str:
        """
        the name of the calendar, for example, Gregorian.
        """
        return self._name
    
    @Name.setter
    def Name(self, value: str) -> None:
        self._name = value

    @property
    def Days(self) -> 'typing.Tuple[CalendarItem_a86c0af1, ...]':
        """
        the days of the week, see also CalendarItem.
        """
        return self._days
    
    @Days.setter
    def Days(self, value: 'typing.Tuple[CalendarItem_a86c0af1, ...]') -> None:
        self._days = value

    @property
    def Months(self) -> 'typing.Tuple[CalendarItem_a86c0af1, ...]':
        """
        the months of the year, see also CalendarItem.
        """
        return self._months
    
    @Months.setter
    def Months(self, value: 'typing.Tuple[CalendarItem_a86c0af1, ...]') -> None:
        self._months = value

    @property
    def Eras(self) -> 'typing.Tuple[CalendarItem_a86c0af1, ...]':
        """
        the possible eras, see also CalendarItem.
        """
        return self._eras
    
    @Eras.setter
    def Eras(self, value: 'typing.Tuple[CalendarItem_a86c0af1, ...]') -> None:
        self._eras = value


__all__ = ['Calendar']
