# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.sheet
# Libre Office Version: 7.2
import typing
from ooo_uno.oenv import UNO_ENVIRONMENT, UNO_RUNTIME
_DYNAMIC = False
if (not typing.TYPE_CHECKING) and UNO_RUNTIME and UNO_ENVIRONMENT:
    _DYNAMIC = True
    from ooo_uno.helper import uno_helper

if typing.TYPE_CHECKING or _DYNAMIC is False:


    class ExternalReference(object):
        """
        Struct Class

        Data structure to store information about an external reference.
        
        An external reference can be either a single cell reference, a cell range reference, or a named range.
        
        **since**
        
            OOo 3.1

        See Also:
            `API ExternalReference <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1sheet_1_1ExternalReference.html>`_


        Note:
            | At runtime ExternalReference will be an actual uno struct however can seamlessly be treated as a regualr class.
            | At design time a class is presumed. This allows for better typings.
            | ExternalReference is a callable and can be treatead as a class and create instances.
        """

        def __init__(self, Index: typing.Optional[int] = None, Reference: typing.Optional[object] = None):
            self._index = Index
            self._reference = Reference

        @property
        def Index(self) -> int:
            """
            Index of an externally linked document.
            
            Each externally-linked document has a unique index value.
            
            You can get the index value of an external document from the corresponding com.sun.star.sheet.ExternalDocLink instance through its attribute com.sun.star.sheet.ExternalDocLink.TokenIndex.
            """
            return self._index
        
        @Index.setter
        def Index(self, value: int) -> None:
            self._index = value

        @property
        def Reference(self) -> object:
            """
            Reference data.
            
            This can store either SingleReference for a single cell reference, ComplexReference for a cell range reference, or simply a string for a defined name.
            
            The SingleReference.Sheet member shall contain the index of the external sheet cache containing the values of the externally referenced cells.
            """
            return self._reference
        
        @Reference.setter
        def Reference(self, value: object) -> None:
            self._reference = value

if not typing.TYPE_CHECKING and _DYNAMIC:
    def _dynamic_struct() -> None:
        # Dynamically create uno struct using uno
        global ExternalReference
        order = ('Index', 'Reference')

        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('com.sun.star.sheet.ExternalReference')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        ExternalReference = _struct_init

    _dynamic_struct()

__all__ = ['ExternalReference']
