# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.frame
# Libre Office Version: 7.2
from ..lang.event_object import EventObject as EventObject_a3d70b03
import typing
if typing.TYPE_CHECKING:
    from ..util.url import URL as URL_57ad07b9
from ooo_uno.oenv import UNO_ENVIRONMENT, UNO_RUNTIME
_DYNAMIC = False
if (not typing.TYPE_CHECKING) and UNO_RUNTIME and UNO_ENVIRONMENT:
    _DYNAMIC = True
    from ooo_uno.helper import uno_helper

if typing.TYPE_CHECKING or _DYNAMIC is False:


    class FeatureStateEvent(EventObject_a3d70b03):
        """
        Struct Class

        This event is broadcast by a Controller whenever the state of the feature changes.

        See Also:
            `API FeatureStateEvent <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1frame_1_1FeatureStateEvent.html>`_


        Note:
            | At runtime FeatureStateEvent will be an actual uno struct however can seamlessly be treated as a regualr class.
            | At design time a class is presumed. This allows for better typings.
            | FeatureStateEvent is a callable and can be treatead as a class and create instances.
        """

        def __init__(self, FeatureDescriptor: typing.Optional[str] = None, FeatureURL: 'typing.Optional[URL_57ad07b9]' = None, IsEnabled: typing.Optional[bool] = None, Requery: typing.Optional[bool] = None, State: typing.Optional[object] = None):
            self._feature_descriptor = FeatureDescriptor
            self._feature_url = FeatureURL
            self._is_enabled = IsEnabled
            self._requery = Requery
            self._state = State

        @property
        def FeatureDescriptor(self) -> str:
            """
            contains a descriptor of the feature for the user interface.
            """
            return self._feature_descriptor
        
        @FeatureDescriptor.setter
        def FeatureDescriptor(self, value: str) -> None:
            self._feature_descriptor = value

        @property
        def FeatureURL(self) -> 'URL_57ad07b9':
            """
            contains the URL of the feature.
            """
            return self._feature_url
        
        @FeatureURL.setter
        def FeatureURL(self, value: 'URL_57ad07b9') -> None:
            self._feature_url = value

        @property
        def IsEnabled(self) -> bool:
            """
            specifies whether the feature is currently enabled or disabled.
            """
            return self._is_enabled
        
        @IsEnabled.setter
        def IsEnabled(self, value: bool) -> None:
            self._is_enabled = value

        @property
        def Requery(self) -> bool:
            """
            specifies whether the XDispatch has to be required.
            
            Interest code should listen for FrameActionEvent too, to update own feature states and dispatch listener on FrameAction.CONTEXT_CHANGED.
            """
            return self._requery
        
        @Requery.setter
        def Requery(self, value: bool) -> None:
            self._requery = value

        @property
        def State(self) -> object:
            """
            contains the state of the feature in this dispatch.
            
            This can be, for example, simply TRUE for a boolean feature like underline on/off. Some simple types like string or boolean are useful here for generic UI elements, like a checkmark in a menu.
            """
            return self._state
        
        @State.setter
        def State(self, value: object) -> None:
            self._state = value

if not typing.TYPE_CHECKING and _DYNAMIC:
    def _dynamic_struct() -> None:
        # Dynamically create uno struct using uno
        global FeatureStateEvent
        order = ('FeatureDescriptor', 'FeatureURL', 'IsEnabled', 'Requery', 'State')

        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('com.sun.star.frame.FeatureStateEvent')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        FeatureStateEvent = _struct_init

    _dynamic_struct()

__all__ = ['FeatureStateEvent']
