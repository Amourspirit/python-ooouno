# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.chart2
# Libre Office Version: 7.2
import typing
if typing.TYPE_CHECKING:
    from ..chart.time_increment import TimeIncrement as TimeIncrement_c7e70c4e
    from .axis_orientation import AxisOrientation as AxisOrientation_ecba0d6d
    from .increment_data import IncrementData as IncrementData_d2000c6b
    from .x_scaling import XScaling as XScaling_97500a65
    from .data.x_labeled_data_sequence import XLabeledDataSequence as XLabeledDataSequence_7e1a10c8
from ooo_uno.oenv import UNO_ENVIRONMENT, UNO_RUNTIME
_DYNAMIC = False
if (not typing.TYPE_CHECKING) and UNO_RUNTIME and UNO_ENVIRONMENT:
    _DYNAMIC = True
    from ooo_uno.helper import uno_helper

if typing.TYPE_CHECKING or _DYNAMIC is False:


    class ScaleData(object):
        """
        Struct Class


        See Also:
            `API ScaleData <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1chart2_1_1ScaleData.html>`_


        Note:
            | At runtime ScaleData will be an actual uno struct however can seamlessly be treated as a regualr class.
            | At design time a class is presumed. This allows for better typings.
            | ScaleData is a callable and can be treatead as a class and create instances.
        """

        def __init__(self, AutoDateAxis: typing.Optional[bool] = None, AxisType: typing.Optional[int] = None, Categories: 'typing.Optional[XLabeledDataSequence_7e1a10c8]' = None, IncrementData: 'typing.Optional[IncrementData_d2000c6b]' = None, Maximum: typing.Optional[object] = None, Minimum: typing.Optional[object] = None, Orientation: 'typing.Optional[AxisOrientation_ecba0d6d]' = None, Origin: typing.Optional[object] = None, Scaling: 'typing.Optional[XScaling_97500a65]' = None, ShiftedCategoryPosition: typing.Optional[bool] = None, TimeIncrement: 'typing.Optional[TimeIncrement_c7e70c4e]' = None):
            self._auto_date_axis = AutoDateAxis
            self._axis_type = AxisType
            self._categories = Categories
            self._increment_data = IncrementData
            self._maximum = Maximum
            self._minimum = Minimum
            self._orientation = Orientation
            self._origin = Origin
            self._scaling = Scaling
            self._shifted_category_position = ShiftedCategoryPosition
            self._time_increment = TimeIncrement

        @property
        def AutoDateAxis(self) -> bool:
            """
            if true an AxisType CATEGORY is interpreted as DATE if the underlying data given in Categories are dates
            """
            return self._auto_date_axis
        
        @AutoDateAxis.setter
        def AutoDateAxis(self, value: bool) -> None:
            self._auto_date_axis = value

        @property
        def AxisType(self) -> int:
            """
            describes the type of the axis.
            
            It can be a real number axis or a category axis or something else. AxisType is one value out of the constant group AxisType.
            """
            return self._axis_type
        
        @AxisType.setter
        def AxisType(self, value: int) -> None:
            self._axis_type = value

        @property
        def Categories(self) -> 'XLabeledDataSequence_7e1a10c8':
            return self._categories
        
        @Categories.setter
        def Categories(self, value: 'XLabeledDataSequence_7e1a10c8') -> None:
            self._categories = value

        @property
        def IncrementData(self) -> 'IncrementData_d2000c6b':
            """
            increment data to be used for not date-time axis
            """
            return self._increment_data
        
        @IncrementData.setter
        def IncrementData(self, value: 'IncrementData_d2000c6b') -> None:
            self._increment_data = value

        @property
        def Maximum(self) -> object:
            """
            if the any contains a double value this is used as a fixed minimum.
            
            Otherwise, if the any is empty or contains an incompatible type, the minimum is automatic.
            
            If the minimum is automatic, this means, each view that represents the model containing this scale, has to calculate a minimum by its own means.
            """
            return self._maximum
        
        @Maximum.setter
        def Maximum(self, value: object) -> None:
            self._maximum = value

        @property
        def Minimum(self) -> object:
            """
            if the any contains a double value this is used as a fixed maximum.
            
            Otherwise, if the any is empty or contains an incompatible type, the maximum is automatic.
            
            If the maximum is automatic, this means, each view that represents the model containing this scale, has to calculate a maximum by its own means.
            """
            return self._minimum
        
        @Minimum.setter
        def Minimum(self, value: object) -> None:
            self._minimum = value

        @property
        def Orientation(self) -> 'AxisOrientation_ecba0d6d':
            """
            Axis orientation (standard or reversed).
            
            If used at the Y axis in pie charts or doughnut charts, specifies the rotation direction of the pie. The value AxisOrientation.MATHEMATICAL rotates the pie counterclockwise, the value AxisOrientation.REVERSE rotates the pie clockwise.
            
            Note: Is this a good place for the axis orientation? Two axes may use the same scale, but point into two different directions.
            """
            return self._orientation
        
        @Orientation.setter
        def Orientation(self, value: 'AxisOrientation_ecba0d6d') -> None:
            self._orientation = value

        @property
        def Origin(self) -> object:
            """
            The Origin indicates where other axes cross this axis.
            
            If the any contains a double value that value is used. Otherwise an appropriate value has to be calculated by that instances using Origin.
            """
            return self._origin
        
        @Origin.setter
        def Origin(self, value: object) -> None:
            self._origin = value

        @property
        def Scaling(self) -> 'XScaling_97500a65':
            return self._scaling
        
        @Scaling.setter
        def Scaling(self, value: 'XScaling_97500a65') -> None:
            self._scaling = value

        @property
        def ShiftedCategoryPosition(self) -> bool:
            """
            describes whether data points on category or date axis are placed between tickmarks or not if true the maximum on the scale will be expanded for one interval
            """
            return self._shifted_category_position
        
        @ShiftedCategoryPosition.setter
        def ShiftedCategoryPosition(self, value: bool) -> None:
            self._shifted_category_position = value

        @property
        def TimeIncrement(self) -> 'TimeIncrement_c7e70c4e':
            """
            increment data to be used in case of date-time axis
            """
            return self._time_increment
        
        @TimeIncrement.setter
        def TimeIncrement(self, value: 'TimeIncrement_c7e70c4e') -> None:
            self._time_increment = value

if not typing.TYPE_CHECKING and _DYNAMIC:
    def _dynamic_struct() -> None:
        # Dynamically create uno struct using uno
        global ScaleData
        order = ('AutoDateAxis', 'AxisType', 'Categories', 'IncrementData', 'Maximum', 'Minimum', 'Orientation', 'Origin', 'Scaling', 'ShiftedCategoryPosition', 'TimeIncrement')

        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('com.sun.star.chart2.ScaleData')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        ScaleData = _struct_init

    _dynamic_struct()

__all__ = ['ScaleData']
