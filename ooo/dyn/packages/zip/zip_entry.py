# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.packages.zip
# Libre Office Version: 7.2
from typing import TYPE_CHECKING
from ooo.oenv import UNO_ENVIRONMENT, UNO_RUNTIME, UNO_NONE
_DYNAMIC = False
if (not TYPE_CHECKING) and UNO_RUNTIME and UNO_ENVIRONMENT:
    _DYNAMIC = True

if not TYPE_CHECKING and _DYNAMIC:
    def _dynamic_struct():
        import uno
        from com.sun.star.packages.zip import ZipEntry as UZipEntry
        # Dynamically create uno com.sun.star.packages.zip.ZipEntry using uno
        global ZipEntry

        def _set_attr(struct):
            struct.__dict__['__ooo_ns__'] = 'com.sun.star.packages.zip'
            struct.__dict__['__ooo_full_ns__'] = 'com.sun.star.packages.zip.ZipEntry'
            struct.__dict__['__ooo_type_name__'] = 'struct'

        def _struct_init(extra = UNO_NONE, nVersion = UNO_NONE, nFlag = UNO_NONE, nMethod = UNO_NONE, nTime = UNO_NONE, nCrc = UNO_NONE, nCompressedSize = UNO_NONE, nSize = UNO_NONE, nOffset = UNO_NONE, nDiskNumber = UNO_NONE, sName = UNO_NONE, sComment = UNO_NONE):
            ns = 'com.sun.star.packages.zip.ZipEntry'
            if isinstance(extra, UZipEntry):
                inst = uno.createUnoStruct(ns, extra)
                _set_attr(inst)
                return inst
            struct = uno.createUnoStruct(ns)

            if not extra is UNO_NONE:
                if getattr(struct, 'extra') != extra:
                    setattr(struct, 'extra', extra)
            if not nVersion is UNO_NONE:
                if getattr(struct, 'nVersion') != nVersion:
                    setattr(struct, 'nVersion', nVersion)
            if not nFlag is UNO_NONE:
                if getattr(struct, 'nFlag') != nFlag:
                    setattr(struct, 'nFlag', nFlag)
            if not nMethod is UNO_NONE:
                if getattr(struct, 'nMethod') != nMethod:
                    setattr(struct, 'nMethod', nMethod)
            if not nTime is UNO_NONE:
                if getattr(struct, 'nTime') != nTime:
                    setattr(struct, 'nTime', nTime)
            if not nCrc is UNO_NONE:
                if getattr(struct, 'nCrc') != nCrc:
                    setattr(struct, 'nCrc', nCrc)
            if not nCompressedSize is UNO_NONE:
                if getattr(struct, 'nCompressedSize') != nCompressedSize:
                    setattr(struct, 'nCompressedSize', nCompressedSize)
            if not nSize is UNO_NONE:
                if getattr(struct, 'nSize') != nSize:
                    setattr(struct, 'nSize', nSize)
            if not nOffset is UNO_NONE:
                if getattr(struct, 'nOffset') != nOffset:
                    setattr(struct, 'nOffset', nOffset)
            if not nDiskNumber is UNO_NONE:
                if getattr(struct, 'nDiskNumber') != nDiskNumber:
                    setattr(struct, 'nDiskNumber', nDiskNumber)
            if not sName is UNO_NONE:
                if getattr(struct, 'sName') != sName:
                    setattr(struct, 'sName', sName)
            if not sComment is UNO_NONE:
                if getattr(struct, 'sComment') != sComment:
                    setattr(struct, 'sComment', sComment)
            _set_attr(struct)
            return struct
        ZipEntry = _struct_init

    _dynamic_struct()
else:
    from ....lo.packages.zip.zip_entry import ZipEntry as ZipEntry

__all__ = ['ZipEntry']

