# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.geometry
# Libre Office Version: 7.2
import typing
from ooo_uno.oenv import UNO_ENVIRONMENT, UNO_RUNTIME
_DYNAMIC = False
if (not typing.TYPE_CHECKING) and UNO_RUNTIME and UNO_ENVIRONMENT:
    _DYNAMIC = True
    from ooo_uno.helper import uno_helper

if typing.TYPE_CHECKING or _DYNAMIC is False:


    class IntegerBezierSegment2D(object):
        """
        Struct Class

        This structure contains the relevant data for a cubic Bezier curve.
        
        The data is stored integer-valued. The last point of the segment is taken from the first point of the following segment, and thus not included herein. That is, when forming a polygon out of cubic Bezier segments, each two consecutive IntegerBezierSegment2Ds define the actual curve, with the very last segment providing only the end point of the last curve, and the remaining members ignored.
        
        **since**
        
            OOo 2.0

        See Also:
            `API IntegerBezierSegment2D <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1geometry_1_1IntegerBezierSegment2D.html>`_


        Note:
            | At runtime IntegerBezierSegment2D will be an actual uno struct however can seamlessly be treated as a regualr class.
            | At design time a class is presumed. This allows for better typings.
            | IntegerBezierSegment2D is a callable and can be treatead as a class and create instances.
        """

        def __init__(self, C1x: typing.Optional[int] = None, C1y: typing.Optional[int] = None, C2x: typing.Optional[int] = None, C2y: typing.Optional[int] = None, Px: typing.Optional[int] = None, Py: typing.Optional[int] = None):
            self._c1x = C1x
            self._c1y = C1y
            self._c2x = C2x
            self._c2y = C2y
            self._px = Px
            self._py = Py

        @property
        def C1x(self) -> int:
            """
            The x coordinate of the first control point.
            """
            return self._c1x
        
        @C1x.setter
        def C1x(self, value: int) -> None:
            self._c1x = value

        @property
        def C1y(self) -> int:
            """
            The y coordinate of the first control point.
            """
            return self._c1y
        
        @C1y.setter
        def C1y(self, value: int) -> None:
            self._c1y = value

        @property
        def C2x(self) -> int:
            """
            The x coordinate of the second control point.
            """
            return self._c2x
        
        @C2x.setter
        def C2x(self, value: int) -> None:
            self._c2x = value

        @property
        def C2y(self) -> int:
            """
            The y coordinate of the second control point.
            """
            return self._c2y
        
        @C2y.setter
        def C2y(self, value: int) -> None:
            self._c2y = value

        @property
        def Px(self) -> int:
            """
            The x coordinate of the start point.
            """
            return self._px
        
        @Px.setter
        def Px(self, value: int) -> None:
            self._px = value

        @property
        def Py(self) -> int:
            """
            The y coordinate of the start point.
            """
            return self._py
        
        @Py.setter
        def Py(self, value: int) -> None:
            self._py = value

if not typing.TYPE_CHECKING and _DYNAMIC:
    def _dynamic_struct() -> None:
        # Dynamically create uno struct using uno
        global IntegerBezierSegment2D
        order = ('C1x', 'C1y', 'C2x', 'C2y', 'Px', 'Py')

        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('com.sun.star.geometry.IntegerBezierSegment2D')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        IntegerBezierSegment2D = _struct_init

    _dynamic_struct()

__all__ = ['IntegerBezierSegment2D']
