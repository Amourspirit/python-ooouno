# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.i18n
# Libre Office Version: 7.2
import typing
from ooo_uno.oenv import UNO_ENVIRONMENT, UNO_RUNTIME
_DYNAMIC = False
if (not typing.TYPE_CHECKING) and UNO_RUNTIME and UNO_ENVIRONMENT:
    _DYNAMIC = True
    from ooo_uno.helper import uno_helper

if typing.TYPE_CHECKING or _DYNAMIC is False:


    class FormatElement(object):
        """
        Struct Class

        One number format code and its attributes, returned in a sequence by XLocaleData.getAllFormats().
        
        Contains raw data defined in the XML locale data files.

        See Also:
            `API FormatElement <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1i18n_1_1FormatElement.html>`_


        Note:
            | At runtime FormatElement will be an actual uno struct however can seamlessly be treated as a regualr class.
            | At design time a class is presumed. This allows for better typings.
            | FormatElement is a callable and can be treatead as a class and create instances.
        """

        def __init__(self, formatCode: typing.Optional[str] = None, formatIndex: typing.Optional[int] = None, formatKey: typing.Optional[str] = None, formatName: typing.Optional[str] = None, formatType: typing.Optional[str] = None, formatUsage: typing.Optional[str] = None, isDefault: typing.Optional[bool] = None):
            self._format_code = formatCode
            self._format_index = formatIndex
            self._format_key = formatKey
            self._format_name = formatName
            self._format_type = formatType
            self._format_usage = formatUsage
            self._is_default = isDefault

        @property
        def formatCode(self) -> str:
            """
            The format code, for example, \"YYYY-MM-DD\".
            """
            return self._format_code
        
        @formatCode.setter
        def formatCode(self, value: str) -> None:
            self._format_code = value

        @property
        def formatIndex(self) -> int:
            """
            The index used by the number formatter, predefined values corresponding with NumberFormatIndex values.
            """
            return self._format_index
        
        @formatIndex.setter
        def formatIndex(self, value: int) -> None:
            self._format_index = value

        @property
        def formatKey(self) -> str:
            """
            A unique (within one locale) identifier.
            """
            return self._format_key
        
        @formatKey.setter
        def formatKey(self, value: str) -> None:
            self._format_key = value

        @property
        def formatName(self) -> str:
            """
            A name or description that is displayed in the number formatter dialog.
            """
            return self._format_name
        
        @formatName.setter
        def formatName(self, value: str) -> None:
            self._format_name = value

        @property
        def formatType(self) -> str:
            """
            Type may be one of \"short\", \"medium\", \"long\".
            """
            return self._format_type
        
        @formatType.setter
        def formatType(self, value: str) -> None:
            self._format_type = value

        @property
        def formatUsage(self) -> str:
            """
            Usage category, for example, \"DATE\" or \"FIXED_NUMBER\", corresponding with KNumberFormatUsage values.
            """
            return self._format_usage
        
        @formatUsage.setter
        def formatUsage(self, value: str) -> None:
            self._format_usage = value

        @property
        def isDefault(self) -> bool:
            """
            If a format code is the default code of a formatType group.
            """
            return self._is_default
        
        @isDefault.setter
        def isDefault(self, value: bool) -> None:
            self._is_default = value

if not typing.TYPE_CHECKING and _DYNAMIC:
    def _dynamic_struct() -> None:
        # Dynamically create uno struct using uno
        global FormatElement
        order = ('formatCode', 'formatIndex', 'formatKey', 'formatName', 'formatType', 'formatUsage', 'isDefault')

        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('com.sun.star.i18n.FormatElement')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        FormatElement = _struct_init

    _dynamic_struct()

__all__ = ['FormatElement']
