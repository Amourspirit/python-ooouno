# coding: utf-8
#
# Copyright 2022 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.ucb
# Libre Office Version: 7.2
import typing
if typing.TYPE_CHECKING:
    from ..beans.property import Property as Property_8f4e0a76
from ooo_uno.oenv import UNO_ENVIRONMENT, UNO_RUNTIME
_DYNAMIC = False
if (not typing.TYPE_CHECKING) and UNO_RUNTIME and UNO_ENVIRONMENT:
    _DYNAMIC = True
    from ooo_uno.helper import uno_helper

if typing.TYPE_CHECKING or _DYNAMIC is False:


    class PropertyCommandArgument(object):
        """
        Struct Class

        The argument for the \"addProperty\" command.
        
        **since**
        
            Apache OpenOffice 4.0, LibreOffice 4.2

        See Also:
            `API PropertyCommandArgument <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1ucb_1_1PropertyCommandArgument.html>`_


        Note:
            | At runtime PropertyCommandArgument will be an actual uno struct however can seamlessly be treated as a regualr class.
            | At design time a class is presumed. This allows for better typings.
            | PropertyCommandArgument is a callable and can be treatead as a class and create instances.
        """

        def __init__(self, DefaultValue: typing.Optional[object] = None, Property: 'typing.Optional[Property_8f4e0a76]' = None):
            self._default_value = DefaultValue
            self._property = Property

        @property
        def DefaultValue(self) -> object:
            """
            The default value of the property.
            """
            return self._default_value
        
        @DefaultValue.setter
        def DefaultValue(self, value: object) -> None:
            self._default_value = value

        @property
        def Property(self) -> 'Property_8f4e0a76':
            """
            The property that the command has to add.
            """
            return self._property
        
        @Property.setter
        def Property(self, value: 'Property_8f4e0a76') -> None:
            self._property = value

if not typing.TYPE_CHECKING and _DYNAMIC:
    def _dynamic_struct() -> None:
        # Dynamically create uno struct using uno
        global PropertyCommandArgument
        order = ('DefaultValue', 'Property')

        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('com.sun.star.ucb.PropertyCommandArgument')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        PropertyCommandArgument = _struct_init

    _dynamic_struct()

__all__ = ['PropertyCommandArgument']
